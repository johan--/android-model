// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trade/msg_iap_price_list.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "trade/msg_iap_price_list.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace trade {

namespace {

const ::google::protobuf::Descriptor* IAPPriceListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IAPPriceListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* IAPPriceListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IAPPriceListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* IAPPrice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IAPPrice_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_trade_2fmsg_5fiap_5fprice_5flist_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_trade_2fmsg_5fiap_5fprice_5flist_2eproto() {
  protobuf_AddDesc_trade_2fmsg_5fiap_5fprice_5flist_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "trade/msg_iap_price_list.proto");
  GOOGLE_CHECK(file != NULL);
  IAPPriceListRequest_descriptor_ = file->message_type(0);
  static const int IAPPriceListRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IAPPriceListRequest, user_id_),
  };
  IAPPriceListRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      IAPPriceListRequest_descriptor_,
      IAPPriceListRequest::internal_default_instance(),
      IAPPriceListRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(IAPPriceListRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IAPPriceListRequest, _internal_metadata_));
  IAPPriceListResponse_descriptor_ = file->message_type(1);
  static const int IAPPriceListResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IAPPriceListResponse, iap_price_),
  };
  IAPPriceListResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      IAPPriceListResponse_descriptor_,
      IAPPriceListResponse::internal_default_instance(),
      IAPPriceListResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(IAPPriceListResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IAPPriceListResponse, _internal_metadata_));
  IAPPrice_descriptor_ = file->message_type(2);
  static const int IAPPrice_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IAPPrice, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IAPPrice, virtual_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IAPPrice, product_id_),
  };
  IAPPrice_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      IAPPrice_descriptor_,
      IAPPrice::internal_default_instance(),
      IAPPrice_offsets_,
      -1,
      -1,
      -1,
      sizeof(IAPPrice),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IAPPrice, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_trade_2fmsg_5fiap_5fprice_5flist_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      IAPPriceListRequest_descriptor_, IAPPriceListRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      IAPPriceListResponse_descriptor_, IAPPriceListResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      IAPPrice_descriptor_, IAPPrice::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_trade_2fmsg_5fiap_5fprice_5flist_2eproto() {
  IAPPriceListRequest_default_instance_.Shutdown();
  delete IAPPriceListRequest_reflection_;
  IAPPriceListResponse_default_instance_.Shutdown();
  delete IAPPriceListResponse_reflection_;
  IAPPrice_default_instance_.Shutdown();
  delete IAPPrice_reflection_;
}

void protobuf_InitDefaults_trade_2fmsg_5fiap_5fprice_5flist_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::grpcCommon::protobuf_InitDefaults_grpcCommon_2fmsg_5ferror_2eproto();
  ::google::protobuf::internal::GetEmptyString();
  IAPPriceListRequest_default_instance_.DefaultConstruct();
  IAPPriceListResponse_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  IAPPrice_default_instance_.DefaultConstruct();
  IAPPriceListRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  IAPPriceListResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  IAPPrice_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_trade_2fmsg_5fiap_5fprice_5flist_2eproto_once_);
void protobuf_InitDefaults_trade_2fmsg_5fiap_5fprice_5flist_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_trade_2fmsg_5fiap_5fprice_5flist_2eproto_once_,
                 &protobuf_InitDefaults_trade_2fmsg_5fiap_5fprice_5flist_2eproto_impl);
}
void protobuf_AddDesc_trade_2fmsg_5fiap_5fprice_5flist_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_trade_2fmsg_5fiap_5fprice_5flist_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\036trade/msg_iap_price_list.proto\022\005trade\032"
    "\032grpcCommon/msg_error.proto\"&\n\023IAPPriceL"
    "istRequest\022\017\n\007user_id\030\001 \001(\t\":\n\024IAPPriceL"
    "istResponse\022\"\n\tiap_price\030\001 \003(\0132\017.trade.I"
    "APPrice\"D\n\010IAPPrice\022\r\n\005price\030\001 \001(\t\022\025\n\rvi"
    "rtual_price\030\002 \001(\t\022\022\n\nproduct_id\030\003 \001(\tB\034\n"
    "\021com.wanfang.tradeP\001\242\002\004WFPRb\006proto3", 275);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "trade/msg_iap_price_list.proto", &protobuf_RegisterTypes);
  ::grpcCommon::protobuf_AddDesc_grpcCommon_2fmsg_5ferror_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_trade_2fmsg_5fiap_5fprice_5flist_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_trade_2fmsg_5fiap_5fprice_5flist_2eproto_once_);
void protobuf_AddDesc_trade_2fmsg_5fiap_5fprice_5flist_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_trade_2fmsg_5fiap_5fprice_5flist_2eproto_once_,
                 &protobuf_AddDesc_trade_2fmsg_5fiap_5fprice_5flist_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_trade_2fmsg_5fiap_5fprice_5flist_2eproto {
  StaticDescriptorInitializer_trade_2fmsg_5fiap_5fprice_5flist_2eproto() {
    protobuf_AddDesc_trade_2fmsg_5fiap_5fprice_5flist_2eproto();
  }
} static_descriptor_initializer_trade_2fmsg_5fiap_5fprice_5flist_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IAPPriceListRequest::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IAPPriceListRequest::IAPPriceListRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_trade_2fmsg_5fiap_5fprice_5flist_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:trade.IAPPriceListRequest)
}

void IAPPriceListRequest::InitAsDefaultInstance() {
}

IAPPriceListRequest::IAPPriceListRequest(const IAPPriceListRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:trade.IAPPriceListRequest)
}

void IAPPriceListRequest::SharedCtor() {
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

IAPPriceListRequest::~IAPPriceListRequest() {
  // @@protoc_insertion_point(destructor:trade.IAPPriceListRequest)
  SharedDtor();
}

void IAPPriceListRequest::SharedDtor() {
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IAPPriceListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IAPPriceListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IAPPriceListRequest_descriptor_;
}

const IAPPriceListRequest& IAPPriceListRequest::default_instance() {
  protobuf_InitDefaults_trade_2fmsg_5fiap_5fprice_5flist_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<IAPPriceListRequest> IAPPriceListRequest_default_instance_;

IAPPriceListRequest* IAPPriceListRequest::New(::google::protobuf::Arena* arena) const {
  IAPPriceListRequest* n = new IAPPriceListRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IAPPriceListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:trade.IAPPriceListRequest)
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool IAPPriceListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:trade.IAPPriceListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string user_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "trade.IAPPriceListRequest.user_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:trade.IAPPriceListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:trade.IAPPriceListRequest)
  return false;
#undef DO_
}

void IAPPriceListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:trade.IAPPriceListRequest)
  // optional string user_id = 1;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "trade.IAPPriceListRequest.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:trade.IAPPriceListRequest)
}

::google::protobuf::uint8* IAPPriceListRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:trade.IAPPriceListRequest)
  // optional string user_id = 1;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "trade.IAPPriceListRequest.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:trade.IAPPriceListRequest)
  return target;
}

size_t IAPPriceListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trade.IAPPriceListRequest)
  size_t total_size = 0;

  // optional string user_id = 1;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IAPPriceListRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trade.IAPPriceListRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const IAPPriceListRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IAPPriceListRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trade.IAPPriceListRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trade.IAPPriceListRequest)
    UnsafeMergeFrom(*source);
  }
}

void IAPPriceListRequest::MergeFrom(const IAPPriceListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trade.IAPPriceListRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void IAPPriceListRequest::UnsafeMergeFrom(const IAPPriceListRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.user_id().size() > 0) {

    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
}

void IAPPriceListRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trade.IAPPriceListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IAPPriceListRequest::CopyFrom(const IAPPriceListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trade.IAPPriceListRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool IAPPriceListRequest::IsInitialized() const {

  return true;
}

void IAPPriceListRequest::Swap(IAPPriceListRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IAPPriceListRequest::InternalSwap(IAPPriceListRequest* other) {
  user_id_.Swap(&other->user_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IAPPriceListRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IAPPriceListRequest_descriptor_;
  metadata.reflection = IAPPriceListRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IAPPriceListRequest

// optional string user_id = 1;
void IAPPriceListRequest::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& IAPPriceListRequest::user_id() const {
  // @@protoc_insertion_point(field_get:trade.IAPPriceListRequest.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IAPPriceListRequest::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:trade.IAPPriceListRequest.user_id)
}
void IAPPriceListRequest::set_user_id(const char* value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:trade.IAPPriceListRequest.user_id)
}
void IAPPriceListRequest::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:trade.IAPPriceListRequest.user_id)
}
::std::string* IAPPriceListRequest::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:trade.IAPPriceListRequest.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IAPPriceListRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:trade.IAPPriceListRequest.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IAPPriceListRequest::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:trade.IAPPriceListRequest.user_id)
}

inline const IAPPriceListRequest* IAPPriceListRequest::internal_default_instance() {
  return &IAPPriceListRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IAPPriceListResponse::kIapPriceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IAPPriceListResponse::IAPPriceListResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_trade_2fmsg_5fiap_5fprice_5flist_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:trade.IAPPriceListResponse)
}

void IAPPriceListResponse::InitAsDefaultInstance() {
}

IAPPriceListResponse::IAPPriceListResponse(const IAPPriceListResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:trade.IAPPriceListResponse)
}

void IAPPriceListResponse::SharedCtor() {
  _cached_size_ = 0;
}

IAPPriceListResponse::~IAPPriceListResponse() {
  // @@protoc_insertion_point(destructor:trade.IAPPriceListResponse)
  SharedDtor();
}

void IAPPriceListResponse::SharedDtor() {
}

void IAPPriceListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IAPPriceListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IAPPriceListResponse_descriptor_;
}

const IAPPriceListResponse& IAPPriceListResponse::default_instance() {
  protobuf_InitDefaults_trade_2fmsg_5fiap_5fprice_5flist_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<IAPPriceListResponse> IAPPriceListResponse_default_instance_;

IAPPriceListResponse* IAPPriceListResponse::New(::google::protobuf::Arena* arena) const {
  IAPPriceListResponse* n = new IAPPriceListResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IAPPriceListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:trade.IAPPriceListResponse)
  iap_price_.Clear();
}

bool IAPPriceListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:trade.IAPPriceListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .trade.IAPPrice iap_price = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_iap_price:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_iap_price()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_iap_price;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:trade.IAPPriceListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:trade.IAPPriceListResponse)
  return false;
#undef DO_
}

void IAPPriceListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:trade.IAPPriceListResponse)
  // repeated .trade.IAPPrice iap_price = 1;
  for (unsigned int i = 0, n = this->iap_price_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->iap_price(i), output);
  }

  // @@protoc_insertion_point(serialize_end:trade.IAPPriceListResponse)
}

::google::protobuf::uint8* IAPPriceListResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:trade.IAPPriceListResponse)
  // repeated .trade.IAPPrice iap_price = 1;
  for (unsigned int i = 0, n = this->iap_price_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->iap_price(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:trade.IAPPriceListResponse)
  return target;
}

size_t IAPPriceListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trade.IAPPriceListResponse)
  size_t total_size = 0;

  // repeated .trade.IAPPrice iap_price = 1;
  {
    unsigned int count = this->iap_price_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->iap_price(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IAPPriceListResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trade.IAPPriceListResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const IAPPriceListResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IAPPriceListResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trade.IAPPriceListResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trade.IAPPriceListResponse)
    UnsafeMergeFrom(*source);
  }
}

void IAPPriceListResponse::MergeFrom(const IAPPriceListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trade.IAPPriceListResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void IAPPriceListResponse::UnsafeMergeFrom(const IAPPriceListResponse& from) {
  GOOGLE_DCHECK(&from != this);
  iap_price_.MergeFrom(from.iap_price_);
}

void IAPPriceListResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trade.IAPPriceListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IAPPriceListResponse::CopyFrom(const IAPPriceListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trade.IAPPriceListResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool IAPPriceListResponse::IsInitialized() const {

  return true;
}

void IAPPriceListResponse::Swap(IAPPriceListResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IAPPriceListResponse::InternalSwap(IAPPriceListResponse* other) {
  iap_price_.UnsafeArenaSwap(&other->iap_price_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IAPPriceListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IAPPriceListResponse_descriptor_;
  metadata.reflection = IAPPriceListResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IAPPriceListResponse

// repeated .trade.IAPPrice iap_price = 1;
int IAPPriceListResponse::iap_price_size() const {
  return iap_price_.size();
}
void IAPPriceListResponse::clear_iap_price() {
  iap_price_.Clear();
}
const ::trade::IAPPrice& IAPPriceListResponse::iap_price(int index) const {
  // @@protoc_insertion_point(field_get:trade.IAPPriceListResponse.iap_price)
  return iap_price_.Get(index);
}
::trade::IAPPrice* IAPPriceListResponse::mutable_iap_price(int index) {
  // @@protoc_insertion_point(field_mutable:trade.IAPPriceListResponse.iap_price)
  return iap_price_.Mutable(index);
}
::trade::IAPPrice* IAPPriceListResponse::add_iap_price() {
  // @@protoc_insertion_point(field_add:trade.IAPPriceListResponse.iap_price)
  return iap_price_.Add();
}
::google::protobuf::RepeatedPtrField< ::trade::IAPPrice >*
IAPPriceListResponse::mutable_iap_price() {
  // @@protoc_insertion_point(field_mutable_list:trade.IAPPriceListResponse.iap_price)
  return &iap_price_;
}
const ::google::protobuf::RepeatedPtrField< ::trade::IAPPrice >&
IAPPriceListResponse::iap_price() const {
  // @@protoc_insertion_point(field_list:trade.IAPPriceListResponse.iap_price)
  return iap_price_;
}

inline const IAPPriceListResponse* IAPPriceListResponse::internal_default_instance() {
  return &IAPPriceListResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IAPPrice::kPriceFieldNumber;
const int IAPPrice::kVirtualPriceFieldNumber;
const int IAPPrice::kProductIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IAPPrice::IAPPrice()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_trade_2fmsg_5fiap_5fprice_5flist_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:trade.IAPPrice)
}

void IAPPrice::InitAsDefaultInstance() {
}

IAPPrice::IAPPrice(const IAPPrice& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:trade.IAPPrice)
}

void IAPPrice::SharedCtor() {
  price_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  virtual_price_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  product_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

IAPPrice::~IAPPrice() {
  // @@protoc_insertion_point(destructor:trade.IAPPrice)
  SharedDtor();
}

void IAPPrice::SharedDtor() {
  price_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  virtual_price_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  product_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IAPPrice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IAPPrice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IAPPrice_descriptor_;
}

const IAPPrice& IAPPrice::default_instance() {
  protobuf_InitDefaults_trade_2fmsg_5fiap_5fprice_5flist_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<IAPPrice> IAPPrice_default_instance_;

IAPPrice* IAPPrice::New(::google::protobuf::Arena* arena) const {
  IAPPrice* n = new IAPPrice;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IAPPrice::Clear() {
// @@protoc_insertion_point(message_clear_start:trade.IAPPrice)
  price_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  virtual_price_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  product_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool IAPPrice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:trade.IAPPrice)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string price = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_price()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->price().data(), this->price().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "trade.IAPPrice.price"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_virtual_price;
        break;
      }

      // optional string virtual_price = 2;
      case 2: {
        if (tag == 18) {
         parse_virtual_price:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_virtual_price()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->virtual_price().data(), this->virtual_price().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "trade.IAPPrice.virtual_price"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_product_id;
        break;
      }

      // optional string product_id = 3;
      case 3: {
        if (tag == 26) {
         parse_product_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_product_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->product_id().data(), this->product_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "trade.IAPPrice.product_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:trade.IAPPrice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:trade.IAPPrice)
  return false;
#undef DO_
}

void IAPPrice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:trade.IAPPrice)
  // optional string price = 1;
  if (this->price().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->price().data(), this->price().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "trade.IAPPrice.price");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->price(), output);
  }

  // optional string virtual_price = 2;
  if (this->virtual_price().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->virtual_price().data(), this->virtual_price().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "trade.IAPPrice.virtual_price");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->virtual_price(), output);
  }

  // optional string product_id = 3;
  if (this->product_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->product_id().data(), this->product_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "trade.IAPPrice.product_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->product_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:trade.IAPPrice)
}

::google::protobuf::uint8* IAPPrice::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:trade.IAPPrice)
  // optional string price = 1;
  if (this->price().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->price().data(), this->price().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "trade.IAPPrice.price");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->price(), target);
  }

  // optional string virtual_price = 2;
  if (this->virtual_price().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->virtual_price().data(), this->virtual_price().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "trade.IAPPrice.virtual_price");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->virtual_price(), target);
  }

  // optional string product_id = 3;
  if (this->product_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->product_id().data(), this->product_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "trade.IAPPrice.product_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->product_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:trade.IAPPrice)
  return target;
}

size_t IAPPrice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trade.IAPPrice)
  size_t total_size = 0;

  // optional string price = 1;
  if (this->price().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->price());
  }

  // optional string virtual_price = 2;
  if (this->virtual_price().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->virtual_price());
  }

  // optional string product_id = 3;
  if (this->product_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->product_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IAPPrice::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trade.IAPPrice)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const IAPPrice* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IAPPrice>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trade.IAPPrice)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trade.IAPPrice)
    UnsafeMergeFrom(*source);
  }
}

void IAPPrice::MergeFrom(const IAPPrice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trade.IAPPrice)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void IAPPrice::UnsafeMergeFrom(const IAPPrice& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.price().size() > 0) {

    price_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.price_);
  }
  if (from.virtual_price().size() > 0) {

    virtual_price_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.virtual_price_);
  }
  if (from.product_id().size() > 0) {

    product_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.product_id_);
  }
}

void IAPPrice::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trade.IAPPrice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IAPPrice::CopyFrom(const IAPPrice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trade.IAPPrice)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool IAPPrice::IsInitialized() const {

  return true;
}

void IAPPrice::Swap(IAPPrice* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IAPPrice::InternalSwap(IAPPrice* other) {
  price_.Swap(&other->price_);
  virtual_price_.Swap(&other->virtual_price_);
  product_id_.Swap(&other->product_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IAPPrice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IAPPrice_descriptor_;
  metadata.reflection = IAPPrice_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IAPPrice

// optional string price = 1;
void IAPPrice::clear_price() {
  price_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& IAPPrice::price() const {
  // @@protoc_insertion_point(field_get:trade.IAPPrice.price)
  return price_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IAPPrice::set_price(const ::std::string& value) {
  
  price_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:trade.IAPPrice.price)
}
void IAPPrice::set_price(const char* value) {
  
  price_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:trade.IAPPrice.price)
}
void IAPPrice::set_price(const char* value, size_t size) {
  
  price_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:trade.IAPPrice.price)
}
::std::string* IAPPrice::mutable_price() {
  
  // @@protoc_insertion_point(field_mutable:trade.IAPPrice.price)
  return price_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IAPPrice::release_price() {
  // @@protoc_insertion_point(field_release:trade.IAPPrice.price)
  
  return price_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IAPPrice::set_allocated_price(::std::string* price) {
  if (price != NULL) {
    
  } else {
    
  }
  price_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), price);
  // @@protoc_insertion_point(field_set_allocated:trade.IAPPrice.price)
}

// optional string virtual_price = 2;
void IAPPrice::clear_virtual_price() {
  virtual_price_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& IAPPrice::virtual_price() const {
  // @@protoc_insertion_point(field_get:trade.IAPPrice.virtual_price)
  return virtual_price_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IAPPrice::set_virtual_price(const ::std::string& value) {
  
  virtual_price_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:trade.IAPPrice.virtual_price)
}
void IAPPrice::set_virtual_price(const char* value) {
  
  virtual_price_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:trade.IAPPrice.virtual_price)
}
void IAPPrice::set_virtual_price(const char* value, size_t size) {
  
  virtual_price_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:trade.IAPPrice.virtual_price)
}
::std::string* IAPPrice::mutable_virtual_price() {
  
  // @@protoc_insertion_point(field_mutable:trade.IAPPrice.virtual_price)
  return virtual_price_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IAPPrice::release_virtual_price() {
  // @@protoc_insertion_point(field_release:trade.IAPPrice.virtual_price)
  
  return virtual_price_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IAPPrice::set_allocated_virtual_price(::std::string* virtual_price) {
  if (virtual_price != NULL) {
    
  } else {
    
  }
  virtual_price_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), virtual_price);
  // @@protoc_insertion_point(field_set_allocated:trade.IAPPrice.virtual_price)
}

// optional string product_id = 3;
void IAPPrice::clear_product_id() {
  product_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& IAPPrice::product_id() const {
  // @@protoc_insertion_point(field_get:trade.IAPPrice.product_id)
  return product_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IAPPrice::set_product_id(const ::std::string& value) {
  
  product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:trade.IAPPrice.product_id)
}
void IAPPrice::set_product_id(const char* value) {
  
  product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:trade.IAPPrice.product_id)
}
void IAPPrice::set_product_id(const char* value, size_t size) {
  
  product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:trade.IAPPrice.product_id)
}
::std::string* IAPPrice::mutable_product_id() {
  
  // @@protoc_insertion_point(field_mutable:trade.IAPPrice.product_id)
  return product_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IAPPrice::release_product_id() {
  // @@protoc_insertion_point(field_release:trade.IAPPrice.product_id)
  
  return product_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IAPPrice::set_allocated_product_id(::std::string* product_id) {
  if (product_id != NULL) {
    
  } else {
    
  }
  product_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), product_id);
  // @@protoc_insertion_point(field_set_allocated:trade.IAPPrice.product_id)
}

inline const IAPPrice* IAPPrice::internal_default_instance() {
  return &IAPPrice_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace trade

// @@protoc_insertion_point(global_scope)
