// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: personalCenter/msg_upload_avatar.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "personalCenter/msg_upload_avatar.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace personal {

namespace {

const ::google::protobuf::Descriptor* UploadAvatarRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UploadAvatarRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UploadAvatarResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UploadAvatarResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_personalCenter_2fmsg_5fupload_5favatar_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_personalCenter_2fmsg_5fupload_5favatar_2eproto() {
  protobuf_AddDesc_personalCenter_2fmsg_5fupload_5favatar_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "personalCenter/msg_upload_avatar.proto");
  GOOGLE_CHECK(file != NULL);
  UploadAvatarRequest_descriptor_ = file->message_type(0);
  static const int UploadAvatarRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadAvatarRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadAvatarRequest, avatar_url_),
  };
  UploadAvatarRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UploadAvatarRequest_descriptor_,
      UploadAvatarRequest::internal_default_instance(),
      UploadAvatarRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(UploadAvatarRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadAvatarRequest, _internal_metadata_));
  UploadAvatarResponse_descriptor_ = file->message_type(1);
  static const int UploadAvatarResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadAvatarResponse, error_),
  };
  UploadAvatarResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UploadAvatarResponse_descriptor_,
      UploadAvatarResponse::internal_default_instance(),
      UploadAvatarResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(UploadAvatarResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadAvatarResponse, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_personalCenter_2fmsg_5fupload_5favatar_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UploadAvatarRequest_descriptor_, UploadAvatarRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UploadAvatarResponse_descriptor_, UploadAvatarResponse::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_personalCenter_2fmsg_5fupload_5favatar_2eproto() {
  UploadAvatarRequest_default_instance_.Shutdown();
  delete UploadAvatarRequest_reflection_;
  UploadAvatarResponse_default_instance_.Shutdown();
  delete UploadAvatarResponse_reflection_;
}

void protobuf_InitDefaults_personalCenter_2fmsg_5fupload_5favatar_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::grpcCommon::protobuf_InitDefaults_grpcCommon_2fmsg_5ferror_2eproto();
  ::google::protobuf::internal::GetEmptyString();
  UploadAvatarRequest_default_instance_.DefaultConstruct();
  UploadAvatarResponse_default_instance_.DefaultConstruct();
  UploadAvatarRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  UploadAvatarResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_personalCenter_2fmsg_5fupload_5favatar_2eproto_once_);
void protobuf_InitDefaults_personalCenter_2fmsg_5fupload_5favatar_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_personalCenter_2fmsg_5fupload_5favatar_2eproto_once_,
                 &protobuf_InitDefaults_personalCenter_2fmsg_5fupload_5favatar_2eproto_impl);
}
void protobuf_AddDesc_personalCenter_2fmsg_5fupload_5favatar_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_personalCenter_2fmsg_5fupload_5favatar_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n&personalCenter/msg_upload_avatar.proto"
    "\022\010personal\032\032grpcCommon/msg_error.proto\":"
    "\n\023UploadAvatarRequest\022\017\n\007user_id\030\001 \001(\t\022\022"
    "\n\navatar_url\030\002 \001(\t\"<\n\024UploadAvatarRespon"
    "se\022$\n\005error\030\001 \001(\0132\025.grpcCommon.GrpcError"
    "B\037\n\024com.wanfang.personalP\001\242\002\004WFPRb\006proto"
    "3", 241);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "personalCenter/msg_upload_avatar.proto", &protobuf_RegisterTypes);
  ::grpcCommon::protobuf_AddDesc_grpcCommon_2fmsg_5ferror_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_personalCenter_2fmsg_5fupload_5favatar_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_personalCenter_2fmsg_5fupload_5favatar_2eproto_once_);
void protobuf_AddDesc_personalCenter_2fmsg_5fupload_5favatar_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_personalCenter_2fmsg_5fupload_5favatar_2eproto_once_,
                 &protobuf_AddDesc_personalCenter_2fmsg_5fupload_5favatar_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_personalCenter_2fmsg_5fupload_5favatar_2eproto {
  StaticDescriptorInitializer_personalCenter_2fmsg_5fupload_5favatar_2eproto() {
    protobuf_AddDesc_personalCenter_2fmsg_5fupload_5favatar_2eproto();
  }
} static_descriptor_initializer_personalCenter_2fmsg_5fupload_5favatar_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UploadAvatarRequest::kUserIdFieldNumber;
const int UploadAvatarRequest::kAvatarUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UploadAvatarRequest::UploadAvatarRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_personalCenter_2fmsg_5fupload_5favatar_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:personal.UploadAvatarRequest)
}

void UploadAvatarRequest::InitAsDefaultInstance() {
}

UploadAvatarRequest::UploadAvatarRequest(const UploadAvatarRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:personal.UploadAvatarRequest)
}

void UploadAvatarRequest::SharedCtor() {
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

UploadAvatarRequest::~UploadAvatarRequest() {
  // @@protoc_insertion_point(destructor:personal.UploadAvatarRequest)
  SharedDtor();
}

void UploadAvatarRequest::SharedDtor() {
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UploadAvatarRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UploadAvatarRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UploadAvatarRequest_descriptor_;
}

const UploadAvatarRequest& UploadAvatarRequest::default_instance() {
  protobuf_InitDefaults_personalCenter_2fmsg_5fupload_5favatar_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<UploadAvatarRequest> UploadAvatarRequest_default_instance_;

UploadAvatarRequest* UploadAvatarRequest::New(::google::protobuf::Arena* arena) const {
  UploadAvatarRequest* n = new UploadAvatarRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UploadAvatarRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:personal.UploadAvatarRequest)
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool UploadAvatarRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:personal.UploadAvatarRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string user_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "personal.UploadAvatarRequest.user_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_avatar_url;
        break;
      }

      // optional string avatar_url = 2;
      case 2: {
        if (tag == 18) {
         parse_avatar_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avatar_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->avatar_url().data(), this->avatar_url().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "personal.UploadAvatarRequest.avatar_url"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:personal.UploadAvatarRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:personal.UploadAvatarRequest)
  return false;
#undef DO_
}

void UploadAvatarRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:personal.UploadAvatarRequest)
  // optional string user_id = 1;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "personal.UploadAvatarRequest.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user_id(), output);
  }

  // optional string avatar_url = 2;
  if (this->avatar_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->avatar_url().data(), this->avatar_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "personal.UploadAvatarRequest.avatar_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->avatar_url(), output);
  }

  // @@protoc_insertion_point(serialize_end:personal.UploadAvatarRequest)
}

::google::protobuf::uint8* UploadAvatarRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:personal.UploadAvatarRequest)
  // optional string user_id = 1;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "personal.UploadAvatarRequest.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_id(), target);
  }

  // optional string avatar_url = 2;
  if (this->avatar_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->avatar_url().data(), this->avatar_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "personal.UploadAvatarRequest.avatar_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->avatar_url(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:personal.UploadAvatarRequest)
  return target;
}

size_t UploadAvatarRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:personal.UploadAvatarRequest)
  size_t total_size = 0;

  // optional string user_id = 1;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  // optional string avatar_url = 2;
  if (this->avatar_url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->avatar_url());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UploadAvatarRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:personal.UploadAvatarRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UploadAvatarRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UploadAvatarRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:personal.UploadAvatarRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:personal.UploadAvatarRequest)
    UnsafeMergeFrom(*source);
  }
}

void UploadAvatarRequest::MergeFrom(const UploadAvatarRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:personal.UploadAvatarRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void UploadAvatarRequest::UnsafeMergeFrom(const UploadAvatarRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.user_id().size() > 0) {

    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  if (from.avatar_url().size() > 0) {

    avatar_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.avatar_url_);
  }
}

void UploadAvatarRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:personal.UploadAvatarRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UploadAvatarRequest::CopyFrom(const UploadAvatarRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:personal.UploadAvatarRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool UploadAvatarRequest::IsInitialized() const {

  return true;
}

void UploadAvatarRequest::Swap(UploadAvatarRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UploadAvatarRequest::InternalSwap(UploadAvatarRequest* other) {
  user_id_.Swap(&other->user_id_);
  avatar_url_.Swap(&other->avatar_url_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UploadAvatarRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UploadAvatarRequest_descriptor_;
  metadata.reflection = UploadAvatarRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UploadAvatarRequest

// optional string user_id = 1;
void UploadAvatarRequest::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UploadAvatarRequest::user_id() const {
  // @@protoc_insertion_point(field_get:personal.UploadAvatarRequest.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UploadAvatarRequest::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:personal.UploadAvatarRequest.user_id)
}
void UploadAvatarRequest::set_user_id(const char* value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:personal.UploadAvatarRequest.user_id)
}
void UploadAvatarRequest::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:personal.UploadAvatarRequest.user_id)
}
::std::string* UploadAvatarRequest::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:personal.UploadAvatarRequest.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UploadAvatarRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:personal.UploadAvatarRequest.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UploadAvatarRequest::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:personal.UploadAvatarRequest.user_id)
}

// optional string avatar_url = 2;
void UploadAvatarRequest::clear_avatar_url() {
  avatar_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UploadAvatarRequest::avatar_url() const {
  // @@protoc_insertion_point(field_get:personal.UploadAvatarRequest.avatar_url)
  return avatar_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UploadAvatarRequest::set_avatar_url(const ::std::string& value) {
  
  avatar_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:personal.UploadAvatarRequest.avatar_url)
}
void UploadAvatarRequest::set_avatar_url(const char* value) {
  
  avatar_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:personal.UploadAvatarRequest.avatar_url)
}
void UploadAvatarRequest::set_avatar_url(const char* value, size_t size) {
  
  avatar_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:personal.UploadAvatarRequest.avatar_url)
}
::std::string* UploadAvatarRequest::mutable_avatar_url() {
  
  // @@protoc_insertion_point(field_mutable:personal.UploadAvatarRequest.avatar_url)
  return avatar_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UploadAvatarRequest::release_avatar_url() {
  // @@protoc_insertion_point(field_release:personal.UploadAvatarRequest.avatar_url)
  
  return avatar_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UploadAvatarRequest::set_allocated_avatar_url(::std::string* avatar_url) {
  if (avatar_url != NULL) {
    
  } else {
    
  }
  avatar_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), avatar_url);
  // @@protoc_insertion_point(field_set_allocated:personal.UploadAvatarRequest.avatar_url)
}

inline const UploadAvatarRequest* UploadAvatarRequest::internal_default_instance() {
  return &UploadAvatarRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UploadAvatarResponse::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UploadAvatarResponse::UploadAvatarResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_personalCenter_2fmsg_5fupload_5favatar_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:personal.UploadAvatarResponse)
}

void UploadAvatarResponse::InitAsDefaultInstance() {
  error_ = const_cast< ::grpcCommon::GrpcError*>(
      ::grpcCommon::GrpcError::internal_default_instance());
}

UploadAvatarResponse::UploadAvatarResponse(const UploadAvatarResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:personal.UploadAvatarResponse)
}

void UploadAvatarResponse::SharedCtor() {
  error_ = NULL;
  _cached_size_ = 0;
}

UploadAvatarResponse::~UploadAvatarResponse() {
  // @@protoc_insertion_point(destructor:personal.UploadAvatarResponse)
  SharedDtor();
}

void UploadAvatarResponse::SharedDtor() {
  if (this != &UploadAvatarResponse_default_instance_.get()) {
    delete error_;
  }
}

void UploadAvatarResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UploadAvatarResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UploadAvatarResponse_descriptor_;
}

const UploadAvatarResponse& UploadAvatarResponse::default_instance() {
  protobuf_InitDefaults_personalCenter_2fmsg_5fupload_5favatar_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<UploadAvatarResponse> UploadAvatarResponse_default_instance_;

UploadAvatarResponse* UploadAvatarResponse::New(::google::protobuf::Arena* arena) const {
  UploadAvatarResponse* n = new UploadAvatarResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UploadAvatarResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:personal.UploadAvatarResponse)
  if (GetArenaNoVirtual() == NULL && error_ != NULL) delete error_;
  error_ = NULL;
}

bool UploadAvatarResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:personal.UploadAvatarResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .grpcCommon.GrpcError error = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:personal.UploadAvatarResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:personal.UploadAvatarResponse)
  return false;
#undef DO_
}

void UploadAvatarResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:personal.UploadAvatarResponse)
  // optional .grpcCommon.GrpcError error = 1;
  if (this->has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->error_, output);
  }

  // @@protoc_insertion_point(serialize_end:personal.UploadAvatarResponse)
}

::google::protobuf::uint8* UploadAvatarResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:personal.UploadAvatarResponse)
  // optional .grpcCommon.GrpcError error = 1;
  if (this->has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->error_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:personal.UploadAvatarResponse)
  return target;
}

size_t UploadAvatarResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:personal.UploadAvatarResponse)
  size_t total_size = 0;

  // optional .grpcCommon.GrpcError error = 1;
  if (this->has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->error_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UploadAvatarResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:personal.UploadAvatarResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UploadAvatarResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UploadAvatarResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:personal.UploadAvatarResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:personal.UploadAvatarResponse)
    UnsafeMergeFrom(*source);
  }
}

void UploadAvatarResponse::MergeFrom(const UploadAvatarResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:personal.UploadAvatarResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void UploadAvatarResponse::UnsafeMergeFrom(const UploadAvatarResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_error()) {
    mutable_error()->::grpcCommon::GrpcError::MergeFrom(from.error());
  }
}

void UploadAvatarResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:personal.UploadAvatarResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UploadAvatarResponse::CopyFrom(const UploadAvatarResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:personal.UploadAvatarResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool UploadAvatarResponse::IsInitialized() const {

  return true;
}

void UploadAvatarResponse::Swap(UploadAvatarResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UploadAvatarResponse::InternalSwap(UploadAvatarResponse* other) {
  std::swap(error_, other->error_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UploadAvatarResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UploadAvatarResponse_descriptor_;
  metadata.reflection = UploadAvatarResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UploadAvatarResponse

// optional .grpcCommon.GrpcError error = 1;
bool UploadAvatarResponse::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
void UploadAvatarResponse::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) delete error_;
  error_ = NULL;
}
const ::grpcCommon::GrpcError& UploadAvatarResponse::error() const {
  // @@protoc_insertion_point(field_get:personal.UploadAvatarResponse.error)
  return error_ != NULL ? *error_
                         : *::grpcCommon::GrpcError::internal_default_instance();
}
::grpcCommon::GrpcError* UploadAvatarResponse::mutable_error() {
  
  if (error_ == NULL) {
    error_ = new ::grpcCommon::GrpcError;
  }
  // @@protoc_insertion_point(field_mutable:personal.UploadAvatarResponse.error)
  return error_;
}
::grpcCommon::GrpcError* UploadAvatarResponse::release_error() {
  // @@protoc_insertion_point(field_release:personal.UploadAvatarResponse.error)
  
  ::grpcCommon::GrpcError* temp = error_;
  error_ = NULL;
  return temp;
}
void UploadAvatarResponse::set_allocated_error(::grpcCommon::GrpcError* error) {
  delete error_;
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:personal.UploadAvatarResponse.error)
}

inline const UploadAvatarResponse* UploadAvatarResponse::internal_default_instance() {
  return &UploadAvatarResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace personal

// @@protoc_insertion_point(global_scope)
