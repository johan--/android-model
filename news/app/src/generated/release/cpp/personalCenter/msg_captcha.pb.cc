// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: personalCenter/msg_captcha.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "personalCenter/msg_captcha.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace personal {

namespace {

const ::google::protobuf::Descriptor* GetPhoneCaptchaRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetPhoneCaptchaRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetPhoneCaptchaResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetPhoneCaptchaResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CheckPhoneCaptchaRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CheckPhoneCaptchaRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CheckPhoneCaptchaResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CheckPhoneCaptchaResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_personalCenter_2fmsg_5fcaptcha_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_personalCenter_2fmsg_5fcaptcha_2eproto() {
  protobuf_AddDesc_personalCenter_2fmsg_5fcaptcha_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "personalCenter/msg_captcha.proto");
  GOOGLE_CHECK(file != NULL);
  GetPhoneCaptchaRequest_descriptor_ = file->message_type(0);
  static const int GetPhoneCaptchaRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPhoneCaptchaRequest, phone_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPhoneCaptchaRequest, nation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPhoneCaptchaRequest, message_type_),
  };
  GetPhoneCaptchaRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetPhoneCaptchaRequest_descriptor_,
      GetPhoneCaptchaRequest::internal_default_instance(),
      GetPhoneCaptchaRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetPhoneCaptchaRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPhoneCaptchaRequest, _internal_metadata_));
  GetPhoneCaptchaResponse_descriptor_ = file->message_type(1);
  static const int GetPhoneCaptchaResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPhoneCaptchaResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPhoneCaptchaResponse, error_),
  };
  GetPhoneCaptchaResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetPhoneCaptchaResponse_descriptor_,
      GetPhoneCaptchaResponse::internal_default_instance(),
      GetPhoneCaptchaResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetPhoneCaptchaResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPhoneCaptchaResponse, _internal_metadata_));
  CheckPhoneCaptchaRequest_descriptor_ = file->message_type(2);
  static const int CheckPhoneCaptchaRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckPhoneCaptchaRequest, phone_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckPhoneCaptchaRequest, phone_captcha_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckPhoneCaptchaRequest, nation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckPhoneCaptchaRequest, message_type_),
  };
  CheckPhoneCaptchaRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CheckPhoneCaptchaRequest_descriptor_,
      CheckPhoneCaptchaRequest::internal_default_instance(),
      CheckPhoneCaptchaRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(CheckPhoneCaptchaRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckPhoneCaptchaRequest, _internal_metadata_));
  CheckPhoneCaptchaResponse_descriptor_ = file->message_type(3);
  static const int CheckPhoneCaptchaResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckPhoneCaptchaResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckPhoneCaptchaResponse, error_),
  };
  CheckPhoneCaptchaResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CheckPhoneCaptchaResponse_descriptor_,
      CheckPhoneCaptchaResponse::internal_default_instance(),
      CheckPhoneCaptchaResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(CheckPhoneCaptchaResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckPhoneCaptchaResponse, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_personalCenter_2fmsg_5fcaptcha_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetPhoneCaptchaRequest_descriptor_, GetPhoneCaptchaRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetPhoneCaptchaResponse_descriptor_, GetPhoneCaptchaResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CheckPhoneCaptchaRequest_descriptor_, CheckPhoneCaptchaRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CheckPhoneCaptchaResponse_descriptor_, CheckPhoneCaptchaResponse::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_personalCenter_2fmsg_5fcaptcha_2eproto() {
  GetPhoneCaptchaRequest_default_instance_.Shutdown();
  delete GetPhoneCaptchaRequest_reflection_;
  GetPhoneCaptchaResponse_default_instance_.Shutdown();
  delete GetPhoneCaptchaResponse_reflection_;
  CheckPhoneCaptchaRequest_default_instance_.Shutdown();
  delete CheckPhoneCaptchaRequest_reflection_;
  CheckPhoneCaptchaResponse_default_instance_.Shutdown();
  delete CheckPhoneCaptchaResponse_reflection_;
}

void protobuf_InitDefaults_personalCenter_2fmsg_5fcaptcha_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::grpcCommon::protobuf_InitDefaults_grpcCommon_2fmsg_5ferror_2eproto();
  ::google::protobuf::internal::GetEmptyString();
  GetPhoneCaptchaRequest_default_instance_.DefaultConstruct();
  GetPhoneCaptchaResponse_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  CheckPhoneCaptchaRequest_default_instance_.DefaultConstruct();
  CheckPhoneCaptchaResponse_default_instance_.DefaultConstruct();
  GetPhoneCaptchaRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  GetPhoneCaptchaResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  CheckPhoneCaptchaRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  CheckPhoneCaptchaResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_personalCenter_2fmsg_5fcaptcha_2eproto_once_);
void protobuf_InitDefaults_personalCenter_2fmsg_5fcaptcha_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_personalCenter_2fmsg_5fcaptcha_2eproto_once_,
                 &protobuf_InitDefaults_personalCenter_2fmsg_5fcaptcha_2eproto_impl);
}
void protobuf_AddDesc_personalCenter_2fmsg_5fcaptcha_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_personalCenter_2fmsg_5fcaptcha_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n personalCenter/msg_captcha.proto\022\010pers"
    "onal\032\032grpcCommon/msg_error.proto\"T\n\026GetP"
    "honeCaptchaRequest\022\024\n\014phone_number\030\001 \001(\t"
    "\022\016\n\006nation\030\002 \001(\t\022\024\n\014message_type\030\003 \001(\t\"O"
    "\n\027GetPhoneCaptchaResponse\022\016\n\006status\030\001 \001("
    "\005\022$\n\005error\030\002 \001(\0132\025.grpcCommon.GrpcError\""
    "m\n\030CheckPhoneCaptchaRequest\022\024\n\014phone_num"
    "ber\030\001 \001(\t\022\025\n\rphone_captcha\030\002 \001(\t\022\016\n\006nati"
    "on\030\003 \001(\t\022\024\n\014message_type\030\004 \001(\t\"Q\n\031CheckP"
    "honeCaptchaResponse\022\016\n\006status\030\001 \001(\005\022$\n\005e"
    "rror\030\002 \001(\0132\025.grpcCommon.GrpcErrorB\037\n\024com"
    ".wanfang.personalP\001\242\002\004WFPRb\006proto3", 474);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "personalCenter/msg_captcha.proto", &protobuf_RegisterTypes);
  ::grpcCommon::protobuf_AddDesc_grpcCommon_2fmsg_5ferror_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_personalCenter_2fmsg_5fcaptcha_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_personalCenter_2fmsg_5fcaptcha_2eproto_once_);
void protobuf_AddDesc_personalCenter_2fmsg_5fcaptcha_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_personalCenter_2fmsg_5fcaptcha_2eproto_once_,
                 &protobuf_AddDesc_personalCenter_2fmsg_5fcaptcha_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_personalCenter_2fmsg_5fcaptcha_2eproto {
  StaticDescriptorInitializer_personalCenter_2fmsg_5fcaptcha_2eproto() {
    protobuf_AddDesc_personalCenter_2fmsg_5fcaptcha_2eproto();
  }
} static_descriptor_initializer_personalCenter_2fmsg_5fcaptcha_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetPhoneCaptchaRequest::kPhoneNumberFieldNumber;
const int GetPhoneCaptchaRequest::kNationFieldNumber;
const int GetPhoneCaptchaRequest::kMessageTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetPhoneCaptchaRequest::GetPhoneCaptchaRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_personalCenter_2fmsg_5fcaptcha_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:personal.GetPhoneCaptchaRequest)
}

void GetPhoneCaptchaRequest::InitAsDefaultInstance() {
}

GetPhoneCaptchaRequest::GetPhoneCaptchaRequest(const GetPhoneCaptchaRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:personal.GetPhoneCaptchaRequest)
}

void GetPhoneCaptchaRequest::SharedCtor() {
  phone_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nation_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

GetPhoneCaptchaRequest::~GetPhoneCaptchaRequest() {
  // @@protoc_insertion_point(destructor:personal.GetPhoneCaptchaRequest)
  SharedDtor();
}

void GetPhoneCaptchaRequest::SharedDtor() {
  phone_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nation_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetPhoneCaptchaRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPhoneCaptchaRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetPhoneCaptchaRequest_descriptor_;
}

const GetPhoneCaptchaRequest& GetPhoneCaptchaRequest::default_instance() {
  protobuf_InitDefaults_personalCenter_2fmsg_5fcaptcha_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<GetPhoneCaptchaRequest> GetPhoneCaptchaRequest_default_instance_;

GetPhoneCaptchaRequest* GetPhoneCaptchaRequest::New(::google::protobuf::Arena* arena) const {
  GetPhoneCaptchaRequest* n = new GetPhoneCaptchaRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetPhoneCaptchaRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:personal.GetPhoneCaptchaRequest)
  phone_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GetPhoneCaptchaRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:personal.GetPhoneCaptchaRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string phone_number = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone_number()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->phone_number().data(), this->phone_number().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "personal.GetPhoneCaptchaRequest.phone_number"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_nation;
        break;
      }

      // optional string nation = 2;
      case 2: {
        if (tag == 18) {
         parse_nation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nation()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->nation().data(), this->nation().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "personal.GetPhoneCaptchaRequest.nation"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_message_type;
        break;
      }

      // optional string message_type = 3;
      case 3: {
        if (tag == 26) {
         parse_message_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message_type().data(), this->message_type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "personal.GetPhoneCaptchaRequest.message_type"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:personal.GetPhoneCaptchaRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:personal.GetPhoneCaptchaRequest)
  return false;
#undef DO_
}

void GetPhoneCaptchaRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:personal.GetPhoneCaptchaRequest)
  // optional string phone_number = 1;
  if (this->phone_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->phone_number().data(), this->phone_number().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "personal.GetPhoneCaptchaRequest.phone_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->phone_number(), output);
  }

  // optional string nation = 2;
  if (this->nation().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nation().data(), this->nation().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "personal.GetPhoneCaptchaRequest.nation");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nation(), output);
  }

  // optional string message_type = 3;
  if (this->message_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message_type().data(), this->message_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "personal.GetPhoneCaptchaRequest.message_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->message_type(), output);
  }

  // @@protoc_insertion_point(serialize_end:personal.GetPhoneCaptchaRequest)
}

::google::protobuf::uint8* GetPhoneCaptchaRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:personal.GetPhoneCaptchaRequest)
  // optional string phone_number = 1;
  if (this->phone_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->phone_number().data(), this->phone_number().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "personal.GetPhoneCaptchaRequest.phone_number");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->phone_number(), target);
  }

  // optional string nation = 2;
  if (this->nation().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nation().data(), this->nation().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "personal.GetPhoneCaptchaRequest.nation");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nation(), target);
  }

  // optional string message_type = 3;
  if (this->message_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message_type().data(), this->message_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "personal.GetPhoneCaptchaRequest.message_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->message_type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:personal.GetPhoneCaptchaRequest)
  return target;
}

size_t GetPhoneCaptchaRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:personal.GetPhoneCaptchaRequest)
  size_t total_size = 0;

  // optional string phone_number = 1;
  if (this->phone_number().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->phone_number());
  }

  // optional string nation = 2;
  if (this->nation().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nation());
  }

  // optional string message_type = 3;
  if (this->message_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPhoneCaptchaRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:personal.GetPhoneCaptchaRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GetPhoneCaptchaRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetPhoneCaptchaRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:personal.GetPhoneCaptchaRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:personal.GetPhoneCaptchaRequest)
    UnsafeMergeFrom(*source);
  }
}

void GetPhoneCaptchaRequest::MergeFrom(const GetPhoneCaptchaRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:personal.GetPhoneCaptchaRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void GetPhoneCaptchaRequest::UnsafeMergeFrom(const GetPhoneCaptchaRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.phone_number().size() > 0) {

    phone_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.phone_number_);
  }
  if (from.nation().size() > 0) {

    nation_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nation_);
  }
  if (from.message_type().size() > 0) {

    message_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_type_);
  }
}

void GetPhoneCaptchaRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:personal.GetPhoneCaptchaRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPhoneCaptchaRequest::CopyFrom(const GetPhoneCaptchaRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:personal.GetPhoneCaptchaRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool GetPhoneCaptchaRequest::IsInitialized() const {

  return true;
}

void GetPhoneCaptchaRequest::Swap(GetPhoneCaptchaRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetPhoneCaptchaRequest::InternalSwap(GetPhoneCaptchaRequest* other) {
  phone_number_.Swap(&other->phone_number_);
  nation_.Swap(&other->nation_);
  message_type_.Swap(&other->message_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetPhoneCaptchaRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetPhoneCaptchaRequest_descriptor_;
  metadata.reflection = GetPhoneCaptchaRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetPhoneCaptchaRequest

// optional string phone_number = 1;
void GetPhoneCaptchaRequest::clear_phone_number() {
  phone_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetPhoneCaptchaRequest::phone_number() const {
  // @@protoc_insertion_point(field_get:personal.GetPhoneCaptchaRequest.phone_number)
  return phone_number_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetPhoneCaptchaRequest::set_phone_number(const ::std::string& value) {
  
  phone_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:personal.GetPhoneCaptchaRequest.phone_number)
}
void GetPhoneCaptchaRequest::set_phone_number(const char* value) {
  
  phone_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:personal.GetPhoneCaptchaRequest.phone_number)
}
void GetPhoneCaptchaRequest::set_phone_number(const char* value, size_t size) {
  
  phone_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:personal.GetPhoneCaptchaRequest.phone_number)
}
::std::string* GetPhoneCaptchaRequest::mutable_phone_number() {
  
  // @@protoc_insertion_point(field_mutable:personal.GetPhoneCaptchaRequest.phone_number)
  return phone_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetPhoneCaptchaRequest::release_phone_number() {
  // @@protoc_insertion_point(field_release:personal.GetPhoneCaptchaRequest.phone_number)
  
  return phone_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetPhoneCaptchaRequest::set_allocated_phone_number(::std::string* phone_number) {
  if (phone_number != NULL) {
    
  } else {
    
  }
  phone_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phone_number);
  // @@protoc_insertion_point(field_set_allocated:personal.GetPhoneCaptchaRequest.phone_number)
}

// optional string nation = 2;
void GetPhoneCaptchaRequest::clear_nation() {
  nation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetPhoneCaptchaRequest::nation() const {
  // @@protoc_insertion_point(field_get:personal.GetPhoneCaptchaRequest.nation)
  return nation_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetPhoneCaptchaRequest::set_nation(const ::std::string& value) {
  
  nation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:personal.GetPhoneCaptchaRequest.nation)
}
void GetPhoneCaptchaRequest::set_nation(const char* value) {
  
  nation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:personal.GetPhoneCaptchaRequest.nation)
}
void GetPhoneCaptchaRequest::set_nation(const char* value, size_t size) {
  
  nation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:personal.GetPhoneCaptchaRequest.nation)
}
::std::string* GetPhoneCaptchaRequest::mutable_nation() {
  
  // @@protoc_insertion_point(field_mutable:personal.GetPhoneCaptchaRequest.nation)
  return nation_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetPhoneCaptchaRequest::release_nation() {
  // @@protoc_insertion_point(field_release:personal.GetPhoneCaptchaRequest.nation)
  
  return nation_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetPhoneCaptchaRequest::set_allocated_nation(::std::string* nation) {
  if (nation != NULL) {
    
  } else {
    
  }
  nation_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nation);
  // @@protoc_insertion_point(field_set_allocated:personal.GetPhoneCaptchaRequest.nation)
}

// optional string message_type = 3;
void GetPhoneCaptchaRequest::clear_message_type() {
  message_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetPhoneCaptchaRequest::message_type() const {
  // @@protoc_insertion_point(field_get:personal.GetPhoneCaptchaRequest.message_type)
  return message_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetPhoneCaptchaRequest::set_message_type(const ::std::string& value) {
  
  message_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:personal.GetPhoneCaptchaRequest.message_type)
}
void GetPhoneCaptchaRequest::set_message_type(const char* value) {
  
  message_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:personal.GetPhoneCaptchaRequest.message_type)
}
void GetPhoneCaptchaRequest::set_message_type(const char* value, size_t size) {
  
  message_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:personal.GetPhoneCaptchaRequest.message_type)
}
::std::string* GetPhoneCaptchaRequest::mutable_message_type() {
  
  // @@protoc_insertion_point(field_mutable:personal.GetPhoneCaptchaRequest.message_type)
  return message_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetPhoneCaptchaRequest::release_message_type() {
  // @@protoc_insertion_point(field_release:personal.GetPhoneCaptchaRequest.message_type)
  
  return message_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetPhoneCaptchaRequest::set_allocated_message_type(::std::string* message_type) {
  if (message_type != NULL) {
    
  } else {
    
  }
  message_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message_type);
  // @@protoc_insertion_point(field_set_allocated:personal.GetPhoneCaptchaRequest.message_type)
}

inline const GetPhoneCaptchaRequest* GetPhoneCaptchaRequest::internal_default_instance() {
  return &GetPhoneCaptchaRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetPhoneCaptchaResponse::kStatusFieldNumber;
const int GetPhoneCaptchaResponse::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetPhoneCaptchaResponse::GetPhoneCaptchaResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_personalCenter_2fmsg_5fcaptcha_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:personal.GetPhoneCaptchaResponse)
}

void GetPhoneCaptchaResponse::InitAsDefaultInstance() {
  error_ = const_cast< ::grpcCommon::GrpcError*>(
      ::grpcCommon::GrpcError::internal_default_instance());
}

GetPhoneCaptchaResponse::GetPhoneCaptchaResponse(const GetPhoneCaptchaResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:personal.GetPhoneCaptchaResponse)
}

void GetPhoneCaptchaResponse::SharedCtor() {
  error_ = NULL;
  status_ = 0;
  _cached_size_ = 0;
}

GetPhoneCaptchaResponse::~GetPhoneCaptchaResponse() {
  // @@protoc_insertion_point(destructor:personal.GetPhoneCaptchaResponse)
  SharedDtor();
}

void GetPhoneCaptchaResponse::SharedDtor() {
  if (this != &GetPhoneCaptchaResponse_default_instance_.get()) {
    delete error_;
  }
}

void GetPhoneCaptchaResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPhoneCaptchaResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetPhoneCaptchaResponse_descriptor_;
}

const GetPhoneCaptchaResponse& GetPhoneCaptchaResponse::default_instance() {
  protobuf_InitDefaults_personalCenter_2fmsg_5fcaptcha_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<GetPhoneCaptchaResponse> GetPhoneCaptchaResponse_default_instance_;

GetPhoneCaptchaResponse* GetPhoneCaptchaResponse::New(::google::protobuf::Arena* arena) const {
  GetPhoneCaptchaResponse* n = new GetPhoneCaptchaResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetPhoneCaptchaResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:personal.GetPhoneCaptchaResponse)
  status_ = 0;
  if (GetArenaNoVirtual() == NULL && error_ != NULL) delete error_;
  error_ = NULL;
}

bool GetPhoneCaptchaResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:personal.GetPhoneCaptchaResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 status = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional .grpcCommon.GrpcError error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:personal.GetPhoneCaptchaResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:personal.GetPhoneCaptchaResponse)
  return false;
#undef DO_
}

void GetPhoneCaptchaResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:personal.GetPhoneCaptchaResponse)
  // optional int32 status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }

  // optional .grpcCommon.GrpcError error = 2;
  if (this->has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->error_, output);
  }

  // @@protoc_insertion_point(serialize_end:personal.GetPhoneCaptchaResponse)
}

::google::protobuf::uint8* GetPhoneCaptchaResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:personal.GetPhoneCaptchaResponse)
  // optional int32 status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
  }

  // optional .grpcCommon.GrpcError error = 2;
  if (this->has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->error_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:personal.GetPhoneCaptchaResponse)
  return target;
}

size_t GetPhoneCaptchaResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:personal.GetPhoneCaptchaResponse)
  size_t total_size = 0;

  // optional int32 status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->status());
  }

  // optional .grpcCommon.GrpcError error = 2;
  if (this->has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->error_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPhoneCaptchaResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:personal.GetPhoneCaptchaResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GetPhoneCaptchaResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetPhoneCaptchaResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:personal.GetPhoneCaptchaResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:personal.GetPhoneCaptchaResponse)
    UnsafeMergeFrom(*source);
  }
}

void GetPhoneCaptchaResponse::MergeFrom(const GetPhoneCaptchaResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:personal.GetPhoneCaptchaResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void GetPhoneCaptchaResponse::UnsafeMergeFrom(const GetPhoneCaptchaResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.has_error()) {
    mutable_error()->::grpcCommon::GrpcError::MergeFrom(from.error());
  }
}

void GetPhoneCaptchaResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:personal.GetPhoneCaptchaResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPhoneCaptchaResponse::CopyFrom(const GetPhoneCaptchaResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:personal.GetPhoneCaptchaResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool GetPhoneCaptchaResponse::IsInitialized() const {

  return true;
}

void GetPhoneCaptchaResponse::Swap(GetPhoneCaptchaResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetPhoneCaptchaResponse::InternalSwap(GetPhoneCaptchaResponse* other) {
  std::swap(status_, other->status_);
  std::swap(error_, other->error_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetPhoneCaptchaResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetPhoneCaptchaResponse_descriptor_;
  metadata.reflection = GetPhoneCaptchaResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetPhoneCaptchaResponse

// optional int32 status = 1;
void GetPhoneCaptchaResponse::clear_status() {
  status_ = 0;
}
::google::protobuf::int32 GetPhoneCaptchaResponse::status() const {
  // @@protoc_insertion_point(field_get:personal.GetPhoneCaptchaResponse.status)
  return status_;
}
void GetPhoneCaptchaResponse::set_status(::google::protobuf::int32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:personal.GetPhoneCaptchaResponse.status)
}

// optional .grpcCommon.GrpcError error = 2;
bool GetPhoneCaptchaResponse::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
void GetPhoneCaptchaResponse::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) delete error_;
  error_ = NULL;
}
const ::grpcCommon::GrpcError& GetPhoneCaptchaResponse::error() const {
  // @@protoc_insertion_point(field_get:personal.GetPhoneCaptchaResponse.error)
  return error_ != NULL ? *error_
                         : *::grpcCommon::GrpcError::internal_default_instance();
}
::grpcCommon::GrpcError* GetPhoneCaptchaResponse::mutable_error() {
  
  if (error_ == NULL) {
    error_ = new ::grpcCommon::GrpcError;
  }
  // @@protoc_insertion_point(field_mutable:personal.GetPhoneCaptchaResponse.error)
  return error_;
}
::grpcCommon::GrpcError* GetPhoneCaptchaResponse::release_error() {
  // @@protoc_insertion_point(field_release:personal.GetPhoneCaptchaResponse.error)
  
  ::grpcCommon::GrpcError* temp = error_;
  error_ = NULL;
  return temp;
}
void GetPhoneCaptchaResponse::set_allocated_error(::grpcCommon::GrpcError* error) {
  delete error_;
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:personal.GetPhoneCaptchaResponse.error)
}

inline const GetPhoneCaptchaResponse* GetPhoneCaptchaResponse::internal_default_instance() {
  return &GetPhoneCaptchaResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CheckPhoneCaptchaRequest::kPhoneNumberFieldNumber;
const int CheckPhoneCaptchaRequest::kPhoneCaptchaFieldNumber;
const int CheckPhoneCaptchaRequest::kNationFieldNumber;
const int CheckPhoneCaptchaRequest::kMessageTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckPhoneCaptchaRequest::CheckPhoneCaptchaRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_personalCenter_2fmsg_5fcaptcha_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:personal.CheckPhoneCaptchaRequest)
}

void CheckPhoneCaptchaRequest::InitAsDefaultInstance() {
}

CheckPhoneCaptchaRequest::CheckPhoneCaptchaRequest(const CheckPhoneCaptchaRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:personal.CheckPhoneCaptchaRequest)
}

void CheckPhoneCaptchaRequest::SharedCtor() {
  phone_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  phone_captcha_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nation_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

CheckPhoneCaptchaRequest::~CheckPhoneCaptchaRequest() {
  // @@protoc_insertion_point(destructor:personal.CheckPhoneCaptchaRequest)
  SharedDtor();
}

void CheckPhoneCaptchaRequest::SharedDtor() {
  phone_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  phone_captcha_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nation_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CheckPhoneCaptchaRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckPhoneCaptchaRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CheckPhoneCaptchaRequest_descriptor_;
}

const CheckPhoneCaptchaRequest& CheckPhoneCaptchaRequest::default_instance() {
  protobuf_InitDefaults_personalCenter_2fmsg_5fcaptcha_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CheckPhoneCaptchaRequest> CheckPhoneCaptchaRequest_default_instance_;

CheckPhoneCaptchaRequest* CheckPhoneCaptchaRequest::New(::google::protobuf::Arena* arena) const {
  CheckPhoneCaptchaRequest* n = new CheckPhoneCaptchaRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CheckPhoneCaptchaRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:personal.CheckPhoneCaptchaRequest)
  phone_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  phone_captcha_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CheckPhoneCaptchaRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:personal.CheckPhoneCaptchaRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string phone_number = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone_number()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->phone_number().data(), this->phone_number().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "personal.CheckPhoneCaptchaRequest.phone_number"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_phone_captcha;
        break;
      }

      // optional string phone_captcha = 2;
      case 2: {
        if (tag == 18) {
         parse_phone_captcha:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone_captcha()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->phone_captcha().data(), this->phone_captcha().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "personal.CheckPhoneCaptchaRequest.phone_captcha"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_nation;
        break;
      }

      // optional string nation = 3;
      case 3: {
        if (tag == 26) {
         parse_nation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nation()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->nation().data(), this->nation().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "personal.CheckPhoneCaptchaRequest.nation"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_message_type;
        break;
      }

      // optional string message_type = 4;
      case 4: {
        if (tag == 34) {
         parse_message_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message_type().data(), this->message_type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "personal.CheckPhoneCaptchaRequest.message_type"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:personal.CheckPhoneCaptchaRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:personal.CheckPhoneCaptchaRequest)
  return false;
#undef DO_
}

void CheckPhoneCaptchaRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:personal.CheckPhoneCaptchaRequest)
  // optional string phone_number = 1;
  if (this->phone_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->phone_number().data(), this->phone_number().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "personal.CheckPhoneCaptchaRequest.phone_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->phone_number(), output);
  }

  // optional string phone_captcha = 2;
  if (this->phone_captcha().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->phone_captcha().data(), this->phone_captcha().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "personal.CheckPhoneCaptchaRequest.phone_captcha");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->phone_captcha(), output);
  }

  // optional string nation = 3;
  if (this->nation().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nation().data(), this->nation().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "personal.CheckPhoneCaptchaRequest.nation");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->nation(), output);
  }

  // optional string message_type = 4;
  if (this->message_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message_type().data(), this->message_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "personal.CheckPhoneCaptchaRequest.message_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->message_type(), output);
  }

  // @@protoc_insertion_point(serialize_end:personal.CheckPhoneCaptchaRequest)
}

::google::protobuf::uint8* CheckPhoneCaptchaRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:personal.CheckPhoneCaptchaRequest)
  // optional string phone_number = 1;
  if (this->phone_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->phone_number().data(), this->phone_number().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "personal.CheckPhoneCaptchaRequest.phone_number");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->phone_number(), target);
  }

  // optional string phone_captcha = 2;
  if (this->phone_captcha().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->phone_captcha().data(), this->phone_captcha().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "personal.CheckPhoneCaptchaRequest.phone_captcha");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->phone_captcha(), target);
  }

  // optional string nation = 3;
  if (this->nation().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nation().data(), this->nation().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "personal.CheckPhoneCaptchaRequest.nation");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->nation(), target);
  }

  // optional string message_type = 4;
  if (this->message_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message_type().data(), this->message_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "personal.CheckPhoneCaptchaRequest.message_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->message_type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:personal.CheckPhoneCaptchaRequest)
  return target;
}

size_t CheckPhoneCaptchaRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:personal.CheckPhoneCaptchaRequest)
  size_t total_size = 0;

  // optional string phone_number = 1;
  if (this->phone_number().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->phone_number());
  }

  // optional string phone_captcha = 2;
  if (this->phone_captcha().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->phone_captcha());
  }

  // optional string nation = 3;
  if (this->nation().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nation());
  }

  // optional string message_type = 4;
  if (this->message_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckPhoneCaptchaRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:personal.CheckPhoneCaptchaRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CheckPhoneCaptchaRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CheckPhoneCaptchaRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:personal.CheckPhoneCaptchaRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:personal.CheckPhoneCaptchaRequest)
    UnsafeMergeFrom(*source);
  }
}

void CheckPhoneCaptchaRequest::MergeFrom(const CheckPhoneCaptchaRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:personal.CheckPhoneCaptchaRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CheckPhoneCaptchaRequest::UnsafeMergeFrom(const CheckPhoneCaptchaRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.phone_number().size() > 0) {

    phone_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.phone_number_);
  }
  if (from.phone_captcha().size() > 0) {

    phone_captcha_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.phone_captcha_);
  }
  if (from.nation().size() > 0) {

    nation_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nation_);
  }
  if (from.message_type().size() > 0) {

    message_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_type_);
  }
}

void CheckPhoneCaptchaRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:personal.CheckPhoneCaptchaRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckPhoneCaptchaRequest::CopyFrom(const CheckPhoneCaptchaRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:personal.CheckPhoneCaptchaRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CheckPhoneCaptchaRequest::IsInitialized() const {

  return true;
}

void CheckPhoneCaptchaRequest::Swap(CheckPhoneCaptchaRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CheckPhoneCaptchaRequest::InternalSwap(CheckPhoneCaptchaRequest* other) {
  phone_number_.Swap(&other->phone_number_);
  phone_captcha_.Swap(&other->phone_captcha_);
  nation_.Swap(&other->nation_);
  message_type_.Swap(&other->message_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CheckPhoneCaptchaRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CheckPhoneCaptchaRequest_descriptor_;
  metadata.reflection = CheckPhoneCaptchaRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CheckPhoneCaptchaRequest

// optional string phone_number = 1;
void CheckPhoneCaptchaRequest::clear_phone_number() {
  phone_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CheckPhoneCaptchaRequest::phone_number() const {
  // @@protoc_insertion_point(field_get:personal.CheckPhoneCaptchaRequest.phone_number)
  return phone_number_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CheckPhoneCaptchaRequest::set_phone_number(const ::std::string& value) {
  
  phone_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:personal.CheckPhoneCaptchaRequest.phone_number)
}
void CheckPhoneCaptchaRequest::set_phone_number(const char* value) {
  
  phone_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:personal.CheckPhoneCaptchaRequest.phone_number)
}
void CheckPhoneCaptchaRequest::set_phone_number(const char* value, size_t size) {
  
  phone_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:personal.CheckPhoneCaptchaRequest.phone_number)
}
::std::string* CheckPhoneCaptchaRequest::mutable_phone_number() {
  
  // @@protoc_insertion_point(field_mutable:personal.CheckPhoneCaptchaRequest.phone_number)
  return phone_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CheckPhoneCaptchaRequest::release_phone_number() {
  // @@protoc_insertion_point(field_release:personal.CheckPhoneCaptchaRequest.phone_number)
  
  return phone_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CheckPhoneCaptchaRequest::set_allocated_phone_number(::std::string* phone_number) {
  if (phone_number != NULL) {
    
  } else {
    
  }
  phone_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phone_number);
  // @@protoc_insertion_point(field_set_allocated:personal.CheckPhoneCaptchaRequest.phone_number)
}

// optional string phone_captcha = 2;
void CheckPhoneCaptchaRequest::clear_phone_captcha() {
  phone_captcha_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CheckPhoneCaptchaRequest::phone_captcha() const {
  // @@protoc_insertion_point(field_get:personal.CheckPhoneCaptchaRequest.phone_captcha)
  return phone_captcha_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CheckPhoneCaptchaRequest::set_phone_captcha(const ::std::string& value) {
  
  phone_captcha_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:personal.CheckPhoneCaptchaRequest.phone_captcha)
}
void CheckPhoneCaptchaRequest::set_phone_captcha(const char* value) {
  
  phone_captcha_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:personal.CheckPhoneCaptchaRequest.phone_captcha)
}
void CheckPhoneCaptchaRequest::set_phone_captcha(const char* value, size_t size) {
  
  phone_captcha_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:personal.CheckPhoneCaptchaRequest.phone_captcha)
}
::std::string* CheckPhoneCaptchaRequest::mutable_phone_captcha() {
  
  // @@protoc_insertion_point(field_mutable:personal.CheckPhoneCaptchaRequest.phone_captcha)
  return phone_captcha_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CheckPhoneCaptchaRequest::release_phone_captcha() {
  // @@protoc_insertion_point(field_release:personal.CheckPhoneCaptchaRequest.phone_captcha)
  
  return phone_captcha_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CheckPhoneCaptchaRequest::set_allocated_phone_captcha(::std::string* phone_captcha) {
  if (phone_captcha != NULL) {
    
  } else {
    
  }
  phone_captcha_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phone_captcha);
  // @@protoc_insertion_point(field_set_allocated:personal.CheckPhoneCaptchaRequest.phone_captcha)
}

// optional string nation = 3;
void CheckPhoneCaptchaRequest::clear_nation() {
  nation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CheckPhoneCaptchaRequest::nation() const {
  // @@protoc_insertion_point(field_get:personal.CheckPhoneCaptchaRequest.nation)
  return nation_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CheckPhoneCaptchaRequest::set_nation(const ::std::string& value) {
  
  nation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:personal.CheckPhoneCaptchaRequest.nation)
}
void CheckPhoneCaptchaRequest::set_nation(const char* value) {
  
  nation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:personal.CheckPhoneCaptchaRequest.nation)
}
void CheckPhoneCaptchaRequest::set_nation(const char* value, size_t size) {
  
  nation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:personal.CheckPhoneCaptchaRequest.nation)
}
::std::string* CheckPhoneCaptchaRequest::mutable_nation() {
  
  // @@protoc_insertion_point(field_mutable:personal.CheckPhoneCaptchaRequest.nation)
  return nation_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CheckPhoneCaptchaRequest::release_nation() {
  // @@protoc_insertion_point(field_release:personal.CheckPhoneCaptchaRequest.nation)
  
  return nation_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CheckPhoneCaptchaRequest::set_allocated_nation(::std::string* nation) {
  if (nation != NULL) {
    
  } else {
    
  }
  nation_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nation);
  // @@protoc_insertion_point(field_set_allocated:personal.CheckPhoneCaptchaRequest.nation)
}

// optional string message_type = 4;
void CheckPhoneCaptchaRequest::clear_message_type() {
  message_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CheckPhoneCaptchaRequest::message_type() const {
  // @@protoc_insertion_point(field_get:personal.CheckPhoneCaptchaRequest.message_type)
  return message_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CheckPhoneCaptchaRequest::set_message_type(const ::std::string& value) {
  
  message_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:personal.CheckPhoneCaptchaRequest.message_type)
}
void CheckPhoneCaptchaRequest::set_message_type(const char* value) {
  
  message_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:personal.CheckPhoneCaptchaRequest.message_type)
}
void CheckPhoneCaptchaRequest::set_message_type(const char* value, size_t size) {
  
  message_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:personal.CheckPhoneCaptchaRequest.message_type)
}
::std::string* CheckPhoneCaptchaRequest::mutable_message_type() {
  
  // @@protoc_insertion_point(field_mutable:personal.CheckPhoneCaptchaRequest.message_type)
  return message_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CheckPhoneCaptchaRequest::release_message_type() {
  // @@protoc_insertion_point(field_release:personal.CheckPhoneCaptchaRequest.message_type)
  
  return message_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CheckPhoneCaptchaRequest::set_allocated_message_type(::std::string* message_type) {
  if (message_type != NULL) {
    
  } else {
    
  }
  message_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message_type);
  // @@protoc_insertion_point(field_set_allocated:personal.CheckPhoneCaptchaRequest.message_type)
}

inline const CheckPhoneCaptchaRequest* CheckPhoneCaptchaRequest::internal_default_instance() {
  return &CheckPhoneCaptchaRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CheckPhoneCaptchaResponse::kStatusFieldNumber;
const int CheckPhoneCaptchaResponse::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckPhoneCaptchaResponse::CheckPhoneCaptchaResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_personalCenter_2fmsg_5fcaptcha_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:personal.CheckPhoneCaptchaResponse)
}

void CheckPhoneCaptchaResponse::InitAsDefaultInstance() {
  error_ = const_cast< ::grpcCommon::GrpcError*>(
      ::grpcCommon::GrpcError::internal_default_instance());
}

CheckPhoneCaptchaResponse::CheckPhoneCaptchaResponse(const CheckPhoneCaptchaResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:personal.CheckPhoneCaptchaResponse)
}

void CheckPhoneCaptchaResponse::SharedCtor() {
  error_ = NULL;
  status_ = 0;
  _cached_size_ = 0;
}

CheckPhoneCaptchaResponse::~CheckPhoneCaptchaResponse() {
  // @@protoc_insertion_point(destructor:personal.CheckPhoneCaptchaResponse)
  SharedDtor();
}

void CheckPhoneCaptchaResponse::SharedDtor() {
  if (this != &CheckPhoneCaptchaResponse_default_instance_.get()) {
    delete error_;
  }
}

void CheckPhoneCaptchaResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckPhoneCaptchaResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CheckPhoneCaptchaResponse_descriptor_;
}

const CheckPhoneCaptchaResponse& CheckPhoneCaptchaResponse::default_instance() {
  protobuf_InitDefaults_personalCenter_2fmsg_5fcaptcha_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CheckPhoneCaptchaResponse> CheckPhoneCaptchaResponse_default_instance_;

CheckPhoneCaptchaResponse* CheckPhoneCaptchaResponse::New(::google::protobuf::Arena* arena) const {
  CheckPhoneCaptchaResponse* n = new CheckPhoneCaptchaResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CheckPhoneCaptchaResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:personal.CheckPhoneCaptchaResponse)
  status_ = 0;
  if (GetArenaNoVirtual() == NULL && error_ != NULL) delete error_;
  error_ = NULL;
}

bool CheckPhoneCaptchaResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:personal.CheckPhoneCaptchaResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 status = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional .grpcCommon.GrpcError error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:personal.CheckPhoneCaptchaResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:personal.CheckPhoneCaptchaResponse)
  return false;
#undef DO_
}

void CheckPhoneCaptchaResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:personal.CheckPhoneCaptchaResponse)
  // optional int32 status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }

  // optional .grpcCommon.GrpcError error = 2;
  if (this->has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->error_, output);
  }

  // @@protoc_insertion_point(serialize_end:personal.CheckPhoneCaptchaResponse)
}

::google::protobuf::uint8* CheckPhoneCaptchaResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:personal.CheckPhoneCaptchaResponse)
  // optional int32 status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
  }

  // optional .grpcCommon.GrpcError error = 2;
  if (this->has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->error_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:personal.CheckPhoneCaptchaResponse)
  return target;
}

size_t CheckPhoneCaptchaResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:personal.CheckPhoneCaptchaResponse)
  size_t total_size = 0;

  // optional int32 status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->status());
  }

  // optional .grpcCommon.GrpcError error = 2;
  if (this->has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->error_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckPhoneCaptchaResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:personal.CheckPhoneCaptchaResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CheckPhoneCaptchaResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CheckPhoneCaptchaResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:personal.CheckPhoneCaptchaResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:personal.CheckPhoneCaptchaResponse)
    UnsafeMergeFrom(*source);
  }
}

void CheckPhoneCaptchaResponse::MergeFrom(const CheckPhoneCaptchaResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:personal.CheckPhoneCaptchaResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CheckPhoneCaptchaResponse::UnsafeMergeFrom(const CheckPhoneCaptchaResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.has_error()) {
    mutable_error()->::grpcCommon::GrpcError::MergeFrom(from.error());
  }
}

void CheckPhoneCaptchaResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:personal.CheckPhoneCaptchaResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckPhoneCaptchaResponse::CopyFrom(const CheckPhoneCaptchaResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:personal.CheckPhoneCaptchaResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CheckPhoneCaptchaResponse::IsInitialized() const {

  return true;
}

void CheckPhoneCaptchaResponse::Swap(CheckPhoneCaptchaResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CheckPhoneCaptchaResponse::InternalSwap(CheckPhoneCaptchaResponse* other) {
  std::swap(status_, other->status_);
  std::swap(error_, other->error_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CheckPhoneCaptchaResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CheckPhoneCaptchaResponse_descriptor_;
  metadata.reflection = CheckPhoneCaptchaResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CheckPhoneCaptchaResponse

// optional int32 status = 1;
void CheckPhoneCaptchaResponse::clear_status() {
  status_ = 0;
}
::google::protobuf::int32 CheckPhoneCaptchaResponse::status() const {
  // @@protoc_insertion_point(field_get:personal.CheckPhoneCaptchaResponse.status)
  return status_;
}
void CheckPhoneCaptchaResponse::set_status(::google::protobuf::int32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:personal.CheckPhoneCaptchaResponse.status)
}

// optional .grpcCommon.GrpcError error = 2;
bool CheckPhoneCaptchaResponse::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
void CheckPhoneCaptchaResponse::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) delete error_;
  error_ = NULL;
}
const ::grpcCommon::GrpcError& CheckPhoneCaptchaResponse::error() const {
  // @@protoc_insertion_point(field_get:personal.CheckPhoneCaptchaResponse.error)
  return error_ != NULL ? *error_
                         : *::grpcCommon::GrpcError::internal_default_instance();
}
::grpcCommon::GrpcError* CheckPhoneCaptchaResponse::mutable_error() {
  
  if (error_ == NULL) {
    error_ = new ::grpcCommon::GrpcError;
  }
  // @@protoc_insertion_point(field_mutable:personal.CheckPhoneCaptchaResponse.error)
  return error_;
}
::grpcCommon::GrpcError* CheckPhoneCaptchaResponse::release_error() {
  // @@protoc_insertion_point(field_release:personal.CheckPhoneCaptchaResponse.error)
  
  ::grpcCommon::GrpcError* temp = error_;
  error_ = NULL;
  return temp;
}
void CheckPhoneCaptchaResponse::set_allocated_error(::grpcCommon::GrpcError* error) {
  delete error_;
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:personal.CheckPhoneCaptchaResponse.error)
}

inline const CheckPhoneCaptchaResponse* CheckPhoneCaptchaResponse::internal_default_instance() {
  return &CheckPhoneCaptchaResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace personal

// @@protoc_insertion_point(global_scope)
