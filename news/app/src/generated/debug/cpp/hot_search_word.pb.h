// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hot_search_word.proto

#ifndef PROTOBUF_hot_5fsearch_5fword_2eproto__INCLUDED
#define PROTOBUF_hot_5fsearch_5fword_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace main {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_hot_5fsearch_5fword_2eproto();
void protobuf_InitDefaults_hot_5fsearch_5fword_2eproto();
void protobuf_AssignDesc_hot_5fsearch_5fword_2eproto();
void protobuf_ShutdownFile_hot_5fsearch_5fword_2eproto();

class HotSearchWordReply;
class HotSearchWordRequest;

// ===================================================================

class HotSearchWordRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:main.HotSearchWordRequest) */ {
 public:
  HotSearchWordRequest();
  virtual ~HotSearchWordRequest();

  HotSearchWordRequest(const HotSearchWordRequest& from);

  inline HotSearchWordRequest& operator=(const HotSearchWordRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HotSearchWordRequest& default_instance();

  static const HotSearchWordRequest* internal_default_instance();

  void Swap(HotSearchWordRequest* other);

  // implements Message ----------------------------------------------

  inline HotSearchWordRequest* New() const { return New(NULL); }

  HotSearchWordRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HotSearchWordRequest& from);
  void MergeFrom(const HotSearchWordRequest& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HotSearchWordRequest* other);
  void UnsafeMergeFrom(const HotSearchWordRequest& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // @@protoc_insertion_point(class_scope:main.HotSearchWordRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_hot_5fsearch_5fword_2eproto_impl();
  friend void  protobuf_AddDesc_hot_5fsearch_5fword_2eproto_impl();
  friend void protobuf_AssignDesc_hot_5fsearch_5fword_2eproto();
  friend void protobuf_ShutdownFile_hot_5fsearch_5fword_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<HotSearchWordRequest> HotSearchWordRequest_default_instance_;

// -------------------------------------------------------------------

class HotSearchWordReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:main.HotSearchWordReply) */ {
 public:
  HotSearchWordReply();
  virtual ~HotSearchWordReply();

  HotSearchWordReply(const HotSearchWordReply& from);

  inline HotSearchWordReply& operator=(const HotSearchWordReply& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HotSearchWordReply& default_instance();

  static const HotSearchWordReply* internal_default_instance();

  void Swap(HotSearchWordReply* other);

  // implements Message ----------------------------------------------

  inline HotSearchWordReply* New() const { return New(NULL); }

  HotSearchWordReply* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HotSearchWordReply& from);
  void MergeFrom(const HotSearchWordReply& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HotSearchWordReply* other);
  void UnsafeMergeFrom(const HotSearchWordReply& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string hot_word = 1;
  int hot_word_size() const;
  void clear_hot_word();
  static const int kHotWordFieldNumber = 1;
  const ::std::string& hot_word(int index) const;
  ::std::string* mutable_hot_word(int index);
  void set_hot_word(int index, const ::std::string& value);
  void set_hot_word(int index, const char* value);
  void set_hot_word(int index, const char* value, size_t size);
  ::std::string* add_hot_word();
  void add_hot_word(const ::std::string& value);
  void add_hot_word(const char* value);
  void add_hot_word(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& hot_word() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_hot_word();

  // @@protoc_insertion_point(class_scope:main.HotSearchWordReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> hot_word_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_hot_5fsearch_5fword_2eproto_impl();
  friend void  protobuf_AddDesc_hot_5fsearch_5fword_2eproto_impl();
  friend void protobuf_AssignDesc_hot_5fsearch_5fword_2eproto();
  friend void protobuf_ShutdownFile_hot_5fsearch_5fword_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<HotSearchWordReply> HotSearchWordReply_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// HotSearchWordRequest

// optional string user_id = 1;
inline void HotSearchWordRequest::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HotSearchWordRequest::user_id() const {
  // @@protoc_insertion_point(field_get:main.HotSearchWordRequest.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HotSearchWordRequest::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:main.HotSearchWordRequest.user_id)
}
inline void HotSearchWordRequest::set_user_id(const char* value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:main.HotSearchWordRequest.user_id)
}
inline void HotSearchWordRequest::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:main.HotSearchWordRequest.user_id)
}
inline ::std::string* HotSearchWordRequest::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:main.HotSearchWordRequest.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HotSearchWordRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:main.HotSearchWordRequest.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HotSearchWordRequest::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:main.HotSearchWordRequest.user_id)
}

inline const HotSearchWordRequest* HotSearchWordRequest::internal_default_instance() {
  return &HotSearchWordRequest_default_instance_.get();
}
// -------------------------------------------------------------------

// HotSearchWordReply

// repeated string hot_word = 1;
inline int HotSearchWordReply::hot_word_size() const {
  return hot_word_.size();
}
inline void HotSearchWordReply::clear_hot_word() {
  hot_word_.Clear();
}
inline const ::std::string& HotSearchWordReply::hot_word(int index) const {
  // @@protoc_insertion_point(field_get:main.HotSearchWordReply.hot_word)
  return hot_word_.Get(index);
}
inline ::std::string* HotSearchWordReply::mutable_hot_word(int index) {
  // @@protoc_insertion_point(field_mutable:main.HotSearchWordReply.hot_word)
  return hot_word_.Mutable(index);
}
inline void HotSearchWordReply::set_hot_word(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:main.HotSearchWordReply.hot_word)
  hot_word_.Mutable(index)->assign(value);
}
inline void HotSearchWordReply::set_hot_word(int index, const char* value) {
  hot_word_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:main.HotSearchWordReply.hot_word)
}
inline void HotSearchWordReply::set_hot_word(int index, const char* value, size_t size) {
  hot_word_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:main.HotSearchWordReply.hot_word)
}
inline ::std::string* HotSearchWordReply::add_hot_word() {
  // @@protoc_insertion_point(field_add_mutable:main.HotSearchWordReply.hot_word)
  return hot_word_.Add();
}
inline void HotSearchWordReply::add_hot_word(const ::std::string& value) {
  hot_word_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:main.HotSearchWordReply.hot_word)
}
inline void HotSearchWordReply::add_hot_word(const char* value) {
  hot_word_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:main.HotSearchWordReply.hot_word)
}
inline void HotSearchWordReply::add_hot_word(const char* value, size_t size) {
  hot_word_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:main.HotSearchWordReply.hot_word)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
HotSearchWordReply::hot_word() const {
  // @@protoc_insertion_point(field_list:main.HotSearchWordReply.hot_word)
  return hot_word_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
HotSearchWordReply::mutable_hot_word() {
  // @@protoc_insertion_point(field_mutable_list:main.HotSearchWordReply.hot_word)
  return &hot_word_;
}

inline const HotSearchWordReply* HotSearchWordReply::internal_default_instance() {
  return &HotSearchWordReply_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace main

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_hot_5fsearch_5fword_2eproto__INCLUDED
