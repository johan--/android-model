// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_interest_word.proto

#ifndef PROTOBUF_msg_5finterest_5fword_2eproto__INCLUDED
#define PROTOBUF_msg_5finterest_5fword_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace personal {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_msg_5finterest_5fword_2eproto();
void protobuf_InitDefaults_msg_5finterest_5fword_2eproto();
void protobuf_AssignDesc_msg_5finterest_5fword_2eproto();
void protobuf_ShutdownFile_msg_5finterest_5fword_2eproto();

class InterestSubjectRequest;
class InterestSubjectResponse;

// ===================================================================

class InterestSubjectRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:personal.InterestSubjectRequest) */ {
 public:
  InterestSubjectRequest();
  virtual ~InterestSubjectRequest();

  InterestSubjectRequest(const InterestSubjectRequest& from);

  inline InterestSubjectRequest& operator=(const InterestSubjectRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InterestSubjectRequest& default_instance();

  static const InterestSubjectRequest* internal_default_instance();

  void Swap(InterestSubjectRequest* other);

  // implements Message ----------------------------------------------

  inline InterestSubjectRequest* New() const { return New(NULL); }

  InterestSubjectRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InterestSubjectRequest& from);
  void MergeFrom(const InterestSubjectRequest& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InterestSubjectRequest* other);
  void UnsafeMergeFrom(const InterestSubjectRequest& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string keyword = 1;
  void clear_keyword();
  static const int kKeywordFieldNumber = 1;
  const ::std::string& keyword() const;
  void set_keyword(const ::std::string& value);
  void set_keyword(const char* value);
  void set_keyword(const char* value, size_t size);
  ::std::string* mutable_keyword();
  ::std::string* release_keyword();
  void set_allocated_keyword(::std::string* keyword);

  // @@protoc_insertion_point(class_scope:personal.InterestSubjectRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr keyword_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_msg_5finterest_5fword_2eproto_impl();
  friend void  protobuf_AddDesc_msg_5finterest_5fword_2eproto_impl();
  friend void protobuf_AssignDesc_msg_5finterest_5fword_2eproto();
  friend void protobuf_ShutdownFile_msg_5finterest_5fword_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<InterestSubjectRequest> InterestSubjectRequest_default_instance_;

// -------------------------------------------------------------------

class InterestSubjectResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:personal.InterestSubjectResponse) */ {
 public:
  InterestSubjectResponse();
  virtual ~InterestSubjectResponse();

  InterestSubjectResponse(const InterestSubjectResponse& from);

  inline InterestSubjectResponse& operator=(const InterestSubjectResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InterestSubjectResponse& default_instance();

  static const InterestSubjectResponse* internal_default_instance();

  void Swap(InterestSubjectResponse* other);

  // implements Message ----------------------------------------------

  inline InterestSubjectResponse* New() const { return New(NULL); }

  InterestSubjectResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InterestSubjectResponse& from);
  void MergeFrom(const InterestSubjectResponse& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InterestSubjectResponse* other);
  void UnsafeMergeFrom(const InterestSubjectResponse& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string subject = 1;
  int subject_size() const;
  void clear_subject();
  static const int kSubjectFieldNumber = 1;
  const ::std::string& subject(int index) const;
  ::std::string* mutable_subject(int index);
  void set_subject(int index, const ::std::string& value);
  void set_subject(int index, const char* value);
  void set_subject(int index, const char* value, size_t size);
  ::std::string* add_subject();
  void add_subject(const ::std::string& value);
  void add_subject(const char* value);
  void add_subject(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& subject() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_subject();

  // optional int32 total_count = 2;
  void clear_total_count();
  static const int kTotalCountFieldNumber = 2;
  ::google::protobuf::int32 total_count() const;
  void set_total_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:personal.InterestSubjectResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> subject_;
  ::google::protobuf::int32 total_count_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_msg_5finterest_5fword_2eproto_impl();
  friend void  protobuf_AddDesc_msg_5finterest_5fword_2eproto_impl();
  friend void protobuf_AssignDesc_msg_5finterest_5fword_2eproto();
  friend void protobuf_ShutdownFile_msg_5finterest_5fword_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<InterestSubjectResponse> InterestSubjectResponse_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// InterestSubjectRequest

// optional string keyword = 1;
inline void InterestSubjectRequest::clear_keyword() {
  keyword_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InterestSubjectRequest::keyword() const {
  // @@protoc_insertion_point(field_get:personal.InterestSubjectRequest.keyword)
  return keyword_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InterestSubjectRequest::set_keyword(const ::std::string& value) {
  
  keyword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:personal.InterestSubjectRequest.keyword)
}
inline void InterestSubjectRequest::set_keyword(const char* value) {
  
  keyword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:personal.InterestSubjectRequest.keyword)
}
inline void InterestSubjectRequest::set_keyword(const char* value, size_t size) {
  
  keyword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:personal.InterestSubjectRequest.keyword)
}
inline ::std::string* InterestSubjectRequest::mutable_keyword() {
  
  // @@protoc_insertion_point(field_mutable:personal.InterestSubjectRequest.keyword)
  return keyword_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InterestSubjectRequest::release_keyword() {
  // @@protoc_insertion_point(field_release:personal.InterestSubjectRequest.keyword)
  
  return keyword_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InterestSubjectRequest::set_allocated_keyword(::std::string* keyword) {
  if (keyword != NULL) {
    
  } else {
    
  }
  keyword_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), keyword);
  // @@protoc_insertion_point(field_set_allocated:personal.InterestSubjectRequest.keyword)
}

inline const InterestSubjectRequest* InterestSubjectRequest::internal_default_instance() {
  return &InterestSubjectRequest_default_instance_.get();
}
// -------------------------------------------------------------------

// InterestSubjectResponse

// repeated string subject = 1;
inline int InterestSubjectResponse::subject_size() const {
  return subject_.size();
}
inline void InterestSubjectResponse::clear_subject() {
  subject_.Clear();
}
inline const ::std::string& InterestSubjectResponse::subject(int index) const {
  // @@protoc_insertion_point(field_get:personal.InterestSubjectResponse.subject)
  return subject_.Get(index);
}
inline ::std::string* InterestSubjectResponse::mutable_subject(int index) {
  // @@protoc_insertion_point(field_mutable:personal.InterestSubjectResponse.subject)
  return subject_.Mutable(index);
}
inline void InterestSubjectResponse::set_subject(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:personal.InterestSubjectResponse.subject)
  subject_.Mutable(index)->assign(value);
}
inline void InterestSubjectResponse::set_subject(int index, const char* value) {
  subject_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:personal.InterestSubjectResponse.subject)
}
inline void InterestSubjectResponse::set_subject(int index, const char* value, size_t size) {
  subject_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:personal.InterestSubjectResponse.subject)
}
inline ::std::string* InterestSubjectResponse::add_subject() {
  // @@protoc_insertion_point(field_add_mutable:personal.InterestSubjectResponse.subject)
  return subject_.Add();
}
inline void InterestSubjectResponse::add_subject(const ::std::string& value) {
  subject_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:personal.InterestSubjectResponse.subject)
}
inline void InterestSubjectResponse::add_subject(const char* value) {
  subject_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:personal.InterestSubjectResponse.subject)
}
inline void InterestSubjectResponse::add_subject(const char* value, size_t size) {
  subject_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:personal.InterestSubjectResponse.subject)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
InterestSubjectResponse::subject() const {
  // @@protoc_insertion_point(field_list:personal.InterestSubjectResponse.subject)
  return subject_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
InterestSubjectResponse::mutable_subject() {
  // @@protoc_insertion_point(field_mutable_list:personal.InterestSubjectResponse.subject)
  return &subject_;
}

// optional int32 total_count = 2;
inline void InterestSubjectResponse::clear_total_count() {
  total_count_ = 0;
}
inline ::google::protobuf::int32 InterestSubjectResponse::total_count() const {
  // @@protoc_insertion_point(field_get:personal.InterestSubjectResponse.total_count)
  return total_count_;
}
inline void InterestSubjectResponse::set_total_count(::google::protobuf::int32 value) {
  
  total_count_ = value;
  // @@protoc_insertion_point(field_set:personal.InterestSubjectResponse.total_count)
}

inline const InterestSubjectResponse* InterestSubjectResponse::internal_default_instance() {
  return &InterestSubjectResponse_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace personal

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_msg_5finterest_5fword_2eproto__INCLUDED
