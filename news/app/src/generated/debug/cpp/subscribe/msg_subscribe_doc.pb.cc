// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: subscribe/msg_subscribe_doc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "subscribe/msg_subscribe_doc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace subscribe {

namespace {

const ::google::protobuf::Descriptor* SubscribeDocListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubscribeDocListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubscribeDocListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubscribeDocListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubscribeDocListResponse_SubscribeDocMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubscribeDocListResponse_SubscribeDocMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_subscribe_2fmsg_5fsubscribe_5fdoc_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_subscribe_2fmsg_5fsubscribe_5fdoc_2eproto() {
  protobuf_AddDesc_subscribe_2fmsg_5fsubscribe_5fdoc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "subscribe/msg_subscribe_doc.proto");
  GOOGLE_CHECK(file != NULL);
  SubscribeDocListRequest_descriptor_ = file->message_type(0);
  static const int SubscribeDocListRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeDocListRequest, subscribe_keyword_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeDocListRequest, page_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeDocListRequest, page_size_),
  };
  SubscribeDocListRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SubscribeDocListRequest_descriptor_,
      SubscribeDocListRequest::internal_default_instance(),
      SubscribeDocListRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(SubscribeDocListRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeDocListRequest, _internal_metadata_));
  SubscribeDocListResponse_descriptor_ = file->message_type(1);
  static const int SubscribeDocListResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeDocListResponse, subscribe_doc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeDocListResponse, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeDocListResponse, has_more_),
  };
  SubscribeDocListResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SubscribeDocListResponse_descriptor_,
      SubscribeDocListResponse::internal_default_instance(),
      SubscribeDocListResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(SubscribeDocListResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeDocListResponse, _internal_metadata_));
  SubscribeDocListResponse_SubscribeDocMessage_descriptor_ = SubscribeDocListResponse_descriptor_->nested_type(0);
  static const int SubscribeDocListResponse_SubscribeDocMessage_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeDocListResponse_SubscribeDocMessage, doc_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeDocListResponse_SubscribeDocMessage, subscribe_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeDocListResponse_SubscribeDocMessage, docu_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeDocListResponse_SubscribeDocMessage, docu_title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeDocListResponse_SubscribeDocMessage, docu_author_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeDocListResponse_SubscribeDocMessage, publish_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeDocListResponse_SubscribeDocMessage, is_buy_),
  };
  SubscribeDocListResponse_SubscribeDocMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SubscribeDocListResponse_SubscribeDocMessage_descriptor_,
      SubscribeDocListResponse_SubscribeDocMessage::internal_default_instance(),
      SubscribeDocListResponse_SubscribeDocMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(SubscribeDocListResponse_SubscribeDocMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeDocListResponse_SubscribeDocMessage, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_subscribe_2fmsg_5fsubscribe_5fdoc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SubscribeDocListRequest_descriptor_, SubscribeDocListRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SubscribeDocListResponse_descriptor_, SubscribeDocListResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SubscribeDocListResponse_SubscribeDocMessage_descriptor_, SubscribeDocListResponse_SubscribeDocMessage::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_subscribe_2fmsg_5fsubscribe_5fdoc_2eproto() {
  SubscribeDocListRequest_default_instance_.Shutdown();
  delete SubscribeDocListRequest_reflection_;
  SubscribeDocListResponse_default_instance_.Shutdown();
  delete SubscribeDocListResponse_reflection_;
  SubscribeDocListResponse_SubscribeDocMessage_default_instance_.Shutdown();
  delete SubscribeDocListResponse_SubscribeDocMessage_reflection_;
}

void protobuf_InitDefaults_subscribe_2fmsg_5fsubscribe_5fdoc_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::protobuf_InitDefaults_google_2fprotobuf_2fany_2eproto();
  ::subscribe::protobuf_InitDefaults_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto();
  ::grpcCommon::protobuf_InitDefaults_grpcCommon_2fmsg_5ferror_2eproto();
  SubscribeDocListRequest_default_instance_.DefaultConstruct();
  SubscribeDocListResponse_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  SubscribeDocListResponse_SubscribeDocMessage_default_instance_.DefaultConstruct();
  SubscribeDocListRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  SubscribeDocListResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  SubscribeDocListResponse_SubscribeDocMessage_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_subscribe_2fmsg_5fsubscribe_5fdoc_2eproto_once_);
void protobuf_InitDefaults_subscribe_2fmsg_5fsubscribe_5fdoc_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_subscribe_2fmsg_5fsubscribe_5fdoc_2eproto_once_,
                 &protobuf_InitDefaults_subscribe_2fmsg_5fsubscribe_5fdoc_2eproto_impl);
}
void protobuf_AddDesc_subscribe_2fmsg_5fsubscribe_5fdoc_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_subscribe_2fmsg_5fsubscribe_5fdoc_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n!subscribe/msg_subscribe_doc.proto\022\tsub"
    "scribe\032\031google/protobuf/any.proto\032%subsc"
    "ribe/msg_subscribe_keyword.proto\032\032grpcCo"
    "mmon/msg_error.proto\"\200\001\n\027SubscribeDocLis"
    "tRequest\022=\n\021subscribe_keyword\030\001 \001(\0132\".su"
    "bscribe.SubscribeKeywordMessage\022\023\n\013page_"
    "number\030\002 \001(\005\022\021\n\tpage_size\030\003 \001(\005\"\302\002\n\030Subs"
    "cribeDocListResponse\022N\n\rsubscribe_doc\030\001 "
    "\003(\01327.subscribe.SubscribeDocListResponse"
    ".SubscribeDocMessage\022$\n\005error\030\002 \001(\0132\025.gr"
    "pcCommon.GrpcError\022\020\n\010has_more\030\003 \001(\010\032\235\001\n"
    "\023SubscribeDocMessage\022\016\n\006doc_id\030\001 \001(\t\022\024\n\014"
    "subscribe_id\030\002 \001(\t\022\021\n\tdocu_type\030\003 \001(\t\022\022\n"
    "\ndocu_title\030\004 \001(\t\022\023\n\013docu_author\030\005 \001(\t\022\024"
    "\n\014publish_time\030\006 \001(\t\022\016\n\006is_buy\030\007 \001(\tB \n\025"
    "com.wanfang.subscribeP\001\242\002\004WFPRb\006proto3", 638);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "subscribe/msg_subscribe_doc.proto", &protobuf_RegisterTypes);
  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fany_2eproto();
  ::subscribe::protobuf_AddDesc_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto();
  ::grpcCommon::protobuf_AddDesc_grpcCommon_2fmsg_5ferror_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_subscribe_2fmsg_5fsubscribe_5fdoc_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_subscribe_2fmsg_5fsubscribe_5fdoc_2eproto_once_);
void protobuf_AddDesc_subscribe_2fmsg_5fsubscribe_5fdoc_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_subscribe_2fmsg_5fsubscribe_5fdoc_2eproto_once_,
                 &protobuf_AddDesc_subscribe_2fmsg_5fsubscribe_5fdoc_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_subscribe_2fmsg_5fsubscribe_5fdoc_2eproto {
  StaticDescriptorInitializer_subscribe_2fmsg_5fsubscribe_5fdoc_2eproto() {
    protobuf_AddDesc_subscribe_2fmsg_5fsubscribe_5fdoc_2eproto();
  }
} static_descriptor_initializer_subscribe_2fmsg_5fsubscribe_5fdoc_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubscribeDocListRequest::kSubscribeKeywordFieldNumber;
const int SubscribeDocListRequest::kPageNumberFieldNumber;
const int SubscribeDocListRequest::kPageSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubscribeDocListRequest::SubscribeDocListRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_subscribe_2fmsg_5fsubscribe_5fdoc_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:subscribe.SubscribeDocListRequest)
}

void SubscribeDocListRequest::InitAsDefaultInstance() {
  subscribe_keyword_ = const_cast< ::subscribe::SubscribeKeywordMessage*>(
      ::subscribe::SubscribeKeywordMessage::internal_default_instance());
}

SubscribeDocListRequest::SubscribeDocListRequest(const SubscribeDocListRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:subscribe.SubscribeDocListRequest)
}

void SubscribeDocListRequest::SharedCtor() {
  subscribe_keyword_ = NULL;
  ::memset(&page_number_, 0, reinterpret_cast<char*>(&page_size_) -
    reinterpret_cast<char*>(&page_number_) + sizeof(page_size_));
  _cached_size_ = 0;
}

SubscribeDocListRequest::~SubscribeDocListRequest() {
  // @@protoc_insertion_point(destructor:subscribe.SubscribeDocListRequest)
  SharedDtor();
}

void SubscribeDocListRequest::SharedDtor() {
  if (this != &SubscribeDocListRequest_default_instance_.get()) {
    delete subscribe_keyword_;
  }
}

void SubscribeDocListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubscribeDocListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubscribeDocListRequest_descriptor_;
}

const SubscribeDocListRequest& SubscribeDocListRequest::default_instance() {
  protobuf_InitDefaults_subscribe_2fmsg_5fsubscribe_5fdoc_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SubscribeDocListRequest> SubscribeDocListRequest_default_instance_;

SubscribeDocListRequest* SubscribeDocListRequest::New(::google::protobuf::Arena* arena) const {
  SubscribeDocListRequest* n = new SubscribeDocListRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SubscribeDocListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:subscribe.SubscribeDocListRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SubscribeDocListRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SubscribeDocListRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(page_number_, page_size_);
  if (GetArenaNoVirtual() == NULL && subscribe_keyword_ != NULL) delete subscribe_keyword_;
  subscribe_keyword_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool SubscribeDocListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:subscribe.SubscribeDocListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .subscribe.SubscribeKeywordMessage subscribe_keyword = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_subscribe_keyword()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_page_number;
        break;
      }

      // optional int32 page_number = 2;
      case 2: {
        if (tag == 16) {
         parse_page_number:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_number_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_page_size;
        break;
      }

      // optional int32 page_size = 3;
      case 3: {
        if (tag == 24) {
         parse_page_size:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_size_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:subscribe.SubscribeDocListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:subscribe.SubscribeDocListRequest)
  return false;
#undef DO_
}

void SubscribeDocListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:subscribe.SubscribeDocListRequest)
  // optional .subscribe.SubscribeKeywordMessage subscribe_keyword = 1;
  if (this->has_subscribe_keyword()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->subscribe_keyword_, output);
  }

  // optional int32 page_number = 2;
  if (this->page_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->page_number(), output);
  }

  // optional int32 page_size = 3;
  if (this->page_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->page_size(), output);
  }

  // @@protoc_insertion_point(serialize_end:subscribe.SubscribeDocListRequest)
}

::google::protobuf::uint8* SubscribeDocListRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:subscribe.SubscribeDocListRequest)
  // optional .subscribe.SubscribeKeywordMessage subscribe_keyword = 1;
  if (this->has_subscribe_keyword()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->subscribe_keyword_, false, target);
  }

  // optional int32 page_number = 2;
  if (this->page_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->page_number(), target);
  }

  // optional int32 page_size = 3;
  if (this->page_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->page_size(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:subscribe.SubscribeDocListRequest)
  return target;
}

size_t SubscribeDocListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:subscribe.SubscribeDocListRequest)
  size_t total_size = 0;

  // optional .subscribe.SubscribeKeywordMessage subscribe_keyword = 1;
  if (this->has_subscribe_keyword()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->subscribe_keyword_);
  }

  // optional int32 page_number = 2;
  if (this->page_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->page_number());
  }

  // optional int32 page_size = 3;
  if (this->page_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->page_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubscribeDocListRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:subscribe.SubscribeDocListRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SubscribeDocListRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SubscribeDocListRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:subscribe.SubscribeDocListRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:subscribe.SubscribeDocListRequest)
    UnsafeMergeFrom(*source);
  }
}

void SubscribeDocListRequest::MergeFrom(const SubscribeDocListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:subscribe.SubscribeDocListRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SubscribeDocListRequest::UnsafeMergeFrom(const SubscribeDocListRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_subscribe_keyword()) {
    mutable_subscribe_keyword()->::subscribe::SubscribeKeywordMessage::MergeFrom(from.subscribe_keyword());
  }
  if (from.page_number() != 0) {
    set_page_number(from.page_number());
  }
  if (from.page_size() != 0) {
    set_page_size(from.page_size());
  }
}

void SubscribeDocListRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:subscribe.SubscribeDocListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeDocListRequest::CopyFrom(const SubscribeDocListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:subscribe.SubscribeDocListRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SubscribeDocListRequest::IsInitialized() const {

  return true;
}

void SubscribeDocListRequest::Swap(SubscribeDocListRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubscribeDocListRequest::InternalSwap(SubscribeDocListRequest* other) {
  std::swap(subscribe_keyword_, other->subscribe_keyword_);
  std::swap(page_number_, other->page_number_);
  std::swap(page_size_, other->page_size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SubscribeDocListRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubscribeDocListRequest_descriptor_;
  metadata.reflection = SubscribeDocListRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SubscribeDocListRequest

// optional .subscribe.SubscribeKeywordMessage subscribe_keyword = 1;
bool SubscribeDocListRequest::has_subscribe_keyword() const {
  return this != internal_default_instance() && subscribe_keyword_ != NULL;
}
void SubscribeDocListRequest::clear_subscribe_keyword() {
  if (GetArenaNoVirtual() == NULL && subscribe_keyword_ != NULL) delete subscribe_keyword_;
  subscribe_keyword_ = NULL;
}
const ::subscribe::SubscribeKeywordMessage& SubscribeDocListRequest::subscribe_keyword() const {
  // @@protoc_insertion_point(field_get:subscribe.SubscribeDocListRequest.subscribe_keyword)
  return subscribe_keyword_ != NULL ? *subscribe_keyword_
                         : *::subscribe::SubscribeKeywordMessage::internal_default_instance();
}
::subscribe::SubscribeKeywordMessage* SubscribeDocListRequest::mutable_subscribe_keyword() {
  
  if (subscribe_keyword_ == NULL) {
    subscribe_keyword_ = new ::subscribe::SubscribeKeywordMessage;
  }
  // @@protoc_insertion_point(field_mutable:subscribe.SubscribeDocListRequest.subscribe_keyword)
  return subscribe_keyword_;
}
::subscribe::SubscribeKeywordMessage* SubscribeDocListRequest::release_subscribe_keyword() {
  // @@protoc_insertion_point(field_release:subscribe.SubscribeDocListRequest.subscribe_keyword)
  
  ::subscribe::SubscribeKeywordMessage* temp = subscribe_keyword_;
  subscribe_keyword_ = NULL;
  return temp;
}
void SubscribeDocListRequest::set_allocated_subscribe_keyword(::subscribe::SubscribeKeywordMessage* subscribe_keyword) {
  delete subscribe_keyword_;
  subscribe_keyword_ = subscribe_keyword;
  if (subscribe_keyword) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:subscribe.SubscribeDocListRequest.subscribe_keyword)
}

// optional int32 page_number = 2;
void SubscribeDocListRequest::clear_page_number() {
  page_number_ = 0;
}
::google::protobuf::int32 SubscribeDocListRequest::page_number() const {
  // @@protoc_insertion_point(field_get:subscribe.SubscribeDocListRequest.page_number)
  return page_number_;
}
void SubscribeDocListRequest::set_page_number(::google::protobuf::int32 value) {
  
  page_number_ = value;
  // @@protoc_insertion_point(field_set:subscribe.SubscribeDocListRequest.page_number)
}

// optional int32 page_size = 3;
void SubscribeDocListRequest::clear_page_size() {
  page_size_ = 0;
}
::google::protobuf::int32 SubscribeDocListRequest::page_size() const {
  // @@protoc_insertion_point(field_get:subscribe.SubscribeDocListRequest.page_size)
  return page_size_;
}
void SubscribeDocListRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:subscribe.SubscribeDocListRequest.page_size)
}

inline const SubscribeDocListRequest* SubscribeDocListRequest::internal_default_instance() {
  return &SubscribeDocListRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubscribeDocListResponse_SubscribeDocMessage::kDocIdFieldNumber;
const int SubscribeDocListResponse_SubscribeDocMessage::kSubscribeIdFieldNumber;
const int SubscribeDocListResponse_SubscribeDocMessage::kDocuTypeFieldNumber;
const int SubscribeDocListResponse_SubscribeDocMessage::kDocuTitleFieldNumber;
const int SubscribeDocListResponse_SubscribeDocMessage::kDocuAuthorFieldNumber;
const int SubscribeDocListResponse_SubscribeDocMessage::kPublishTimeFieldNumber;
const int SubscribeDocListResponse_SubscribeDocMessage::kIsBuyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubscribeDocListResponse_SubscribeDocMessage::SubscribeDocListResponse_SubscribeDocMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_subscribe_2fmsg_5fsubscribe_5fdoc_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:subscribe.SubscribeDocListResponse.SubscribeDocMessage)
}

void SubscribeDocListResponse_SubscribeDocMessage::InitAsDefaultInstance() {
}

SubscribeDocListResponse_SubscribeDocMessage::SubscribeDocListResponse_SubscribeDocMessage(const SubscribeDocListResponse_SubscribeDocMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:subscribe.SubscribeDocListResponse.SubscribeDocMessage)
}

void SubscribeDocListResponse_SubscribeDocMessage::SharedCtor() {
  doc_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subscribe_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  docu_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  docu_title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  docu_author_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  publish_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_buy_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

SubscribeDocListResponse_SubscribeDocMessage::~SubscribeDocListResponse_SubscribeDocMessage() {
  // @@protoc_insertion_point(destructor:subscribe.SubscribeDocListResponse.SubscribeDocMessage)
  SharedDtor();
}

void SubscribeDocListResponse_SubscribeDocMessage::SharedDtor() {
  doc_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subscribe_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  docu_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  docu_title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  docu_author_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  publish_time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_buy_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SubscribeDocListResponse_SubscribeDocMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubscribeDocListResponse_SubscribeDocMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubscribeDocListResponse_SubscribeDocMessage_descriptor_;
}

const SubscribeDocListResponse_SubscribeDocMessage& SubscribeDocListResponse_SubscribeDocMessage::default_instance() {
  protobuf_InitDefaults_subscribe_2fmsg_5fsubscribe_5fdoc_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SubscribeDocListResponse_SubscribeDocMessage> SubscribeDocListResponse_SubscribeDocMessage_default_instance_;

SubscribeDocListResponse_SubscribeDocMessage* SubscribeDocListResponse_SubscribeDocMessage::New(::google::protobuf::Arena* arena) const {
  SubscribeDocListResponse_SubscribeDocMessage* n = new SubscribeDocListResponse_SubscribeDocMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SubscribeDocListResponse_SubscribeDocMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:subscribe.SubscribeDocListResponse.SubscribeDocMessage)
  doc_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subscribe_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  docu_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  docu_title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  docu_author_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  publish_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_buy_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SubscribeDocListResponse_SubscribeDocMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:subscribe.SubscribeDocListResponse.SubscribeDocMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string doc_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_doc_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->doc_id().data(), this->doc_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "subscribe.SubscribeDocListResponse.SubscribeDocMessage.doc_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_subscribe_id;
        break;
      }

      // optional string subscribe_id = 2;
      case 2: {
        if (tag == 18) {
         parse_subscribe_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subscribe_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->subscribe_id().data(), this->subscribe_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "subscribe.SubscribeDocListResponse.SubscribeDocMessage.subscribe_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_docu_type;
        break;
      }

      // optional string docu_type = 3;
      case 3: {
        if (tag == 26) {
         parse_docu_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_docu_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->docu_type().data(), this->docu_type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "subscribe.SubscribeDocListResponse.SubscribeDocMessage.docu_type"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_docu_title;
        break;
      }

      // optional string docu_title = 4;
      case 4: {
        if (tag == 34) {
         parse_docu_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_docu_title()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->docu_title().data(), this->docu_title().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "subscribe.SubscribeDocListResponse.SubscribeDocMessage.docu_title"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_docu_author;
        break;
      }

      // optional string docu_author = 5;
      case 5: {
        if (tag == 42) {
         parse_docu_author:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_docu_author()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->docu_author().data(), this->docu_author().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "subscribe.SubscribeDocListResponse.SubscribeDocMessage.docu_author"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_publish_time;
        break;
      }

      // optional string publish_time = 6;
      case 6: {
        if (tag == 50) {
         parse_publish_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_publish_time()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->publish_time().data(), this->publish_time().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "subscribe.SubscribeDocListResponse.SubscribeDocMessage.publish_time"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_is_buy;
        break;
      }

      // optional string is_buy = 7;
      case 7: {
        if (tag == 58) {
         parse_is_buy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_is_buy()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->is_buy().data(), this->is_buy().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "subscribe.SubscribeDocListResponse.SubscribeDocMessage.is_buy"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:subscribe.SubscribeDocListResponse.SubscribeDocMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:subscribe.SubscribeDocListResponse.SubscribeDocMessage)
  return false;
#undef DO_
}

void SubscribeDocListResponse_SubscribeDocMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:subscribe.SubscribeDocListResponse.SubscribeDocMessage)
  // optional string doc_id = 1;
  if (this->doc_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->doc_id().data(), this->doc_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "subscribe.SubscribeDocListResponse.SubscribeDocMessage.doc_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->doc_id(), output);
  }

  // optional string subscribe_id = 2;
  if (this->subscribe_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subscribe_id().data(), this->subscribe_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "subscribe.SubscribeDocListResponse.SubscribeDocMessage.subscribe_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->subscribe_id(), output);
  }

  // optional string docu_type = 3;
  if (this->docu_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->docu_type().data(), this->docu_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "subscribe.SubscribeDocListResponse.SubscribeDocMessage.docu_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->docu_type(), output);
  }

  // optional string docu_title = 4;
  if (this->docu_title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->docu_title().data(), this->docu_title().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "subscribe.SubscribeDocListResponse.SubscribeDocMessage.docu_title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->docu_title(), output);
  }

  // optional string docu_author = 5;
  if (this->docu_author().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->docu_author().data(), this->docu_author().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "subscribe.SubscribeDocListResponse.SubscribeDocMessage.docu_author");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->docu_author(), output);
  }

  // optional string publish_time = 6;
  if (this->publish_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->publish_time().data(), this->publish_time().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "subscribe.SubscribeDocListResponse.SubscribeDocMessage.publish_time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->publish_time(), output);
  }

  // optional string is_buy = 7;
  if (this->is_buy().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->is_buy().data(), this->is_buy().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "subscribe.SubscribeDocListResponse.SubscribeDocMessage.is_buy");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->is_buy(), output);
  }

  // @@protoc_insertion_point(serialize_end:subscribe.SubscribeDocListResponse.SubscribeDocMessage)
}

::google::protobuf::uint8* SubscribeDocListResponse_SubscribeDocMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:subscribe.SubscribeDocListResponse.SubscribeDocMessage)
  // optional string doc_id = 1;
  if (this->doc_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->doc_id().data(), this->doc_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "subscribe.SubscribeDocListResponse.SubscribeDocMessage.doc_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->doc_id(), target);
  }

  // optional string subscribe_id = 2;
  if (this->subscribe_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subscribe_id().data(), this->subscribe_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "subscribe.SubscribeDocListResponse.SubscribeDocMessage.subscribe_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->subscribe_id(), target);
  }

  // optional string docu_type = 3;
  if (this->docu_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->docu_type().data(), this->docu_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "subscribe.SubscribeDocListResponse.SubscribeDocMessage.docu_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->docu_type(), target);
  }

  // optional string docu_title = 4;
  if (this->docu_title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->docu_title().data(), this->docu_title().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "subscribe.SubscribeDocListResponse.SubscribeDocMessage.docu_title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->docu_title(), target);
  }

  // optional string docu_author = 5;
  if (this->docu_author().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->docu_author().data(), this->docu_author().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "subscribe.SubscribeDocListResponse.SubscribeDocMessage.docu_author");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->docu_author(), target);
  }

  // optional string publish_time = 6;
  if (this->publish_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->publish_time().data(), this->publish_time().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "subscribe.SubscribeDocListResponse.SubscribeDocMessage.publish_time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->publish_time(), target);
  }

  // optional string is_buy = 7;
  if (this->is_buy().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->is_buy().data(), this->is_buy().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "subscribe.SubscribeDocListResponse.SubscribeDocMessage.is_buy");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->is_buy(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:subscribe.SubscribeDocListResponse.SubscribeDocMessage)
  return target;
}

size_t SubscribeDocListResponse_SubscribeDocMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:subscribe.SubscribeDocListResponse.SubscribeDocMessage)
  size_t total_size = 0;

  // optional string doc_id = 1;
  if (this->doc_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->doc_id());
  }

  // optional string subscribe_id = 2;
  if (this->subscribe_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->subscribe_id());
  }

  // optional string docu_type = 3;
  if (this->docu_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->docu_type());
  }

  // optional string docu_title = 4;
  if (this->docu_title().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->docu_title());
  }

  // optional string docu_author = 5;
  if (this->docu_author().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->docu_author());
  }

  // optional string publish_time = 6;
  if (this->publish_time().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->publish_time());
  }

  // optional string is_buy = 7;
  if (this->is_buy().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->is_buy());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubscribeDocListResponse_SubscribeDocMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:subscribe.SubscribeDocListResponse.SubscribeDocMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SubscribeDocListResponse_SubscribeDocMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SubscribeDocListResponse_SubscribeDocMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:subscribe.SubscribeDocListResponse.SubscribeDocMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:subscribe.SubscribeDocListResponse.SubscribeDocMessage)
    UnsafeMergeFrom(*source);
  }
}

void SubscribeDocListResponse_SubscribeDocMessage::MergeFrom(const SubscribeDocListResponse_SubscribeDocMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:subscribe.SubscribeDocListResponse.SubscribeDocMessage)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SubscribeDocListResponse_SubscribeDocMessage::UnsafeMergeFrom(const SubscribeDocListResponse_SubscribeDocMessage& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.doc_id().size() > 0) {

    doc_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.doc_id_);
  }
  if (from.subscribe_id().size() > 0) {

    subscribe_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.subscribe_id_);
  }
  if (from.docu_type().size() > 0) {

    docu_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.docu_type_);
  }
  if (from.docu_title().size() > 0) {

    docu_title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.docu_title_);
  }
  if (from.docu_author().size() > 0) {

    docu_author_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.docu_author_);
  }
  if (from.publish_time().size() > 0) {

    publish_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.publish_time_);
  }
  if (from.is_buy().size() > 0) {

    is_buy_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.is_buy_);
  }
}

void SubscribeDocListResponse_SubscribeDocMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:subscribe.SubscribeDocListResponse.SubscribeDocMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeDocListResponse_SubscribeDocMessage::CopyFrom(const SubscribeDocListResponse_SubscribeDocMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:subscribe.SubscribeDocListResponse.SubscribeDocMessage)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SubscribeDocListResponse_SubscribeDocMessage::IsInitialized() const {

  return true;
}

void SubscribeDocListResponse_SubscribeDocMessage::Swap(SubscribeDocListResponse_SubscribeDocMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubscribeDocListResponse_SubscribeDocMessage::InternalSwap(SubscribeDocListResponse_SubscribeDocMessage* other) {
  doc_id_.Swap(&other->doc_id_);
  subscribe_id_.Swap(&other->subscribe_id_);
  docu_type_.Swap(&other->docu_type_);
  docu_title_.Swap(&other->docu_title_);
  docu_author_.Swap(&other->docu_author_);
  publish_time_.Swap(&other->publish_time_);
  is_buy_.Swap(&other->is_buy_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SubscribeDocListResponse_SubscribeDocMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubscribeDocListResponse_SubscribeDocMessage_descriptor_;
  metadata.reflection = SubscribeDocListResponse_SubscribeDocMessage_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubscribeDocListResponse::kSubscribeDocFieldNumber;
const int SubscribeDocListResponse::kErrorFieldNumber;
const int SubscribeDocListResponse::kHasMoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubscribeDocListResponse::SubscribeDocListResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_subscribe_2fmsg_5fsubscribe_5fdoc_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:subscribe.SubscribeDocListResponse)
}

void SubscribeDocListResponse::InitAsDefaultInstance() {
  error_ = const_cast< ::grpcCommon::GrpcError*>(
      ::grpcCommon::GrpcError::internal_default_instance());
}

SubscribeDocListResponse::SubscribeDocListResponse(const SubscribeDocListResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:subscribe.SubscribeDocListResponse)
}

void SubscribeDocListResponse::SharedCtor() {
  error_ = NULL;
  has_more_ = false;
  _cached_size_ = 0;
}

SubscribeDocListResponse::~SubscribeDocListResponse() {
  // @@protoc_insertion_point(destructor:subscribe.SubscribeDocListResponse)
  SharedDtor();
}

void SubscribeDocListResponse::SharedDtor() {
  if (this != &SubscribeDocListResponse_default_instance_.get()) {
    delete error_;
  }
}

void SubscribeDocListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubscribeDocListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubscribeDocListResponse_descriptor_;
}

const SubscribeDocListResponse& SubscribeDocListResponse::default_instance() {
  protobuf_InitDefaults_subscribe_2fmsg_5fsubscribe_5fdoc_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SubscribeDocListResponse> SubscribeDocListResponse_default_instance_;

SubscribeDocListResponse* SubscribeDocListResponse::New(::google::protobuf::Arena* arena) const {
  SubscribeDocListResponse* n = new SubscribeDocListResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SubscribeDocListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:subscribe.SubscribeDocListResponse)
  if (GetArenaNoVirtual() == NULL && error_ != NULL) delete error_;
  error_ = NULL;
  has_more_ = false;
  subscribe_doc_.Clear();
}

bool SubscribeDocListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:subscribe.SubscribeDocListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .subscribe.SubscribeDocListResponse.SubscribeDocMessage subscribe_doc = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_subscribe_doc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_subscribe_doc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_subscribe_doc;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional .grpcCommon.GrpcError error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_has_more;
        break;
      }

      // optional bool has_more = 3;
      case 3: {
        if (tag == 24) {
         parse_has_more:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_more_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:subscribe.SubscribeDocListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:subscribe.SubscribeDocListResponse)
  return false;
#undef DO_
}

void SubscribeDocListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:subscribe.SubscribeDocListResponse)
  // repeated .subscribe.SubscribeDocListResponse.SubscribeDocMessage subscribe_doc = 1;
  for (unsigned int i = 0, n = this->subscribe_doc_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->subscribe_doc(i), output);
  }

  // optional .grpcCommon.GrpcError error = 2;
  if (this->has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->error_, output);
  }

  // optional bool has_more = 3;
  if (this->has_more() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->has_more(), output);
  }

  // @@protoc_insertion_point(serialize_end:subscribe.SubscribeDocListResponse)
}

::google::protobuf::uint8* SubscribeDocListResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:subscribe.SubscribeDocListResponse)
  // repeated .subscribe.SubscribeDocListResponse.SubscribeDocMessage subscribe_doc = 1;
  for (unsigned int i = 0, n = this->subscribe_doc_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->subscribe_doc(i), false, target);
  }

  // optional .grpcCommon.GrpcError error = 2;
  if (this->has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->error_, false, target);
  }

  // optional bool has_more = 3;
  if (this->has_more() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->has_more(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:subscribe.SubscribeDocListResponse)
  return target;
}

size_t SubscribeDocListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:subscribe.SubscribeDocListResponse)
  size_t total_size = 0;

  // optional .grpcCommon.GrpcError error = 2;
  if (this->has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->error_);
  }

  // optional bool has_more = 3;
  if (this->has_more() != 0) {
    total_size += 1 + 1;
  }

  // repeated .subscribe.SubscribeDocListResponse.SubscribeDocMessage subscribe_doc = 1;
  {
    unsigned int count = this->subscribe_doc_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->subscribe_doc(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubscribeDocListResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:subscribe.SubscribeDocListResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SubscribeDocListResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SubscribeDocListResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:subscribe.SubscribeDocListResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:subscribe.SubscribeDocListResponse)
    UnsafeMergeFrom(*source);
  }
}

void SubscribeDocListResponse::MergeFrom(const SubscribeDocListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:subscribe.SubscribeDocListResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SubscribeDocListResponse::UnsafeMergeFrom(const SubscribeDocListResponse& from) {
  GOOGLE_DCHECK(&from != this);
  subscribe_doc_.MergeFrom(from.subscribe_doc_);
  if (from.has_error()) {
    mutable_error()->::grpcCommon::GrpcError::MergeFrom(from.error());
  }
  if (from.has_more() != 0) {
    set_has_more(from.has_more());
  }
}

void SubscribeDocListResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:subscribe.SubscribeDocListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeDocListResponse::CopyFrom(const SubscribeDocListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:subscribe.SubscribeDocListResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SubscribeDocListResponse::IsInitialized() const {

  return true;
}

void SubscribeDocListResponse::Swap(SubscribeDocListResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubscribeDocListResponse::InternalSwap(SubscribeDocListResponse* other) {
  subscribe_doc_.UnsafeArenaSwap(&other->subscribe_doc_);
  std::swap(error_, other->error_);
  std::swap(has_more_, other->has_more_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SubscribeDocListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubscribeDocListResponse_descriptor_;
  metadata.reflection = SubscribeDocListResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SubscribeDocListResponse_SubscribeDocMessage

// optional string doc_id = 1;
void SubscribeDocListResponse_SubscribeDocMessage::clear_doc_id() {
  doc_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SubscribeDocListResponse_SubscribeDocMessage::doc_id() const {
  // @@protoc_insertion_point(field_get:subscribe.SubscribeDocListResponse.SubscribeDocMessage.doc_id)
  return doc_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SubscribeDocListResponse_SubscribeDocMessage::set_doc_id(const ::std::string& value) {
  
  doc_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:subscribe.SubscribeDocListResponse.SubscribeDocMessage.doc_id)
}
void SubscribeDocListResponse_SubscribeDocMessage::set_doc_id(const char* value) {
  
  doc_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:subscribe.SubscribeDocListResponse.SubscribeDocMessage.doc_id)
}
void SubscribeDocListResponse_SubscribeDocMessage::set_doc_id(const char* value, size_t size) {
  
  doc_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:subscribe.SubscribeDocListResponse.SubscribeDocMessage.doc_id)
}
::std::string* SubscribeDocListResponse_SubscribeDocMessage::mutable_doc_id() {
  
  // @@protoc_insertion_point(field_mutable:subscribe.SubscribeDocListResponse.SubscribeDocMessage.doc_id)
  return doc_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SubscribeDocListResponse_SubscribeDocMessage::release_doc_id() {
  // @@protoc_insertion_point(field_release:subscribe.SubscribeDocListResponse.SubscribeDocMessage.doc_id)
  
  return doc_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SubscribeDocListResponse_SubscribeDocMessage::set_allocated_doc_id(::std::string* doc_id) {
  if (doc_id != NULL) {
    
  } else {
    
  }
  doc_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), doc_id);
  // @@protoc_insertion_point(field_set_allocated:subscribe.SubscribeDocListResponse.SubscribeDocMessage.doc_id)
}

// optional string subscribe_id = 2;
void SubscribeDocListResponse_SubscribeDocMessage::clear_subscribe_id() {
  subscribe_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SubscribeDocListResponse_SubscribeDocMessage::subscribe_id() const {
  // @@protoc_insertion_point(field_get:subscribe.SubscribeDocListResponse.SubscribeDocMessage.subscribe_id)
  return subscribe_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SubscribeDocListResponse_SubscribeDocMessage::set_subscribe_id(const ::std::string& value) {
  
  subscribe_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:subscribe.SubscribeDocListResponse.SubscribeDocMessage.subscribe_id)
}
void SubscribeDocListResponse_SubscribeDocMessage::set_subscribe_id(const char* value) {
  
  subscribe_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:subscribe.SubscribeDocListResponse.SubscribeDocMessage.subscribe_id)
}
void SubscribeDocListResponse_SubscribeDocMessage::set_subscribe_id(const char* value, size_t size) {
  
  subscribe_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:subscribe.SubscribeDocListResponse.SubscribeDocMessage.subscribe_id)
}
::std::string* SubscribeDocListResponse_SubscribeDocMessage::mutable_subscribe_id() {
  
  // @@protoc_insertion_point(field_mutable:subscribe.SubscribeDocListResponse.SubscribeDocMessage.subscribe_id)
  return subscribe_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SubscribeDocListResponse_SubscribeDocMessage::release_subscribe_id() {
  // @@protoc_insertion_point(field_release:subscribe.SubscribeDocListResponse.SubscribeDocMessage.subscribe_id)
  
  return subscribe_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SubscribeDocListResponse_SubscribeDocMessage::set_allocated_subscribe_id(::std::string* subscribe_id) {
  if (subscribe_id != NULL) {
    
  } else {
    
  }
  subscribe_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subscribe_id);
  // @@protoc_insertion_point(field_set_allocated:subscribe.SubscribeDocListResponse.SubscribeDocMessage.subscribe_id)
}

// optional string docu_type = 3;
void SubscribeDocListResponse_SubscribeDocMessage::clear_docu_type() {
  docu_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SubscribeDocListResponse_SubscribeDocMessage::docu_type() const {
  // @@protoc_insertion_point(field_get:subscribe.SubscribeDocListResponse.SubscribeDocMessage.docu_type)
  return docu_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SubscribeDocListResponse_SubscribeDocMessage::set_docu_type(const ::std::string& value) {
  
  docu_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:subscribe.SubscribeDocListResponse.SubscribeDocMessage.docu_type)
}
void SubscribeDocListResponse_SubscribeDocMessage::set_docu_type(const char* value) {
  
  docu_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:subscribe.SubscribeDocListResponse.SubscribeDocMessage.docu_type)
}
void SubscribeDocListResponse_SubscribeDocMessage::set_docu_type(const char* value, size_t size) {
  
  docu_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:subscribe.SubscribeDocListResponse.SubscribeDocMessage.docu_type)
}
::std::string* SubscribeDocListResponse_SubscribeDocMessage::mutable_docu_type() {
  
  // @@protoc_insertion_point(field_mutable:subscribe.SubscribeDocListResponse.SubscribeDocMessage.docu_type)
  return docu_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SubscribeDocListResponse_SubscribeDocMessage::release_docu_type() {
  // @@protoc_insertion_point(field_release:subscribe.SubscribeDocListResponse.SubscribeDocMessage.docu_type)
  
  return docu_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SubscribeDocListResponse_SubscribeDocMessage::set_allocated_docu_type(::std::string* docu_type) {
  if (docu_type != NULL) {
    
  } else {
    
  }
  docu_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), docu_type);
  // @@protoc_insertion_point(field_set_allocated:subscribe.SubscribeDocListResponse.SubscribeDocMessage.docu_type)
}

// optional string docu_title = 4;
void SubscribeDocListResponse_SubscribeDocMessage::clear_docu_title() {
  docu_title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SubscribeDocListResponse_SubscribeDocMessage::docu_title() const {
  // @@protoc_insertion_point(field_get:subscribe.SubscribeDocListResponse.SubscribeDocMessage.docu_title)
  return docu_title_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SubscribeDocListResponse_SubscribeDocMessage::set_docu_title(const ::std::string& value) {
  
  docu_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:subscribe.SubscribeDocListResponse.SubscribeDocMessage.docu_title)
}
void SubscribeDocListResponse_SubscribeDocMessage::set_docu_title(const char* value) {
  
  docu_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:subscribe.SubscribeDocListResponse.SubscribeDocMessage.docu_title)
}
void SubscribeDocListResponse_SubscribeDocMessage::set_docu_title(const char* value, size_t size) {
  
  docu_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:subscribe.SubscribeDocListResponse.SubscribeDocMessage.docu_title)
}
::std::string* SubscribeDocListResponse_SubscribeDocMessage::mutable_docu_title() {
  
  // @@protoc_insertion_point(field_mutable:subscribe.SubscribeDocListResponse.SubscribeDocMessage.docu_title)
  return docu_title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SubscribeDocListResponse_SubscribeDocMessage::release_docu_title() {
  // @@protoc_insertion_point(field_release:subscribe.SubscribeDocListResponse.SubscribeDocMessage.docu_title)
  
  return docu_title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SubscribeDocListResponse_SubscribeDocMessage::set_allocated_docu_title(::std::string* docu_title) {
  if (docu_title != NULL) {
    
  } else {
    
  }
  docu_title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), docu_title);
  // @@protoc_insertion_point(field_set_allocated:subscribe.SubscribeDocListResponse.SubscribeDocMessage.docu_title)
}

// optional string docu_author = 5;
void SubscribeDocListResponse_SubscribeDocMessage::clear_docu_author() {
  docu_author_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SubscribeDocListResponse_SubscribeDocMessage::docu_author() const {
  // @@protoc_insertion_point(field_get:subscribe.SubscribeDocListResponse.SubscribeDocMessage.docu_author)
  return docu_author_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SubscribeDocListResponse_SubscribeDocMessage::set_docu_author(const ::std::string& value) {
  
  docu_author_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:subscribe.SubscribeDocListResponse.SubscribeDocMessage.docu_author)
}
void SubscribeDocListResponse_SubscribeDocMessage::set_docu_author(const char* value) {
  
  docu_author_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:subscribe.SubscribeDocListResponse.SubscribeDocMessage.docu_author)
}
void SubscribeDocListResponse_SubscribeDocMessage::set_docu_author(const char* value, size_t size) {
  
  docu_author_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:subscribe.SubscribeDocListResponse.SubscribeDocMessage.docu_author)
}
::std::string* SubscribeDocListResponse_SubscribeDocMessage::mutable_docu_author() {
  
  // @@protoc_insertion_point(field_mutable:subscribe.SubscribeDocListResponse.SubscribeDocMessage.docu_author)
  return docu_author_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SubscribeDocListResponse_SubscribeDocMessage::release_docu_author() {
  // @@protoc_insertion_point(field_release:subscribe.SubscribeDocListResponse.SubscribeDocMessage.docu_author)
  
  return docu_author_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SubscribeDocListResponse_SubscribeDocMessage::set_allocated_docu_author(::std::string* docu_author) {
  if (docu_author != NULL) {
    
  } else {
    
  }
  docu_author_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), docu_author);
  // @@protoc_insertion_point(field_set_allocated:subscribe.SubscribeDocListResponse.SubscribeDocMessage.docu_author)
}

// optional string publish_time = 6;
void SubscribeDocListResponse_SubscribeDocMessage::clear_publish_time() {
  publish_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SubscribeDocListResponse_SubscribeDocMessage::publish_time() const {
  // @@protoc_insertion_point(field_get:subscribe.SubscribeDocListResponse.SubscribeDocMessage.publish_time)
  return publish_time_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SubscribeDocListResponse_SubscribeDocMessage::set_publish_time(const ::std::string& value) {
  
  publish_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:subscribe.SubscribeDocListResponse.SubscribeDocMessage.publish_time)
}
void SubscribeDocListResponse_SubscribeDocMessage::set_publish_time(const char* value) {
  
  publish_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:subscribe.SubscribeDocListResponse.SubscribeDocMessage.publish_time)
}
void SubscribeDocListResponse_SubscribeDocMessage::set_publish_time(const char* value, size_t size) {
  
  publish_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:subscribe.SubscribeDocListResponse.SubscribeDocMessage.publish_time)
}
::std::string* SubscribeDocListResponse_SubscribeDocMessage::mutable_publish_time() {
  
  // @@protoc_insertion_point(field_mutable:subscribe.SubscribeDocListResponse.SubscribeDocMessage.publish_time)
  return publish_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SubscribeDocListResponse_SubscribeDocMessage::release_publish_time() {
  // @@protoc_insertion_point(field_release:subscribe.SubscribeDocListResponse.SubscribeDocMessage.publish_time)
  
  return publish_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SubscribeDocListResponse_SubscribeDocMessage::set_allocated_publish_time(::std::string* publish_time) {
  if (publish_time != NULL) {
    
  } else {
    
  }
  publish_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), publish_time);
  // @@protoc_insertion_point(field_set_allocated:subscribe.SubscribeDocListResponse.SubscribeDocMessage.publish_time)
}

// optional string is_buy = 7;
void SubscribeDocListResponse_SubscribeDocMessage::clear_is_buy() {
  is_buy_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SubscribeDocListResponse_SubscribeDocMessage::is_buy() const {
  // @@protoc_insertion_point(field_get:subscribe.SubscribeDocListResponse.SubscribeDocMessage.is_buy)
  return is_buy_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SubscribeDocListResponse_SubscribeDocMessage::set_is_buy(const ::std::string& value) {
  
  is_buy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:subscribe.SubscribeDocListResponse.SubscribeDocMessage.is_buy)
}
void SubscribeDocListResponse_SubscribeDocMessage::set_is_buy(const char* value) {
  
  is_buy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:subscribe.SubscribeDocListResponse.SubscribeDocMessage.is_buy)
}
void SubscribeDocListResponse_SubscribeDocMessage::set_is_buy(const char* value, size_t size) {
  
  is_buy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:subscribe.SubscribeDocListResponse.SubscribeDocMessage.is_buy)
}
::std::string* SubscribeDocListResponse_SubscribeDocMessage::mutable_is_buy() {
  
  // @@protoc_insertion_point(field_mutable:subscribe.SubscribeDocListResponse.SubscribeDocMessage.is_buy)
  return is_buy_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SubscribeDocListResponse_SubscribeDocMessage::release_is_buy() {
  // @@protoc_insertion_point(field_release:subscribe.SubscribeDocListResponse.SubscribeDocMessage.is_buy)
  
  return is_buy_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SubscribeDocListResponse_SubscribeDocMessage::set_allocated_is_buy(::std::string* is_buy) {
  if (is_buy != NULL) {
    
  } else {
    
  }
  is_buy_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), is_buy);
  // @@protoc_insertion_point(field_set_allocated:subscribe.SubscribeDocListResponse.SubscribeDocMessage.is_buy)
}

inline const SubscribeDocListResponse_SubscribeDocMessage* SubscribeDocListResponse_SubscribeDocMessage::internal_default_instance() {
  return &SubscribeDocListResponse_SubscribeDocMessage_default_instance_.get();
}
// -------------------------------------------------------------------

// SubscribeDocListResponse

// repeated .subscribe.SubscribeDocListResponse.SubscribeDocMessage subscribe_doc = 1;
int SubscribeDocListResponse::subscribe_doc_size() const {
  return subscribe_doc_.size();
}
void SubscribeDocListResponse::clear_subscribe_doc() {
  subscribe_doc_.Clear();
}
const ::subscribe::SubscribeDocListResponse_SubscribeDocMessage& SubscribeDocListResponse::subscribe_doc(int index) const {
  // @@protoc_insertion_point(field_get:subscribe.SubscribeDocListResponse.subscribe_doc)
  return subscribe_doc_.Get(index);
}
::subscribe::SubscribeDocListResponse_SubscribeDocMessage* SubscribeDocListResponse::mutable_subscribe_doc(int index) {
  // @@protoc_insertion_point(field_mutable:subscribe.SubscribeDocListResponse.subscribe_doc)
  return subscribe_doc_.Mutable(index);
}
::subscribe::SubscribeDocListResponse_SubscribeDocMessage* SubscribeDocListResponse::add_subscribe_doc() {
  // @@protoc_insertion_point(field_add:subscribe.SubscribeDocListResponse.subscribe_doc)
  return subscribe_doc_.Add();
}
::google::protobuf::RepeatedPtrField< ::subscribe::SubscribeDocListResponse_SubscribeDocMessage >*
SubscribeDocListResponse::mutable_subscribe_doc() {
  // @@protoc_insertion_point(field_mutable_list:subscribe.SubscribeDocListResponse.subscribe_doc)
  return &subscribe_doc_;
}
const ::google::protobuf::RepeatedPtrField< ::subscribe::SubscribeDocListResponse_SubscribeDocMessage >&
SubscribeDocListResponse::subscribe_doc() const {
  // @@protoc_insertion_point(field_list:subscribe.SubscribeDocListResponse.subscribe_doc)
  return subscribe_doc_;
}

// optional .grpcCommon.GrpcError error = 2;
bool SubscribeDocListResponse::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
void SubscribeDocListResponse::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) delete error_;
  error_ = NULL;
}
const ::grpcCommon::GrpcError& SubscribeDocListResponse::error() const {
  // @@protoc_insertion_point(field_get:subscribe.SubscribeDocListResponse.error)
  return error_ != NULL ? *error_
                         : *::grpcCommon::GrpcError::internal_default_instance();
}
::grpcCommon::GrpcError* SubscribeDocListResponse::mutable_error() {
  
  if (error_ == NULL) {
    error_ = new ::grpcCommon::GrpcError;
  }
  // @@protoc_insertion_point(field_mutable:subscribe.SubscribeDocListResponse.error)
  return error_;
}
::grpcCommon::GrpcError* SubscribeDocListResponse::release_error() {
  // @@protoc_insertion_point(field_release:subscribe.SubscribeDocListResponse.error)
  
  ::grpcCommon::GrpcError* temp = error_;
  error_ = NULL;
  return temp;
}
void SubscribeDocListResponse::set_allocated_error(::grpcCommon::GrpcError* error) {
  delete error_;
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:subscribe.SubscribeDocListResponse.error)
}

// optional bool has_more = 3;
void SubscribeDocListResponse::clear_has_more() {
  has_more_ = false;
}
bool SubscribeDocListResponse::has_more() const {
  // @@protoc_insertion_point(field_get:subscribe.SubscribeDocListResponse.has_more)
  return has_more_;
}
void SubscribeDocListResponse::set_has_more(bool value) {
  
  has_more_ = value;
  // @@protoc_insertion_point(field_set:subscribe.SubscribeDocListResponse.has_more)
}

inline const SubscribeDocListResponse* SubscribeDocListResponse::internal_default_instance() {
  return &SubscribeDocListResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace subscribe

// @@protoc_insertion_point(global_scope)
