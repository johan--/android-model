// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: subscribe/msg_subscribe_doc.proto

#ifndef PROTOBUF_subscribe_2fmsg_5fsubscribe_5fdoc_2eproto__INCLUDED
#define PROTOBUF_subscribe_2fmsg_5fsubscribe_5fdoc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
#include "subscribe/msg_subscribe_keyword.pb.h"
#include "grpcCommon/msg_error.pb.h"
// @@protoc_insertion_point(includes)

namespace subscribe {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_subscribe_2fmsg_5fsubscribe_5fdoc_2eproto();
void protobuf_InitDefaults_subscribe_2fmsg_5fsubscribe_5fdoc_2eproto();
void protobuf_AssignDesc_subscribe_2fmsg_5fsubscribe_5fdoc_2eproto();
void protobuf_ShutdownFile_subscribe_2fmsg_5fsubscribe_5fdoc_2eproto();

class SubscribeDocListRequest;
class SubscribeDocListResponse;
class SubscribeDocListResponse_SubscribeDocMessage;

// ===================================================================

class SubscribeDocListRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:subscribe.SubscribeDocListRequest) */ {
 public:
  SubscribeDocListRequest();
  virtual ~SubscribeDocListRequest();

  SubscribeDocListRequest(const SubscribeDocListRequest& from);

  inline SubscribeDocListRequest& operator=(const SubscribeDocListRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SubscribeDocListRequest& default_instance();

  static const SubscribeDocListRequest* internal_default_instance();

  void Swap(SubscribeDocListRequest* other);

  // implements Message ----------------------------------------------

  inline SubscribeDocListRequest* New() const { return New(NULL); }

  SubscribeDocListRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SubscribeDocListRequest& from);
  void MergeFrom(const SubscribeDocListRequest& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SubscribeDocListRequest* other);
  void UnsafeMergeFrom(const SubscribeDocListRequest& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .subscribe.SubscribeKeywordMessage subscribe_keyword = 1;
  bool has_subscribe_keyword() const;
  void clear_subscribe_keyword();
  static const int kSubscribeKeywordFieldNumber = 1;
  const ::subscribe::SubscribeKeywordMessage& subscribe_keyword() const;
  ::subscribe::SubscribeKeywordMessage* mutable_subscribe_keyword();
  ::subscribe::SubscribeKeywordMessage* release_subscribe_keyword();
  void set_allocated_subscribe_keyword(::subscribe::SubscribeKeywordMessage* subscribe_keyword);

  // optional int32 page_number = 2;
  void clear_page_number();
  static const int kPageNumberFieldNumber = 2;
  ::google::protobuf::int32 page_number() const;
  void set_page_number(::google::protobuf::int32 value);

  // optional int32 page_size = 3;
  void clear_page_size();
  static const int kPageSizeFieldNumber = 3;
  ::google::protobuf::int32 page_size() const;
  void set_page_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:subscribe.SubscribeDocListRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::subscribe::SubscribeKeywordMessage* subscribe_keyword_;
  ::google::protobuf::int32 page_number_;
  ::google::protobuf::int32 page_size_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_subscribe_2fmsg_5fsubscribe_5fdoc_2eproto_impl();
  friend void  protobuf_AddDesc_subscribe_2fmsg_5fsubscribe_5fdoc_2eproto_impl();
  friend void protobuf_AssignDesc_subscribe_2fmsg_5fsubscribe_5fdoc_2eproto();
  friend void protobuf_ShutdownFile_subscribe_2fmsg_5fsubscribe_5fdoc_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<SubscribeDocListRequest> SubscribeDocListRequest_default_instance_;

// -------------------------------------------------------------------

class SubscribeDocListResponse_SubscribeDocMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:subscribe.SubscribeDocListResponse.SubscribeDocMessage) */ {
 public:
  SubscribeDocListResponse_SubscribeDocMessage();
  virtual ~SubscribeDocListResponse_SubscribeDocMessage();

  SubscribeDocListResponse_SubscribeDocMessage(const SubscribeDocListResponse_SubscribeDocMessage& from);

  inline SubscribeDocListResponse_SubscribeDocMessage& operator=(const SubscribeDocListResponse_SubscribeDocMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SubscribeDocListResponse_SubscribeDocMessage& default_instance();

  static const SubscribeDocListResponse_SubscribeDocMessage* internal_default_instance();

  void Swap(SubscribeDocListResponse_SubscribeDocMessage* other);

  // implements Message ----------------------------------------------

  inline SubscribeDocListResponse_SubscribeDocMessage* New() const { return New(NULL); }

  SubscribeDocListResponse_SubscribeDocMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SubscribeDocListResponse_SubscribeDocMessage& from);
  void MergeFrom(const SubscribeDocListResponse_SubscribeDocMessage& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SubscribeDocListResponse_SubscribeDocMessage* other);
  void UnsafeMergeFrom(const SubscribeDocListResponse_SubscribeDocMessage& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string doc_id = 1;
  void clear_doc_id();
  static const int kDocIdFieldNumber = 1;
  const ::std::string& doc_id() const;
  void set_doc_id(const ::std::string& value);
  void set_doc_id(const char* value);
  void set_doc_id(const char* value, size_t size);
  ::std::string* mutable_doc_id();
  ::std::string* release_doc_id();
  void set_allocated_doc_id(::std::string* doc_id);

  // optional string subscribe_id = 2;
  void clear_subscribe_id();
  static const int kSubscribeIdFieldNumber = 2;
  const ::std::string& subscribe_id() const;
  void set_subscribe_id(const ::std::string& value);
  void set_subscribe_id(const char* value);
  void set_subscribe_id(const char* value, size_t size);
  ::std::string* mutable_subscribe_id();
  ::std::string* release_subscribe_id();
  void set_allocated_subscribe_id(::std::string* subscribe_id);

  // optional string docu_type = 3;
  void clear_docu_type();
  static const int kDocuTypeFieldNumber = 3;
  const ::std::string& docu_type() const;
  void set_docu_type(const ::std::string& value);
  void set_docu_type(const char* value);
  void set_docu_type(const char* value, size_t size);
  ::std::string* mutable_docu_type();
  ::std::string* release_docu_type();
  void set_allocated_docu_type(::std::string* docu_type);

  // optional string docu_title = 4;
  void clear_docu_title();
  static const int kDocuTitleFieldNumber = 4;
  const ::std::string& docu_title() const;
  void set_docu_title(const ::std::string& value);
  void set_docu_title(const char* value);
  void set_docu_title(const char* value, size_t size);
  ::std::string* mutable_docu_title();
  ::std::string* release_docu_title();
  void set_allocated_docu_title(::std::string* docu_title);

  // optional string docu_author = 5;
  void clear_docu_author();
  static const int kDocuAuthorFieldNumber = 5;
  const ::std::string& docu_author() const;
  void set_docu_author(const ::std::string& value);
  void set_docu_author(const char* value);
  void set_docu_author(const char* value, size_t size);
  ::std::string* mutable_docu_author();
  ::std::string* release_docu_author();
  void set_allocated_docu_author(::std::string* docu_author);

  // optional string publish_time = 6;
  void clear_publish_time();
  static const int kPublishTimeFieldNumber = 6;
  const ::std::string& publish_time() const;
  void set_publish_time(const ::std::string& value);
  void set_publish_time(const char* value);
  void set_publish_time(const char* value, size_t size);
  ::std::string* mutable_publish_time();
  ::std::string* release_publish_time();
  void set_allocated_publish_time(::std::string* publish_time);

  // optional string is_buy = 7;
  void clear_is_buy();
  static const int kIsBuyFieldNumber = 7;
  const ::std::string& is_buy() const;
  void set_is_buy(const ::std::string& value);
  void set_is_buy(const char* value);
  void set_is_buy(const char* value, size_t size);
  ::std::string* mutable_is_buy();
  ::std::string* release_is_buy();
  void set_allocated_is_buy(::std::string* is_buy);

  // optional string add_time = 8;
  void clear_add_time();
  static const int kAddTimeFieldNumber = 8;
  const ::std::string& add_time() const;
  void set_add_time(const ::std::string& value);
  void set_add_time(const char* value);
  void set_add_time(const char* value, size_t size);
  ::std::string* mutable_add_time();
  ::std::string* release_add_time();
  void set_allocated_add_time(::std::string* add_time);

  // optional string doc_source = 9;
  void clear_doc_source();
  static const int kDocSourceFieldNumber = 9;
  const ::std::string& doc_source() const;
  void set_doc_source(const ::std::string& value);
  void set_doc_source(const char* value);
  void set_doc_source(const char* value, size_t size);
  ::std::string* mutable_doc_source();
  ::std::string* release_doc_source();
  void set_allocated_doc_source(::std::string* doc_source);

  // optional string keyword = 10;
  void clear_keyword();
  static const int kKeywordFieldNumber = 10;
  const ::std::string& keyword() const;
  void set_keyword(const ::std::string& value);
  void set_keyword(const char* value);
  void set_keyword(const char* value, size_t size);
  ::std::string* mutable_keyword();
  ::std::string* release_keyword();
  void set_allocated_keyword(::std::string* keyword);

  // @@protoc_insertion_point(class_scope:subscribe.SubscribeDocListResponse.SubscribeDocMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr doc_id_;
  ::google::protobuf::internal::ArenaStringPtr subscribe_id_;
  ::google::protobuf::internal::ArenaStringPtr docu_type_;
  ::google::protobuf::internal::ArenaStringPtr docu_title_;
  ::google::protobuf::internal::ArenaStringPtr docu_author_;
  ::google::protobuf::internal::ArenaStringPtr publish_time_;
  ::google::protobuf::internal::ArenaStringPtr is_buy_;
  ::google::protobuf::internal::ArenaStringPtr add_time_;
  ::google::protobuf::internal::ArenaStringPtr doc_source_;
  ::google::protobuf::internal::ArenaStringPtr keyword_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_subscribe_2fmsg_5fsubscribe_5fdoc_2eproto_impl();
  friend void  protobuf_AddDesc_subscribe_2fmsg_5fsubscribe_5fdoc_2eproto_impl();
  friend void protobuf_AssignDesc_subscribe_2fmsg_5fsubscribe_5fdoc_2eproto();
  friend void protobuf_ShutdownFile_subscribe_2fmsg_5fsubscribe_5fdoc_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<SubscribeDocListResponse_SubscribeDocMessage> SubscribeDocListResponse_SubscribeDocMessage_default_instance_;

// -------------------------------------------------------------------

class SubscribeDocListResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:subscribe.SubscribeDocListResponse) */ {
 public:
  SubscribeDocListResponse();
  virtual ~SubscribeDocListResponse();

  SubscribeDocListResponse(const SubscribeDocListResponse& from);

  inline SubscribeDocListResponse& operator=(const SubscribeDocListResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SubscribeDocListResponse& default_instance();

  static const SubscribeDocListResponse* internal_default_instance();

  void Swap(SubscribeDocListResponse* other);

  // implements Message ----------------------------------------------

  inline SubscribeDocListResponse* New() const { return New(NULL); }

  SubscribeDocListResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SubscribeDocListResponse& from);
  void MergeFrom(const SubscribeDocListResponse& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SubscribeDocListResponse* other);
  void UnsafeMergeFrom(const SubscribeDocListResponse& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SubscribeDocListResponse_SubscribeDocMessage SubscribeDocMessage;

  // accessors -------------------------------------------------------

  // repeated .subscribe.SubscribeDocListResponse.SubscribeDocMessage subscribe_doc = 1;
  int subscribe_doc_size() const;
  void clear_subscribe_doc();
  static const int kSubscribeDocFieldNumber = 1;
  const ::subscribe::SubscribeDocListResponse_SubscribeDocMessage& subscribe_doc(int index) const;
  ::subscribe::SubscribeDocListResponse_SubscribeDocMessage* mutable_subscribe_doc(int index);
  ::subscribe::SubscribeDocListResponse_SubscribeDocMessage* add_subscribe_doc();
  ::google::protobuf::RepeatedPtrField< ::subscribe::SubscribeDocListResponse_SubscribeDocMessage >*
      mutable_subscribe_doc();
  const ::google::protobuf::RepeatedPtrField< ::subscribe::SubscribeDocListResponse_SubscribeDocMessage >&
      subscribe_doc() const;

  // optional .grpcCommon.GrpcError error = 2;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 2;
  const ::grpcCommon::GrpcError& error() const;
  ::grpcCommon::GrpcError* mutable_error();
  ::grpcCommon::GrpcError* release_error();
  void set_allocated_error(::grpcCommon::GrpcError* error);

  // optional bool has_more = 3;
  void clear_has_more();
  static const int kHasMoreFieldNumber = 3;
  bool has_more() const;
  void set_has_more(bool value);

  // @@protoc_insertion_point(class_scope:subscribe.SubscribeDocListResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::subscribe::SubscribeDocListResponse_SubscribeDocMessage > subscribe_doc_;
  ::grpcCommon::GrpcError* error_;
  bool has_more_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_subscribe_2fmsg_5fsubscribe_5fdoc_2eproto_impl();
  friend void  protobuf_AddDesc_subscribe_2fmsg_5fsubscribe_5fdoc_2eproto_impl();
  friend void protobuf_AssignDesc_subscribe_2fmsg_5fsubscribe_5fdoc_2eproto();
  friend void protobuf_ShutdownFile_subscribe_2fmsg_5fsubscribe_5fdoc_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<SubscribeDocListResponse> SubscribeDocListResponse_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// SubscribeDocListRequest

// optional .subscribe.SubscribeKeywordMessage subscribe_keyword = 1;
inline bool SubscribeDocListRequest::has_subscribe_keyword() const {
  return this != internal_default_instance() && subscribe_keyword_ != NULL;
}
inline void SubscribeDocListRequest::clear_subscribe_keyword() {
  if (GetArenaNoVirtual() == NULL && subscribe_keyword_ != NULL) delete subscribe_keyword_;
  subscribe_keyword_ = NULL;
}
inline const ::subscribe::SubscribeKeywordMessage& SubscribeDocListRequest::subscribe_keyword() const {
  // @@protoc_insertion_point(field_get:subscribe.SubscribeDocListRequest.subscribe_keyword)
  return subscribe_keyword_ != NULL ? *subscribe_keyword_
                         : *::subscribe::SubscribeKeywordMessage::internal_default_instance();
}
inline ::subscribe::SubscribeKeywordMessage* SubscribeDocListRequest::mutable_subscribe_keyword() {
  
  if (subscribe_keyword_ == NULL) {
    subscribe_keyword_ = new ::subscribe::SubscribeKeywordMessage;
  }
  // @@protoc_insertion_point(field_mutable:subscribe.SubscribeDocListRequest.subscribe_keyword)
  return subscribe_keyword_;
}
inline ::subscribe::SubscribeKeywordMessage* SubscribeDocListRequest::release_subscribe_keyword() {
  // @@protoc_insertion_point(field_release:subscribe.SubscribeDocListRequest.subscribe_keyword)
  
  ::subscribe::SubscribeKeywordMessage* temp = subscribe_keyword_;
  subscribe_keyword_ = NULL;
  return temp;
}
inline void SubscribeDocListRequest::set_allocated_subscribe_keyword(::subscribe::SubscribeKeywordMessage* subscribe_keyword) {
  delete subscribe_keyword_;
  subscribe_keyword_ = subscribe_keyword;
  if (subscribe_keyword) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:subscribe.SubscribeDocListRequest.subscribe_keyword)
}

// optional int32 page_number = 2;
inline void SubscribeDocListRequest::clear_page_number() {
  page_number_ = 0;
}
inline ::google::protobuf::int32 SubscribeDocListRequest::page_number() const {
  // @@protoc_insertion_point(field_get:subscribe.SubscribeDocListRequest.page_number)
  return page_number_;
}
inline void SubscribeDocListRequest::set_page_number(::google::protobuf::int32 value) {
  
  page_number_ = value;
  // @@protoc_insertion_point(field_set:subscribe.SubscribeDocListRequest.page_number)
}

// optional int32 page_size = 3;
inline void SubscribeDocListRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::google::protobuf::int32 SubscribeDocListRequest::page_size() const {
  // @@protoc_insertion_point(field_get:subscribe.SubscribeDocListRequest.page_size)
  return page_size_;
}
inline void SubscribeDocListRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:subscribe.SubscribeDocListRequest.page_size)
}

inline const SubscribeDocListRequest* SubscribeDocListRequest::internal_default_instance() {
  return &SubscribeDocListRequest_default_instance_.get();
}
// -------------------------------------------------------------------

// SubscribeDocListResponse_SubscribeDocMessage

// optional string doc_id = 1;
inline void SubscribeDocListResponse_SubscribeDocMessage::clear_doc_id() {
  doc_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SubscribeDocListResponse_SubscribeDocMessage::doc_id() const {
  // @@protoc_insertion_point(field_get:subscribe.SubscribeDocListResponse.SubscribeDocMessage.doc_id)
  return doc_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubscribeDocListResponse_SubscribeDocMessage::set_doc_id(const ::std::string& value) {
  
  doc_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:subscribe.SubscribeDocListResponse.SubscribeDocMessage.doc_id)
}
inline void SubscribeDocListResponse_SubscribeDocMessage::set_doc_id(const char* value) {
  
  doc_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:subscribe.SubscribeDocListResponse.SubscribeDocMessage.doc_id)
}
inline void SubscribeDocListResponse_SubscribeDocMessage::set_doc_id(const char* value, size_t size) {
  
  doc_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:subscribe.SubscribeDocListResponse.SubscribeDocMessage.doc_id)
}
inline ::std::string* SubscribeDocListResponse_SubscribeDocMessage::mutable_doc_id() {
  
  // @@protoc_insertion_point(field_mutable:subscribe.SubscribeDocListResponse.SubscribeDocMessage.doc_id)
  return doc_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SubscribeDocListResponse_SubscribeDocMessage::release_doc_id() {
  // @@protoc_insertion_point(field_release:subscribe.SubscribeDocListResponse.SubscribeDocMessage.doc_id)
  
  return doc_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubscribeDocListResponse_SubscribeDocMessage::set_allocated_doc_id(::std::string* doc_id) {
  if (doc_id != NULL) {
    
  } else {
    
  }
  doc_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), doc_id);
  // @@protoc_insertion_point(field_set_allocated:subscribe.SubscribeDocListResponse.SubscribeDocMessage.doc_id)
}

// optional string subscribe_id = 2;
inline void SubscribeDocListResponse_SubscribeDocMessage::clear_subscribe_id() {
  subscribe_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SubscribeDocListResponse_SubscribeDocMessage::subscribe_id() const {
  // @@protoc_insertion_point(field_get:subscribe.SubscribeDocListResponse.SubscribeDocMessage.subscribe_id)
  return subscribe_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubscribeDocListResponse_SubscribeDocMessage::set_subscribe_id(const ::std::string& value) {
  
  subscribe_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:subscribe.SubscribeDocListResponse.SubscribeDocMessage.subscribe_id)
}
inline void SubscribeDocListResponse_SubscribeDocMessage::set_subscribe_id(const char* value) {
  
  subscribe_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:subscribe.SubscribeDocListResponse.SubscribeDocMessage.subscribe_id)
}
inline void SubscribeDocListResponse_SubscribeDocMessage::set_subscribe_id(const char* value, size_t size) {
  
  subscribe_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:subscribe.SubscribeDocListResponse.SubscribeDocMessage.subscribe_id)
}
inline ::std::string* SubscribeDocListResponse_SubscribeDocMessage::mutable_subscribe_id() {
  
  // @@protoc_insertion_point(field_mutable:subscribe.SubscribeDocListResponse.SubscribeDocMessage.subscribe_id)
  return subscribe_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SubscribeDocListResponse_SubscribeDocMessage::release_subscribe_id() {
  // @@protoc_insertion_point(field_release:subscribe.SubscribeDocListResponse.SubscribeDocMessage.subscribe_id)
  
  return subscribe_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubscribeDocListResponse_SubscribeDocMessage::set_allocated_subscribe_id(::std::string* subscribe_id) {
  if (subscribe_id != NULL) {
    
  } else {
    
  }
  subscribe_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subscribe_id);
  // @@protoc_insertion_point(field_set_allocated:subscribe.SubscribeDocListResponse.SubscribeDocMessage.subscribe_id)
}

// optional string docu_type = 3;
inline void SubscribeDocListResponse_SubscribeDocMessage::clear_docu_type() {
  docu_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SubscribeDocListResponse_SubscribeDocMessage::docu_type() const {
  // @@protoc_insertion_point(field_get:subscribe.SubscribeDocListResponse.SubscribeDocMessage.docu_type)
  return docu_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubscribeDocListResponse_SubscribeDocMessage::set_docu_type(const ::std::string& value) {
  
  docu_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:subscribe.SubscribeDocListResponse.SubscribeDocMessage.docu_type)
}
inline void SubscribeDocListResponse_SubscribeDocMessage::set_docu_type(const char* value) {
  
  docu_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:subscribe.SubscribeDocListResponse.SubscribeDocMessage.docu_type)
}
inline void SubscribeDocListResponse_SubscribeDocMessage::set_docu_type(const char* value, size_t size) {
  
  docu_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:subscribe.SubscribeDocListResponse.SubscribeDocMessage.docu_type)
}
inline ::std::string* SubscribeDocListResponse_SubscribeDocMessage::mutable_docu_type() {
  
  // @@protoc_insertion_point(field_mutable:subscribe.SubscribeDocListResponse.SubscribeDocMessage.docu_type)
  return docu_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SubscribeDocListResponse_SubscribeDocMessage::release_docu_type() {
  // @@protoc_insertion_point(field_release:subscribe.SubscribeDocListResponse.SubscribeDocMessage.docu_type)
  
  return docu_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubscribeDocListResponse_SubscribeDocMessage::set_allocated_docu_type(::std::string* docu_type) {
  if (docu_type != NULL) {
    
  } else {
    
  }
  docu_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), docu_type);
  // @@protoc_insertion_point(field_set_allocated:subscribe.SubscribeDocListResponse.SubscribeDocMessage.docu_type)
}

// optional string docu_title = 4;
inline void SubscribeDocListResponse_SubscribeDocMessage::clear_docu_title() {
  docu_title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SubscribeDocListResponse_SubscribeDocMessage::docu_title() const {
  // @@protoc_insertion_point(field_get:subscribe.SubscribeDocListResponse.SubscribeDocMessage.docu_title)
  return docu_title_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubscribeDocListResponse_SubscribeDocMessage::set_docu_title(const ::std::string& value) {
  
  docu_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:subscribe.SubscribeDocListResponse.SubscribeDocMessage.docu_title)
}
inline void SubscribeDocListResponse_SubscribeDocMessage::set_docu_title(const char* value) {
  
  docu_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:subscribe.SubscribeDocListResponse.SubscribeDocMessage.docu_title)
}
inline void SubscribeDocListResponse_SubscribeDocMessage::set_docu_title(const char* value, size_t size) {
  
  docu_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:subscribe.SubscribeDocListResponse.SubscribeDocMessage.docu_title)
}
inline ::std::string* SubscribeDocListResponse_SubscribeDocMessage::mutable_docu_title() {
  
  // @@protoc_insertion_point(field_mutable:subscribe.SubscribeDocListResponse.SubscribeDocMessage.docu_title)
  return docu_title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SubscribeDocListResponse_SubscribeDocMessage::release_docu_title() {
  // @@protoc_insertion_point(field_release:subscribe.SubscribeDocListResponse.SubscribeDocMessage.docu_title)
  
  return docu_title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubscribeDocListResponse_SubscribeDocMessage::set_allocated_docu_title(::std::string* docu_title) {
  if (docu_title != NULL) {
    
  } else {
    
  }
  docu_title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), docu_title);
  // @@protoc_insertion_point(field_set_allocated:subscribe.SubscribeDocListResponse.SubscribeDocMessage.docu_title)
}

// optional string docu_author = 5;
inline void SubscribeDocListResponse_SubscribeDocMessage::clear_docu_author() {
  docu_author_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SubscribeDocListResponse_SubscribeDocMessage::docu_author() const {
  // @@protoc_insertion_point(field_get:subscribe.SubscribeDocListResponse.SubscribeDocMessage.docu_author)
  return docu_author_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubscribeDocListResponse_SubscribeDocMessage::set_docu_author(const ::std::string& value) {
  
  docu_author_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:subscribe.SubscribeDocListResponse.SubscribeDocMessage.docu_author)
}
inline void SubscribeDocListResponse_SubscribeDocMessage::set_docu_author(const char* value) {
  
  docu_author_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:subscribe.SubscribeDocListResponse.SubscribeDocMessage.docu_author)
}
inline void SubscribeDocListResponse_SubscribeDocMessage::set_docu_author(const char* value, size_t size) {
  
  docu_author_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:subscribe.SubscribeDocListResponse.SubscribeDocMessage.docu_author)
}
inline ::std::string* SubscribeDocListResponse_SubscribeDocMessage::mutable_docu_author() {
  
  // @@protoc_insertion_point(field_mutable:subscribe.SubscribeDocListResponse.SubscribeDocMessage.docu_author)
  return docu_author_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SubscribeDocListResponse_SubscribeDocMessage::release_docu_author() {
  // @@protoc_insertion_point(field_release:subscribe.SubscribeDocListResponse.SubscribeDocMessage.docu_author)
  
  return docu_author_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubscribeDocListResponse_SubscribeDocMessage::set_allocated_docu_author(::std::string* docu_author) {
  if (docu_author != NULL) {
    
  } else {
    
  }
  docu_author_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), docu_author);
  // @@protoc_insertion_point(field_set_allocated:subscribe.SubscribeDocListResponse.SubscribeDocMessage.docu_author)
}

// optional string publish_time = 6;
inline void SubscribeDocListResponse_SubscribeDocMessage::clear_publish_time() {
  publish_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SubscribeDocListResponse_SubscribeDocMessage::publish_time() const {
  // @@protoc_insertion_point(field_get:subscribe.SubscribeDocListResponse.SubscribeDocMessage.publish_time)
  return publish_time_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubscribeDocListResponse_SubscribeDocMessage::set_publish_time(const ::std::string& value) {
  
  publish_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:subscribe.SubscribeDocListResponse.SubscribeDocMessage.publish_time)
}
inline void SubscribeDocListResponse_SubscribeDocMessage::set_publish_time(const char* value) {
  
  publish_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:subscribe.SubscribeDocListResponse.SubscribeDocMessage.publish_time)
}
inline void SubscribeDocListResponse_SubscribeDocMessage::set_publish_time(const char* value, size_t size) {
  
  publish_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:subscribe.SubscribeDocListResponse.SubscribeDocMessage.publish_time)
}
inline ::std::string* SubscribeDocListResponse_SubscribeDocMessage::mutable_publish_time() {
  
  // @@protoc_insertion_point(field_mutable:subscribe.SubscribeDocListResponse.SubscribeDocMessage.publish_time)
  return publish_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SubscribeDocListResponse_SubscribeDocMessage::release_publish_time() {
  // @@protoc_insertion_point(field_release:subscribe.SubscribeDocListResponse.SubscribeDocMessage.publish_time)
  
  return publish_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubscribeDocListResponse_SubscribeDocMessage::set_allocated_publish_time(::std::string* publish_time) {
  if (publish_time != NULL) {
    
  } else {
    
  }
  publish_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), publish_time);
  // @@protoc_insertion_point(field_set_allocated:subscribe.SubscribeDocListResponse.SubscribeDocMessage.publish_time)
}

// optional string is_buy = 7;
inline void SubscribeDocListResponse_SubscribeDocMessage::clear_is_buy() {
  is_buy_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SubscribeDocListResponse_SubscribeDocMessage::is_buy() const {
  // @@protoc_insertion_point(field_get:subscribe.SubscribeDocListResponse.SubscribeDocMessage.is_buy)
  return is_buy_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubscribeDocListResponse_SubscribeDocMessage::set_is_buy(const ::std::string& value) {
  
  is_buy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:subscribe.SubscribeDocListResponse.SubscribeDocMessage.is_buy)
}
inline void SubscribeDocListResponse_SubscribeDocMessage::set_is_buy(const char* value) {
  
  is_buy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:subscribe.SubscribeDocListResponse.SubscribeDocMessage.is_buy)
}
inline void SubscribeDocListResponse_SubscribeDocMessage::set_is_buy(const char* value, size_t size) {
  
  is_buy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:subscribe.SubscribeDocListResponse.SubscribeDocMessage.is_buy)
}
inline ::std::string* SubscribeDocListResponse_SubscribeDocMessage::mutable_is_buy() {
  
  // @@protoc_insertion_point(field_mutable:subscribe.SubscribeDocListResponse.SubscribeDocMessage.is_buy)
  return is_buy_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SubscribeDocListResponse_SubscribeDocMessage::release_is_buy() {
  // @@protoc_insertion_point(field_release:subscribe.SubscribeDocListResponse.SubscribeDocMessage.is_buy)
  
  return is_buy_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubscribeDocListResponse_SubscribeDocMessage::set_allocated_is_buy(::std::string* is_buy) {
  if (is_buy != NULL) {
    
  } else {
    
  }
  is_buy_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), is_buy);
  // @@protoc_insertion_point(field_set_allocated:subscribe.SubscribeDocListResponse.SubscribeDocMessage.is_buy)
}

// optional string add_time = 8;
inline void SubscribeDocListResponse_SubscribeDocMessage::clear_add_time() {
  add_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SubscribeDocListResponse_SubscribeDocMessage::add_time() const {
  // @@protoc_insertion_point(field_get:subscribe.SubscribeDocListResponse.SubscribeDocMessage.add_time)
  return add_time_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubscribeDocListResponse_SubscribeDocMessage::set_add_time(const ::std::string& value) {
  
  add_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:subscribe.SubscribeDocListResponse.SubscribeDocMessage.add_time)
}
inline void SubscribeDocListResponse_SubscribeDocMessage::set_add_time(const char* value) {
  
  add_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:subscribe.SubscribeDocListResponse.SubscribeDocMessage.add_time)
}
inline void SubscribeDocListResponse_SubscribeDocMessage::set_add_time(const char* value, size_t size) {
  
  add_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:subscribe.SubscribeDocListResponse.SubscribeDocMessage.add_time)
}
inline ::std::string* SubscribeDocListResponse_SubscribeDocMessage::mutable_add_time() {
  
  // @@protoc_insertion_point(field_mutable:subscribe.SubscribeDocListResponse.SubscribeDocMessage.add_time)
  return add_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SubscribeDocListResponse_SubscribeDocMessage::release_add_time() {
  // @@protoc_insertion_point(field_release:subscribe.SubscribeDocListResponse.SubscribeDocMessage.add_time)
  
  return add_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubscribeDocListResponse_SubscribeDocMessage::set_allocated_add_time(::std::string* add_time) {
  if (add_time != NULL) {
    
  } else {
    
  }
  add_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), add_time);
  // @@protoc_insertion_point(field_set_allocated:subscribe.SubscribeDocListResponse.SubscribeDocMessage.add_time)
}

// optional string doc_source = 9;
inline void SubscribeDocListResponse_SubscribeDocMessage::clear_doc_source() {
  doc_source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SubscribeDocListResponse_SubscribeDocMessage::doc_source() const {
  // @@protoc_insertion_point(field_get:subscribe.SubscribeDocListResponse.SubscribeDocMessage.doc_source)
  return doc_source_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubscribeDocListResponse_SubscribeDocMessage::set_doc_source(const ::std::string& value) {
  
  doc_source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:subscribe.SubscribeDocListResponse.SubscribeDocMessage.doc_source)
}
inline void SubscribeDocListResponse_SubscribeDocMessage::set_doc_source(const char* value) {
  
  doc_source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:subscribe.SubscribeDocListResponse.SubscribeDocMessage.doc_source)
}
inline void SubscribeDocListResponse_SubscribeDocMessage::set_doc_source(const char* value, size_t size) {
  
  doc_source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:subscribe.SubscribeDocListResponse.SubscribeDocMessage.doc_source)
}
inline ::std::string* SubscribeDocListResponse_SubscribeDocMessage::mutable_doc_source() {
  
  // @@protoc_insertion_point(field_mutable:subscribe.SubscribeDocListResponse.SubscribeDocMessage.doc_source)
  return doc_source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SubscribeDocListResponse_SubscribeDocMessage::release_doc_source() {
  // @@protoc_insertion_point(field_release:subscribe.SubscribeDocListResponse.SubscribeDocMessage.doc_source)
  
  return doc_source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubscribeDocListResponse_SubscribeDocMessage::set_allocated_doc_source(::std::string* doc_source) {
  if (doc_source != NULL) {
    
  } else {
    
  }
  doc_source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), doc_source);
  // @@protoc_insertion_point(field_set_allocated:subscribe.SubscribeDocListResponse.SubscribeDocMessage.doc_source)
}

// optional string keyword = 10;
inline void SubscribeDocListResponse_SubscribeDocMessage::clear_keyword() {
  keyword_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SubscribeDocListResponse_SubscribeDocMessage::keyword() const {
  // @@protoc_insertion_point(field_get:subscribe.SubscribeDocListResponse.SubscribeDocMessage.keyword)
  return keyword_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubscribeDocListResponse_SubscribeDocMessage::set_keyword(const ::std::string& value) {
  
  keyword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:subscribe.SubscribeDocListResponse.SubscribeDocMessage.keyword)
}
inline void SubscribeDocListResponse_SubscribeDocMessage::set_keyword(const char* value) {
  
  keyword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:subscribe.SubscribeDocListResponse.SubscribeDocMessage.keyword)
}
inline void SubscribeDocListResponse_SubscribeDocMessage::set_keyword(const char* value, size_t size) {
  
  keyword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:subscribe.SubscribeDocListResponse.SubscribeDocMessage.keyword)
}
inline ::std::string* SubscribeDocListResponse_SubscribeDocMessage::mutable_keyword() {
  
  // @@protoc_insertion_point(field_mutable:subscribe.SubscribeDocListResponse.SubscribeDocMessage.keyword)
  return keyword_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SubscribeDocListResponse_SubscribeDocMessage::release_keyword() {
  // @@protoc_insertion_point(field_release:subscribe.SubscribeDocListResponse.SubscribeDocMessage.keyword)
  
  return keyword_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubscribeDocListResponse_SubscribeDocMessage::set_allocated_keyword(::std::string* keyword) {
  if (keyword != NULL) {
    
  } else {
    
  }
  keyword_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), keyword);
  // @@protoc_insertion_point(field_set_allocated:subscribe.SubscribeDocListResponse.SubscribeDocMessage.keyword)
}

inline const SubscribeDocListResponse_SubscribeDocMessage* SubscribeDocListResponse_SubscribeDocMessage::internal_default_instance() {
  return &SubscribeDocListResponse_SubscribeDocMessage_default_instance_.get();
}
// -------------------------------------------------------------------

// SubscribeDocListResponse

// repeated .subscribe.SubscribeDocListResponse.SubscribeDocMessage subscribe_doc = 1;
inline int SubscribeDocListResponse::subscribe_doc_size() const {
  return subscribe_doc_.size();
}
inline void SubscribeDocListResponse::clear_subscribe_doc() {
  subscribe_doc_.Clear();
}
inline const ::subscribe::SubscribeDocListResponse_SubscribeDocMessage& SubscribeDocListResponse::subscribe_doc(int index) const {
  // @@protoc_insertion_point(field_get:subscribe.SubscribeDocListResponse.subscribe_doc)
  return subscribe_doc_.Get(index);
}
inline ::subscribe::SubscribeDocListResponse_SubscribeDocMessage* SubscribeDocListResponse::mutable_subscribe_doc(int index) {
  // @@protoc_insertion_point(field_mutable:subscribe.SubscribeDocListResponse.subscribe_doc)
  return subscribe_doc_.Mutable(index);
}
inline ::subscribe::SubscribeDocListResponse_SubscribeDocMessage* SubscribeDocListResponse::add_subscribe_doc() {
  // @@protoc_insertion_point(field_add:subscribe.SubscribeDocListResponse.subscribe_doc)
  return subscribe_doc_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::subscribe::SubscribeDocListResponse_SubscribeDocMessage >*
SubscribeDocListResponse::mutable_subscribe_doc() {
  // @@protoc_insertion_point(field_mutable_list:subscribe.SubscribeDocListResponse.subscribe_doc)
  return &subscribe_doc_;
}
inline const ::google::protobuf::RepeatedPtrField< ::subscribe::SubscribeDocListResponse_SubscribeDocMessage >&
SubscribeDocListResponse::subscribe_doc() const {
  // @@protoc_insertion_point(field_list:subscribe.SubscribeDocListResponse.subscribe_doc)
  return subscribe_doc_;
}

// optional .grpcCommon.GrpcError error = 2;
inline bool SubscribeDocListResponse::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
inline void SubscribeDocListResponse::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) delete error_;
  error_ = NULL;
}
inline const ::grpcCommon::GrpcError& SubscribeDocListResponse::error() const {
  // @@protoc_insertion_point(field_get:subscribe.SubscribeDocListResponse.error)
  return error_ != NULL ? *error_
                         : *::grpcCommon::GrpcError::internal_default_instance();
}
inline ::grpcCommon::GrpcError* SubscribeDocListResponse::mutable_error() {
  
  if (error_ == NULL) {
    error_ = new ::grpcCommon::GrpcError;
  }
  // @@protoc_insertion_point(field_mutable:subscribe.SubscribeDocListResponse.error)
  return error_;
}
inline ::grpcCommon::GrpcError* SubscribeDocListResponse::release_error() {
  // @@protoc_insertion_point(field_release:subscribe.SubscribeDocListResponse.error)
  
  ::grpcCommon::GrpcError* temp = error_;
  error_ = NULL;
  return temp;
}
inline void SubscribeDocListResponse::set_allocated_error(::grpcCommon::GrpcError* error) {
  delete error_;
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:subscribe.SubscribeDocListResponse.error)
}

// optional bool has_more = 3;
inline void SubscribeDocListResponse::clear_has_more() {
  has_more_ = false;
}
inline bool SubscribeDocListResponse::has_more() const {
  // @@protoc_insertion_point(field_get:subscribe.SubscribeDocListResponse.has_more)
  return has_more_;
}
inline void SubscribeDocListResponse::set_has_more(bool value) {
  
  has_more_ = value;
  // @@protoc_insertion_point(field_set:subscribe.SubscribeDocListResponse.has_more)
}

inline const SubscribeDocListResponse* SubscribeDocListResponse::internal_default_instance() {
  return &SubscribeDocListResponse_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace subscribe

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_subscribe_2fmsg_5fsubscribe_5fdoc_2eproto__INCLUDED
