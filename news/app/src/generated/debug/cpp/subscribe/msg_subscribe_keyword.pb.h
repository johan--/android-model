// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: subscribe/msg_subscribe_keyword.proto

#ifndef PROTOBUF_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto__INCLUDED
#define PROTOBUF_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
#include "grpcCommon/msg_error.pb.h"
// @@protoc_insertion_point(includes)

namespace subscribe {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto();
void protobuf_InitDefaults_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto();
void protobuf_AssignDesc_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto();
void protobuf_ShutdownFile_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto();

class DocType;
class SourceType;
class SubscribeDocTypeListRequest;
class SubscribeDocTypeListResponse;
class SubscribeKeywordListRequest;
class SubscribeKeywordListResponse;
class SubscribeKeywordMessage;
class SubscribeKeywordRequest;
class SubscribeKeywordResponse;
class SubscribePushEmailRequest;
class SubscribePushEmailResponse;
class SubscribeSourceTypeListRequest;
class SubscribeSourceTypeListResponse;

// ===================================================================

class SubscribePushEmailRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:subscribe.SubscribePushEmailRequest) */ {
 public:
  SubscribePushEmailRequest();
  virtual ~SubscribePushEmailRequest();

  SubscribePushEmailRequest(const SubscribePushEmailRequest& from);

  inline SubscribePushEmailRequest& operator=(const SubscribePushEmailRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SubscribePushEmailRequest& default_instance();

  static const SubscribePushEmailRequest* internal_default_instance();

  void Swap(SubscribePushEmailRequest* other);

  // implements Message ----------------------------------------------

  inline SubscribePushEmailRequest* New() const { return New(NULL); }

  SubscribePushEmailRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SubscribePushEmailRequest& from);
  void MergeFrom(const SubscribePushEmailRequest& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SubscribePushEmailRequest* other);
  void UnsafeMergeFrom(const SubscribePushEmailRequest& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // @@protoc_insertion_point(class_scope:subscribe.SubscribePushEmailRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto_impl();
  friend void  protobuf_AddDesc_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto_impl();
  friend void protobuf_AssignDesc_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto();
  friend void protobuf_ShutdownFile_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<SubscribePushEmailRequest> SubscribePushEmailRequest_default_instance_;

// -------------------------------------------------------------------

class SubscribePushEmailResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:subscribe.SubscribePushEmailResponse) */ {
 public:
  SubscribePushEmailResponse();
  virtual ~SubscribePushEmailResponse();

  SubscribePushEmailResponse(const SubscribePushEmailResponse& from);

  inline SubscribePushEmailResponse& operator=(const SubscribePushEmailResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SubscribePushEmailResponse& default_instance();

  static const SubscribePushEmailResponse* internal_default_instance();

  void Swap(SubscribePushEmailResponse* other);

  // implements Message ----------------------------------------------

  inline SubscribePushEmailResponse* New() const { return New(NULL); }

  SubscribePushEmailResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SubscribePushEmailResponse& from);
  void MergeFrom(const SubscribePushEmailResponse& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SubscribePushEmailResponse* other);
  void UnsafeMergeFrom(const SubscribePushEmailResponse& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string email = 1;
  void clear_email();
  static const int kEmailFieldNumber = 1;
  const ::std::string& email() const;
  void set_email(const ::std::string& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  ::std::string* mutable_email();
  ::std::string* release_email();
  void set_allocated_email(::std::string* email);

  // optional .grpcCommon.GrpcError error = 2;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 2;
  const ::grpcCommon::GrpcError& error() const;
  ::grpcCommon::GrpcError* mutable_error();
  ::grpcCommon::GrpcError* release_error();
  void set_allocated_error(::grpcCommon::GrpcError* error);

  // @@protoc_insertion_point(class_scope:subscribe.SubscribePushEmailResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr email_;
  ::grpcCommon::GrpcError* error_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto_impl();
  friend void  protobuf_AddDesc_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto_impl();
  friend void protobuf_AssignDesc_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto();
  friend void protobuf_ShutdownFile_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<SubscribePushEmailResponse> SubscribePushEmailResponse_default_instance_;

// -------------------------------------------------------------------

class SubscribeDocTypeListRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:subscribe.SubscribeDocTypeListRequest) */ {
 public:
  SubscribeDocTypeListRequest();
  virtual ~SubscribeDocTypeListRequest();

  SubscribeDocTypeListRequest(const SubscribeDocTypeListRequest& from);

  inline SubscribeDocTypeListRequest& operator=(const SubscribeDocTypeListRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SubscribeDocTypeListRequest& default_instance();

  static const SubscribeDocTypeListRequest* internal_default_instance();

  void Swap(SubscribeDocTypeListRequest* other);

  // implements Message ----------------------------------------------

  inline SubscribeDocTypeListRequest* New() const { return New(NULL); }

  SubscribeDocTypeListRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SubscribeDocTypeListRequest& from);
  void MergeFrom(const SubscribeDocTypeListRequest& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SubscribeDocTypeListRequest* other);
  void UnsafeMergeFrom(const SubscribeDocTypeListRequest& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:subscribe.SubscribeDocTypeListRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto_impl();
  friend void  protobuf_AddDesc_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto_impl();
  friend void protobuf_AssignDesc_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto();
  friend void protobuf_ShutdownFile_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<SubscribeDocTypeListRequest> SubscribeDocTypeListRequest_default_instance_;

// -------------------------------------------------------------------

class SubscribeDocTypeListResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:subscribe.SubscribeDocTypeListResponse) */ {
 public:
  SubscribeDocTypeListResponse();
  virtual ~SubscribeDocTypeListResponse();

  SubscribeDocTypeListResponse(const SubscribeDocTypeListResponse& from);

  inline SubscribeDocTypeListResponse& operator=(const SubscribeDocTypeListResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SubscribeDocTypeListResponse& default_instance();

  static const SubscribeDocTypeListResponse* internal_default_instance();

  void Swap(SubscribeDocTypeListResponse* other);

  // implements Message ----------------------------------------------

  inline SubscribeDocTypeListResponse* New() const { return New(NULL); }

  SubscribeDocTypeListResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SubscribeDocTypeListResponse& from);
  void MergeFrom(const SubscribeDocTypeListResponse& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SubscribeDocTypeListResponse* other);
  void UnsafeMergeFrom(const SubscribeDocTypeListResponse& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .subscribe.DocType doc_type = 1;
  int doc_type_size() const;
  void clear_doc_type();
  static const int kDocTypeFieldNumber = 1;
  const ::subscribe::DocType& doc_type(int index) const;
  ::subscribe::DocType* mutable_doc_type(int index);
  ::subscribe::DocType* add_doc_type();
  ::google::protobuf::RepeatedPtrField< ::subscribe::DocType >*
      mutable_doc_type();
  const ::google::protobuf::RepeatedPtrField< ::subscribe::DocType >&
      doc_type() const;

  // @@protoc_insertion_point(class_scope:subscribe.SubscribeDocTypeListResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::subscribe::DocType > doc_type_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto_impl();
  friend void  protobuf_AddDesc_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto_impl();
  friend void protobuf_AssignDesc_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto();
  friend void protobuf_ShutdownFile_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<SubscribeDocTypeListResponse> SubscribeDocTypeListResponse_default_instance_;

// -------------------------------------------------------------------

class SubscribeSourceTypeListRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:subscribe.SubscribeSourceTypeListRequest) */ {
 public:
  SubscribeSourceTypeListRequest();
  virtual ~SubscribeSourceTypeListRequest();

  SubscribeSourceTypeListRequest(const SubscribeSourceTypeListRequest& from);

  inline SubscribeSourceTypeListRequest& operator=(const SubscribeSourceTypeListRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SubscribeSourceTypeListRequest& default_instance();

  static const SubscribeSourceTypeListRequest* internal_default_instance();

  void Swap(SubscribeSourceTypeListRequest* other);

  // implements Message ----------------------------------------------

  inline SubscribeSourceTypeListRequest* New() const { return New(NULL); }

  SubscribeSourceTypeListRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SubscribeSourceTypeListRequest& from);
  void MergeFrom(const SubscribeSourceTypeListRequest& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SubscribeSourceTypeListRequest* other);
  void UnsafeMergeFrom(const SubscribeSourceTypeListRequest& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:subscribe.SubscribeSourceTypeListRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto_impl();
  friend void  protobuf_AddDesc_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto_impl();
  friend void protobuf_AssignDesc_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto();
  friend void protobuf_ShutdownFile_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<SubscribeSourceTypeListRequest> SubscribeSourceTypeListRequest_default_instance_;

// -------------------------------------------------------------------

class SubscribeSourceTypeListResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:subscribe.SubscribeSourceTypeListResponse) */ {
 public:
  SubscribeSourceTypeListResponse();
  virtual ~SubscribeSourceTypeListResponse();

  SubscribeSourceTypeListResponse(const SubscribeSourceTypeListResponse& from);

  inline SubscribeSourceTypeListResponse& operator=(const SubscribeSourceTypeListResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SubscribeSourceTypeListResponse& default_instance();

  static const SubscribeSourceTypeListResponse* internal_default_instance();

  void Swap(SubscribeSourceTypeListResponse* other);

  // implements Message ----------------------------------------------

  inline SubscribeSourceTypeListResponse* New() const { return New(NULL); }

  SubscribeSourceTypeListResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SubscribeSourceTypeListResponse& from);
  void MergeFrom(const SubscribeSourceTypeListResponse& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SubscribeSourceTypeListResponse* other);
  void UnsafeMergeFrom(const SubscribeSourceTypeListResponse& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .subscribe.SourceType source_type = 1;
  int source_type_size() const;
  void clear_source_type();
  static const int kSourceTypeFieldNumber = 1;
  const ::subscribe::SourceType& source_type(int index) const;
  ::subscribe::SourceType* mutable_source_type(int index);
  ::subscribe::SourceType* add_source_type();
  ::google::protobuf::RepeatedPtrField< ::subscribe::SourceType >*
      mutable_source_type();
  const ::google::protobuf::RepeatedPtrField< ::subscribe::SourceType >&
      source_type() const;

  // @@protoc_insertion_point(class_scope:subscribe.SubscribeSourceTypeListResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::subscribe::SourceType > source_type_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto_impl();
  friend void  protobuf_AddDesc_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto_impl();
  friend void protobuf_AssignDesc_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto();
  friend void protobuf_ShutdownFile_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<SubscribeSourceTypeListResponse> SubscribeSourceTypeListResponse_default_instance_;

// -------------------------------------------------------------------

class SubscribeKeywordRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:subscribe.SubscribeKeywordRequest) */ {
 public:
  SubscribeKeywordRequest();
  virtual ~SubscribeKeywordRequest();

  SubscribeKeywordRequest(const SubscribeKeywordRequest& from);

  inline SubscribeKeywordRequest& operator=(const SubscribeKeywordRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SubscribeKeywordRequest& default_instance();

  static const SubscribeKeywordRequest* internal_default_instance();

  void Swap(SubscribeKeywordRequest* other);

  // implements Message ----------------------------------------------

  inline SubscribeKeywordRequest* New() const { return New(NULL); }

  SubscribeKeywordRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SubscribeKeywordRequest& from);
  void MergeFrom(const SubscribeKeywordRequest& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SubscribeKeywordRequest* other);
  void UnsafeMergeFrom(const SubscribeKeywordRequest& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // optional string keyword = 2;
  void clear_keyword();
  static const int kKeywordFieldNumber = 2;
  const ::std::string& keyword() const;
  void set_keyword(const ::std::string& value);
  void set_keyword(const char* value);
  void set_keyword(const char* value, size_t size);
  ::std::string* mutable_keyword();
  ::std::string* release_keyword();
  void set_allocated_keyword(::std::string* keyword);

  // repeated .subscribe.DocType doc_type = 3;
  int doc_type_size() const;
  void clear_doc_type();
  static const int kDocTypeFieldNumber = 3;
  const ::subscribe::DocType& doc_type(int index) const;
  ::subscribe::DocType* mutable_doc_type(int index);
  ::subscribe::DocType* add_doc_type();
  ::google::protobuf::RepeatedPtrField< ::subscribe::DocType >*
      mutable_doc_type();
  const ::google::protobuf::RepeatedPtrField< ::subscribe::DocType >&
      doc_type() const;

  // repeated .subscribe.SourceType source_type = 4;
  int source_type_size() const;
  void clear_source_type();
  static const int kSourceTypeFieldNumber = 4;
  const ::subscribe::SourceType& source_type(int index) const;
  ::subscribe::SourceType* mutable_source_type(int index);
  ::subscribe::SourceType* add_source_type();
  ::google::protobuf::RepeatedPtrField< ::subscribe::SourceType >*
      mutable_source_type();
  const ::google::protobuf::RepeatedPtrField< ::subscribe::SourceType >&
      source_type() const;

  // optional string email = 5;
  void clear_email();
  static const int kEmailFieldNumber = 5;
  const ::std::string& email() const;
  void set_email(const ::std::string& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  ::std::string* mutable_email();
  ::std::string* release_email();
  void set_allocated_email(::std::string* email);

  // optional bool should_update_email = 6;
  void clear_should_update_email();
  static const int kShouldUpdateEmailFieldNumber = 6;
  bool should_update_email() const;
  void set_should_update_email(bool value);

  // @@protoc_insertion_point(class_scope:subscribe.SubscribeKeywordRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::subscribe::DocType > doc_type_;
  ::google::protobuf::RepeatedPtrField< ::subscribe::SourceType > source_type_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr keyword_;
  ::google::protobuf::internal::ArenaStringPtr email_;
  bool should_update_email_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto_impl();
  friend void  protobuf_AddDesc_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto_impl();
  friend void protobuf_AssignDesc_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto();
  friend void protobuf_ShutdownFile_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<SubscribeKeywordRequest> SubscribeKeywordRequest_default_instance_;

// -------------------------------------------------------------------

class SubscribeKeywordResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:subscribe.SubscribeKeywordResponse) */ {
 public:
  SubscribeKeywordResponse();
  virtual ~SubscribeKeywordResponse();

  SubscribeKeywordResponse(const SubscribeKeywordResponse& from);

  inline SubscribeKeywordResponse& operator=(const SubscribeKeywordResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SubscribeKeywordResponse& default_instance();

  static const SubscribeKeywordResponse* internal_default_instance();

  void Swap(SubscribeKeywordResponse* other);

  // implements Message ----------------------------------------------

  inline SubscribeKeywordResponse* New() const { return New(NULL); }

  SubscribeKeywordResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SubscribeKeywordResponse& from);
  void MergeFrom(const SubscribeKeywordResponse& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SubscribeKeywordResponse* other);
  void UnsafeMergeFrom(const SubscribeKeywordResponse& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool subscribe_success = 1;
  void clear_subscribe_success();
  static const int kSubscribeSuccessFieldNumber = 1;
  bool subscribe_success() const;
  void set_subscribe_success(bool value);

  // optional .grpcCommon.GrpcError error = 2;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 2;
  const ::grpcCommon::GrpcError& error() const;
  ::grpcCommon::GrpcError* mutable_error();
  ::grpcCommon::GrpcError* release_error();
  void set_allocated_error(::grpcCommon::GrpcError* error);

  // @@protoc_insertion_point(class_scope:subscribe.SubscribeKeywordResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::grpcCommon::GrpcError* error_;
  bool subscribe_success_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto_impl();
  friend void  protobuf_AddDesc_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto_impl();
  friend void protobuf_AssignDesc_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto();
  friend void protobuf_ShutdownFile_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<SubscribeKeywordResponse> SubscribeKeywordResponse_default_instance_;

// -------------------------------------------------------------------

class SubscribeKeywordListRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:subscribe.SubscribeKeywordListRequest) */ {
 public:
  SubscribeKeywordListRequest();
  virtual ~SubscribeKeywordListRequest();

  SubscribeKeywordListRequest(const SubscribeKeywordListRequest& from);

  inline SubscribeKeywordListRequest& operator=(const SubscribeKeywordListRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SubscribeKeywordListRequest& default_instance();

  static const SubscribeKeywordListRequest* internal_default_instance();

  void Swap(SubscribeKeywordListRequest* other);

  // implements Message ----------------------------------------------

  inline SubscribeKeywordListRequest* New() const { return New(NULL); }

  SubscribeKeywordListRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SubscribeKeywordListRequest& from);
  void MergeFrom(const SubscribeKeywordListRequest& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SubscribeKeywordListRequest* other);
  void UnsafeMergeFrom(const SubscribeKeywordListRequest& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // optional int32 page_number = 2;
  void clear_page_number();
  static const int kPageNumberFieldNumber = 2;
  ::google::protobuf::int32 page_number() const;
  void set_page_number(::google::protobuf::int32 value);

  // optional int32 page_size = 3;
  void clear_page_size();
  static const int kPageSizeFieldNumber = 3;
  ::google::protobuf::int32 page_size() const;
  void set_page_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:subscribe.SubscribeKeywordListRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::int32 page_number_;
  ::google::protobuf::int32 page_size_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto_impl();
  friend void  protobuf_AddDesc_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto_impl();
  friend void protobuf_AssignDesc_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto();
  friend void protobuf_ShutdownFile_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<SubscribeKeywordListRequest> SubscribeKeywordListRequest_default_instance_;

// -------------------------------------------------------------------

class SubscribeKeywordListResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:subscribe.SubscribeKeywordListResponse) */ {
 public:
  SubscribeKeywordListResponse();
  virtual ~SubscribeKeywordListResponse();

  SubscribeKeywordListResponse(const SubscribeKeywordListResponse& from);

  inline SubscribeKeywordListResponse& operator=(const SubscribeKeywordListResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SubscribeKeywordListResponse& default_instance();

  static const SubscribeKeywordListResponse* internal_default_instance();

  void Swap(SubscribeKeywordListResponse* other);

  // implements Message ----------------------------------------------

  inline SubscribeKeywordListResponse* New() const { return New(NULL); }

  SubscribeKeywordListResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SubscribeKeywordListResponse& from);
  void MergeFrom(const SubscribeKeywordListResponse& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SubscribeKeywordListResponse* other);
  void UnsafeMergeFrom(const SubscribeKeywordListResponse& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .subscribe.SubscribeKeywordMessage subscribe_keyword = 1;
  int subscribe_keyword_size() const;
  void clear_subscribe_keyword();
  static const int kSubscribeKeywordFieldNumber = 1;
  const ::subscribe::SubscribeKeywordMessage& subscribe_keyword(int index) const;
  ::subscribe::SubscribeKeywordMessage* mutable_subscribe_keyword(int index);
  ::subscribe::SubscribeKeywordMessage* add_subscribe_keyword();
  ::google::protobuf::RepeatedPtrField< ::subscribe::SubscribeKeywordMessage >*
      mutable_subscribe_keyword();
  const ::google::protobuf::RepeatedPtrField< ::subscribe::SubscribeKeywordMessage >&
      subscribe_keyword() const;

  // optional bool has_more = 2;
  void clear_has_more();
  static const int kHasMoreFieldNumber = 2;
  bool has_more() const;
  void set_has_more(bool value);

  // optional .grpcCommon.GrpcError error = 3;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 3;
  const ::grpcCommon::GrpcError& error() const;
  ::grpcCommon::GrpcError* mutable_error();
  ::grpcCommon::GrpcError* release_error();
  void set_allocated_error(::grpcCommon::GrpcError* error);

  // @@protoc_insertion_point(class_scope:subscribe.SubscribeKeywordListResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::subscribe::SubscribeKeywordMessage > subscribe_keyword_;
  ::grpcCommon::GrpcError* error_;
  bool has_more_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto_impl();
  friend void  protobuf_AddDesc_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto_impl();
  friend void protobuf_AssignDesc_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto();
  friend void protobuf_ShutdownFile_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<SubscribeKeywordListResponse> SubscribeKeywordListResponse_default_instance_;

// -------------------------------------------------------------------

class SubscribeKeywordMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:subscribe.SubscribeKeywordMessage) */ {
 public:
  SubscribeKeywordMessage();
  virtual ~SubscribeKeywordMessage();

  SubscribeKeywordMessage(const SubscribeKeywordMessage& from);

  inline SubscribeKeywordMessage& operator=(const SubscribeKeywordMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SubscribeKeywordMessage& default_instance();

  static const SubscribeKeywordMessage* internal_default_instance();

  void Swap(SubscribeKeywordMessage* other);

  // implements Message ----------------------------------------------

  inline SubscribeKeywordMessage* New() const { return New(NULL); }

  SubscribeKeywordMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SubscribeKeywordMessage& from);
  void MergeFrom(const SubscribeKeywordMessage& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SubscribeKeywordMessage* other);
  void UnsafeMergeFrom(const SubscribeKeywordMessage& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // optional string subscribe_id = 2;
  void clear_subscribe_id();
  static const int kSubscribeIdFieldNumber = 2;
  const ::std::string& subscribe_id() const;
  void set_subscribe_id(const ::std::string& value);
  void set_subscribe_id(const char* value);
  void set_subscribe_id(const char* value, size_t size);
  ::std::string* mutable_subscribe_id();
  ::std::string* release_subscribe_id();
  void set_allocated_subscribe_id(::std::string* subscribe_id);

  // optional string docu_type = 3;
  void clear_docu_type();
  static const int kDocuTypeFieldNumber = 3;
  const ::std::string& docu_type() const;
  void set_docu_type(const ::std::string& value);
  void set_docu_type(const char* value);
  void set_docu_type(const char* value, size_t size);
  ::std::string* mutable_docu_type();
  ::std::string* release_docu_type();
  void set_allocated_docu_type(::std::string* docu_type);

  // optional string add_time = 4;
  void clear_add_time();
  static const int kAddTimeFieldNumber = 4;
  const ::std::string& add_time() const;
  void set_add_time(const ::std::string& value);
  void set_add_time(const char* value);
  void set_add_time(const char* value, size_t size);
  ::std::string* mutable_add_time();
  ::std::string* release_add_time();
  void set_allocated_add_time(::std::string* add_time);

  // @@protoc_insertion_point(class_scope:subscribe.SubscribeKeywordMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr subscribe_id_;
  ::google::protobuf::internal::ArenaStringPtr docu_type_;
  ::google::protobuf::internal::ArenaStringPtr add_time_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto_impl();
  friend void  protobuf_AddDesc_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto_impl();
  friend void protobuf_AssignDesc_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto();
  friend void protobuf_ShutdownFile_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<SubscribeKeywordMessage> SubscribeKeywordMessage_default_instance_;

// -------------------------------------------------------------------

class DocType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:subscribe.DocType) */ {
 public:
  DocType();
  virtual ~DocType();

  DocType(const DocType& from);

  inline DocType& operator=(const DocType& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DocType& default_instance();

  static const DocType* internal_default_instance();

  void Swap(DocType* other);

  // implements Message ----------------------------------------------

  inline DocType* New() const { return New(NULL); }

  DocType* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DocType& from);
  void MergeFrom(const DocType& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DocType* other);
  void UnsafeMergeFrom(const DocType& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ch_name = 1;
  void clear_ch_name();
  static const int kChNameFieldNumber = 1;
  const ::std::string& ch_name() const;
  void set_ch_name(const ::std::string& value);
  void set_ch_name(const char* value);
  void set_ch_name(const char* value, size_t size);
  ::std::string* mutable_ch_name();
  ::std::string* release_ch_name();
  void set_allocated_ch_name(::std::string* ch_name);

  // optional string en_name = 2;
  void clear_en_name();
  static const int kEnNameFieldNumber = 2;
  const ::std::string& en_name() const;
  void set_en_name(const ::std::string& value);
  void set_en_name(const char* value);
  void set_en_name(const char* value, size_t size);
  ::std::string* mutable_en_name();
  ::std::string* release_en_name();
  void set_allocated_en_name(::std::string* en_name);

  // @@protoc_insertion_point(class_scope:subscribe.DocType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ch_name_;
  ::google::protobuf::internal::ArenaStringPtr en_name_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto_impl();
  friend void  protobuf_AddDesc_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto_impl();
  friend void protobuf_AssignDesc_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto();
  friend void protobuf_ShutdownFile_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<DocType> DocType_default_instance_;

// -------------------------------------------------------------------

class SourceType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:subscribe.SourceType) */ {
 public:
  SourceType();
  virtual ~SourceType();

  SourceType(const SourceType& from);

  inline SourceType& operator=(const SourceType& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SourceType& default_instance();

  static const SourceType* internal_default_instance();

  void Swap(SourceType* other);

  // implements Message ----------------------------------------------

  inline SourceType* New() const { return New(NULL); }

  SourceType* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SourceType& from);
  void MergeFrom(const SourceType& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SourceType* other);
  void UnsafeMergeFrom(const SourceType& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ch_name = 1;
  void clear_ch_name();
  static const int kChNameFieldNumber = 1;
  const ::std::string& ch_name() const;
  void set_ch_name(const ::std::string& value);
  void set_ch_name(const char* value);
  void set_ch_name(const char* value, size_t size);
  ::std::string* mutable_ch_name();
  ::std::string* release_ch_name();
  void set_allocated_ch_name(::std::string* ch_name);

  // optional string en_name = 2;
  void clear_en_name();
  static const int kEnNameFieldNumber = 2;
  const ::std::string& en_name() const;
  void set_en_name(const ::std::string& value);
  void set_en_name(const char* value);
  void set_en_name(const char* value, size_t size);
  ::std::string* mutable_en_name();
  ::std::string* release_en_name();
  void set_allocated_en_name(::std::string* en_name);

  // @@protoc_insertion_point(class_scope:subscribe.SourceType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ch_name_;
  ::google::protobuf::internal::ArenaStringPtr en_name_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto_impl();
  friend void  protobuf_AddDesc_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto_impl();
  friend void protobuf_AssignDesc_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto();
  friend void protobuf_ShutdownFile_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<SourceType> SourceType_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// SubscribePushEmailRequest

// optional string user_id = 1;
inline void SubscribePushEmailRequest::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SubscribePushEmailRequest::user_id() const {
  // @@protoc_insertion_point(field_get:subscribe.SubscribePushEmailRequest.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubscribePushEmailRequest::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:subscribe.SubscribePushEmailRequest.user_id)
}
inline void SubscribePushEmailRequest::set_user_id(const char* value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:subscribe.SubscribePushEmailRequest.user_id)
}
inline void SubscribePushEmailRequest::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:subscribe.SubscribePushEmailRequest.user_id)
}
inline ::std::string* SubscribePushEmailRequest::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:subscribe.SubscribePushEmailRequest.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SubscribePushEmailRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:subscribe.SubscribePushEmailRequest.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubscribePushEmailRequest::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:subscribe.SubscribePushEmailRequest.user_id)
}

inline const SubscribePushEmailRequest* SubscribePushEmailRequest::internal_default_instance() {
  return &SubscribePushEmailRequest_default_instance_.get();
}
// -------------------------------------------------------------------

// SubscribePushEmailResponse

// optional string email = 1;
inline void SubscribePushEmailResponse::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SubscribePushEmailResponse::email() const {
  // @@protoc_insertion_point(field_get:subscribe.SubscribePushEmailResponse.email)
  return email_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubscribePushEmailResponse::set_email(const ::std::string& value) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:subscribe.SubscribePushEmailResponse.email)
}
inline void SubscribePushEmailResponse::set_email(const char* value) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:subscribe.SubscribePushEmailResponse.email)
}
inline void SubscribePushEmailResponse::set_email(const char* value, size_t size) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:subscribe.SubscribePushEmailResponse.email)
}
inline ::std::string* SubscribePushEmailResponse::mutable_email() {
  
  // @@protoc_insertion_point(field_mutable:subscribe.SubscribePushEmailResponse.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SubscribePushEmailResponse::release_email() {
  // @@protoc_insertion_point(field_release:subscribe.SubscribePushEmailResponse.email)
  
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubscribePushEmailResponse::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    
  } else {
    
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:subscribe.SubscribePushEmailResponse.email)
}

// optional .grpcCommon.GrpcError error = 2;
inline bool SubscribePushEmailResponse::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
inline void SubscribePushEmailResponse::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) delete error_;
  error_ = NULL;
}
inline const ::grpcCommon::GrpcError& SubscribePushEmailResponse::error() const {
  // @@protoc_insertion_point(field_get:subscribe.SubscribePushEmailResponse.error)
  return error_ != NULL ? *error_
                         : *::grpcCommon::GrpcError::internal_default_instance();
}
inline ::grpcCommon::GrpcError* SubscribePushEmailResponse::mutable_error() {
  
  if (error_ == NULL) {
    error_ = new ::grpcCommon::GrpcError;
  }
  // @@protoc_insertion_point(field_mutable:subscribe.SubscribePushEmailResponse.error)
  return error_;
}
inline ::grpcCommon::GrpcError* SubscribePushEmailResponse::release_error() {
  // @@protoc_insertion_point(field_release:subscribe.SubscribePushEmailResponse.error)
  
  ::grpcCommon::GrpcError* temp = error_;
  error_ = NULL;
  return temp;
}
inline void SubscribePushEmailResponse::set_allocated_error(::grpcCommon::GrpcError* error) {
  delete error_;
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:subscribe.SubscribePushEmailResponse.error)
}

inline const SubscribePushEmailResponse* SubscribePushEmailResponse::internal_default_instance() {
  return &SubscribePushEmailResponse_default_instance_.get();
}
// -------------------------------------------------------------------

// SubscribeDocTypeListRequest

inline const SubscribeDocTypeListRequest* SubscribeDocTypeListRequest::internal_default_instance() {
  return &SubscribeDocTypeListRequest_default_instance_.get();
}
// -------------------------------------------------------------------

// SubscribeDocTypeListResponse

// repeated .subscribe.DocType doc_type = 1;
inline int SubscribeDocTypeListResponse::doc_type_size() const {
  return doc_type_.size();
}
inline void SubscribeDocTypeListResponse::clear_doc_type() {
  doc_type_.Clear();
}
inline const ::subscribe::DocType& SubscribeDocTypeListResponse::doc_type(int index) const {
  // @@protoc_insertion_point(field_get:subscribe.SubscribeDocTypeListResponse.doc_type)
  return doc_type_.Get(index);
}
inline ::subscribe::DocType* SubscribeDocTypeListResponse::mutable_doc_type(int index) {
  // @@protoc_insertion_point(field_mutable:subscribe.SubscribeDocTypeListResponse.doc_type)
  return doc_type_.Mutable(index);
}
inline ::subscribe::DocType* SubscribeDocTypeListResponse::add_doc_type() {
  // @@protoc_insertion_point(field_add:subscribe.SubscribeDocTypeListResponse.doc_type)
  return doc_type_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::subscribe::DocType >*
SubscribeDocTypeListResponse::mutable_doc_type() {
  // @@protoc_insertion_point(field_mutable_list:subscribe.SubscribeDocTypeListResponse.doc_type)
  return &doc_type_;
}
inline const ::google::protobuf::RepeatedPtrField< ::subscribe::DocType >&
SubscribeDocTypeListResponse::doc_type() const {
  // @@protoc_insertion_point(field_list:subscribe.SubscribeDocTypeListResponse.doc_type)
  return doc_type_;
}

inline const SubscribeDocTypeListResponse* SubscribeDocTypeListResponse::internal_default_instance() {
  return &SubscribeDocTypeListResponse_default_instance_.get();
}
// -------------------------------------------------------------------

// SubscribeSourceTypeListRequest

inline const SubscribeSourceTypeListRequest* SubscribeSourceTypeListRequest::internal_default_instance() {
  return &SubscribeSourceTypeListRequest_default_instance_.get();
}
// -------------------------------------------------------------------

// SubscribeSourceTypeListResponse

// repeated .subscribe.SourceType source_type = 1;
inline int SubscribeSourceTypeListResponse::source_type_size() const {
  return source_type_.size();
}
inline void SubscribeSourceTypeListResponse::clear_source_type() {
  source_type_.Clear();
}
inline const ::subscribe::SourceType& SubscribeSourceTypeListResponse::source_type(int index) const {
  // @@protoc_insertion_point(field_get:subscribe.SubscribeSourceTypeListResponse.source_type)
  return source_type_.Get(index);
}
inline ::subscribe::SourceType* SubscribeSourceTypeListResponse::mutable_source_type(int index) {
  // @@protoc_insertion_point(field_mutable:subscribe.SubscribeSourceTypeListResponse.source_type)
  return source_type_.Mutable(index);
}
inline ::subscribe::SourceType* SubscribeSourceTypeListResponse::add_source_type() {
  // @@protoc_insertion_point(field_add:subscribe.SubscribeSourceTypeListResponse.source_type)
  return source_type_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::subscribe::SourceType >*
SubscribeSourceTypeListResponse::mutable_source_type() {
  // @@protoc_insertion_point(field_mutable_list:subscribe.SubscribeSourceTypeListResponse.source_type)
  return &source_type_;
}
inline const ::google::protobuf::RepeatedPtrField< ::subscribe::SourceType >&
SubscribeSourceTypeListResponse::source_type() const {
  // @@protoc_insertion_point(field_list:subscribe.SubscribeSourceTypeListResponse.source_type)
  return source_type_;
}

inline const SubscribeSourceTypeListResponse* SubscribeSourceTypeListResponse::internal_default_instance() {
  return &SubscribeSourceTypeListResponse_default_instance_.get();
}
// -------------------------------------------------------------------

// SubscribeKeywordRequest

// optional string user_id = 1;
inline void SubscribeKeywordRequest::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SubscribeKeywordRequest::user_id() const {
  // @@protoc_insertion_point(field_get:subscribe.SubscribeKeywordRequest.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubscribeKeywordRequest::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:subscribe.SubscribeKeywordRequest.user_id)
}
inline void SubscribeKeywordRequest::set_user_id(const char* value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:subscribe.SubscribeKeywordRequest.user_id)
}
inline void SubscribeKeywordRequest::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:subscribe.SubscribeKeywordRequest.user_id)
}
inline ::std::string* SubscribeKeywordRequest::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:subscribe.SubscribeKeywordRequest.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SubscribeKeywordRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:subscribe.SubscribeKeywordRequest.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubscribeKeywordRequest::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:subscribe.SubscribeKeywordRequest.user_id)
}

// optional string keyword = 2;
inline void SubscribeKeywordRequest::clear_keyword() {
  keyword_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SubscribeKeywordRequest::keyword() const {
  // @@protoc_insertion_point(field_get:subscribe.SubscribeKeywordRequest.keyword)
  return keyword_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubscribeKeywordRequest::set_keyword(const ::std::string& value) {
  
  keyword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:subscribe.SubscribeKeywordRequest.keyword)
}
inline void SubscribeKeywordRequest::set_keyword(const char* value) {
  
  keyword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:subscribe.SubscribeKeywordRequest.keyword)
}
inline void SubscribeKeywordRequest::set_keyword(const char* value, size_t size) {
  
  keyword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:subscribe.SubscribeKeywordRequest.keyword)
}
inline ::std::string* SubscribeKeywordRequest::mutable_keyword() {
  
  // @@protoc_insertion_point(field_mutable:subscribe.SubscribeKeywordRequest.keyword)
  return keyword_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SubscribeKeywordRequest::release_keyword() {
  // @@protoc_insertion_point(field_release:subscribe.SubscribeKeywordRequest.keyword)
  
  return keyword_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubscribeKeywordRequest::set_allocated_keyword(::std::string* keyword) {
  if (keyword != NULL) {
    
  } else {
    
  }
  keyword_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), keyword);
  // @@protoc_insertion_point(field_set_allocated:subscribe.SubscribeKeywordRequest.keyword)
}

// repeated .subscribe.DocType doc_type = 3;
inline int SubscribeKeywordRequest::doc_type_size() const {
  return doc_type_.size();
}
inline void SubscribeKeywordRequest::clear_doc_type() {
  doc_type_.Clear();
}
inline const ::subscribe::DocType& SubscribeKeywordRequest::doc_type(int index) const {
  // @@protoc_insertion_point(field_get:subscribe.SubscribeKeywordRequest.doc_type)
  return doc_type_.Get(index);
}
inline ::subscribe::DocType* SubscribeKeywordRequest::mutable_doc_type(int index) {
  // @@protoc_insertion_point(field_mutable:subscribe.SubscribeKeywordRequest.doc_type)
  return doc_type_.Mutable(index);
}
inline ::subscribe::DocType* SubscribeKeywordRequest::add_doc_type() {
  // @@protoc_insertion_point(field_add:subscribe.SubscribeKeywordRequest.doc_type)
  return doc_type_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::subscribe::DocType >*
SubscribeKeywordRequest::mutable_doc_type() {
  // @@protoc_insertion_point(field_mutable_list:subscribe.SubscribeKeywordRequest.doc_type)
  return &doc_type_;
}
inline const ::google::protobuf::RepeatedPtrField< ::subscribe::DocType >&
SubscribeKeywordRequest::doc_type() const {
  // @@protoc_insertion_point(field_list:subscribe.SubscribeKeywordRequest.doc_type)
  return doc_type_;
}

// repeated .subscribe.SourceType source_type = 4;
inline int SubscribeKeywordRequest::source_type_size() const {
  return source_type_.size();
}
inline void SubscribeKeywordRequest::clear_source_type() {
  source_type_.Clear();
}
inline const ::subscribe::SourceType& SubscribeKeywordRequest::source_type(int index) const {
  // @@protoc_insertion_point(field_get:subscribe.SubscribeKeywordRequest.source_type)
  return source_type_.Get(index);
}
inline ::subscribe::SourceType* SubscribeKeywordRequest::mutable_source_type(int index) {
  // @@protoc_insertion_point(field_mutable:subscribe.SubscribeKeywordRequest.source_type)
  return source_type_.Mutable(index);
}
inline ::subscribe::SourceType* SubscribeKeywordRequest::add_source_type() {
  // @@protoc_insertion_point(field_add:subscribe.SubscribeKeywordRequest.source_type)
  return source_type_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::subscribe::SourceType >*
SubscribeKeywordRequest::mutable_source_type() {
  // @@protoc_insertion_point(field_mutable_list:subscribe.SubscribeKeywordRequest.source_type)
  return &source_type_;
}
inline const ::google::protobuf::RepeatedPtrField< ::subscribe::SourceType >&
SubscribeKeywordRequest::source_type() const {
  // @@protoc_insertion_point(field_list:subscribe.SubscribeKeywordRequest.source_type)
  return source_type_;
}

// optional string email = 5;
inline void SubscribeKeywordRequest::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SubscribeKeywordRequest::email() const {
  // @@protoc_insertion_point(field_get:subscribe.SubscribeKeywordRequest.email)
  return email_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubscribeKeywordRequest::set_email(const ::std::string& value) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:subscribe.SubscribeKeywordRequest.email)
}
inline void SubscribeKeywordRequest::set_email(const char* value) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:subscribe.SubscribeKeywordRequest.email)
}
inline void SubscribeKeywordRequest::set_email(const char* value, size_t size) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:subscribe.SubscribeKeywordRequest.email)
}
inline ::std::string* SubscribeKeywordRequest::mutable_email() {
  
  // @@protoc_insertion_point(field_mutable:subscribe.SubscribeKeywordRequest.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SubscribeKeywordRequest::release_email() {
  // @@protoc_insertion_point(field_release:subscribe.SubscribeKeywordRequest.email)
  
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubscribeKeywordRequest::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    
  } else {
    
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:subscribe.SubscribeKeywordRequest.email)
}

// optional bool should_update_email = 6;
inline void SubscribeKeywordRequest::clear_should_update_email() {
  should_update_email_ = false;
}
inline bool SubscribeKeywordRequest::should_update_email() const {
  // @@protoc_insertion_point(field_get:subscribe.SubscribeKeywordRequest.should_update_email)
  return should_update_email_;
}
inline void SubscribeKeywordRequest::set_should_update_email(bool value) {
  
  should_update_email_ = value;
  // @@protoc_insertion_point(field_set:subscribe.SubscribeKeywordRequest.should_update_email)
}

inline const SubscribeKeywordRequest* SubscribeKeywordRequest::internal_default_instance() {
  return &SubscribeKeywordRequest_default_instance_.get();
}
// -------------------------------------------------------------------

// SubscribeKeywordResponse

// optional bool subscribe_success = 1;
inline void SubscribeKeywordResponse::clear_subscribe_success() {
  subscribe_success_ = false;
}
inline bool SubscribeKeywordResponse::subscribe_success() const {
  // @@protoc_insertion_point(field_get:subscribe.SubscribeKeywordResponse.subscribe_success)
  return subscribe_success_;
}
inline void SubscribeKeywordResponse::set_subscribe_success(bool value) {
  
  subscribe_success_ = value;
  // @@protoc_insertion_point(field_set:subscribe.SubscribeKeywordResponse.subscribe_success)
}

// optional .grpcCommon.GrpcError error = 2;
inline bool SubscribeKeywordResponse::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
inline void SubscribeKeywordResponse::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) delete error_;
  error_ = NULL;
}
inline const ::grpcCommon::GrpcError& SubscribeKeywordResponse::error() const {
  // @@protoc_insertion_point(field_get:subscribe.SubscribeKeywordResponse.error)
  return error_ != NULL ? *error_
                         : *::grpcCommon::GrpcError::internal_default_instance();
}
inline ::grpcCommon::GrpcError* SubscribeKeywordResponse::mutable_error() {
  
  if (error_ == NULL) {
    error_ = new ::grpcCommon::GrpcError;
  }
  // @@protoc_insertion_point(field_mutable:subscribe.SubscribeKeywordResponse.error)
  return error_;
}
inline ::grpcCommon::GrpcError* SubscribeKeywordResponse::release_error() {
  // @@protoc_insertion_point(field_release:subscribe.SubscribeKeywordResponse.error)
  
  ::grpcCommon::GrpcError* temp = error_;
  error_ = NULL;
  return temp;
}
inline void SubscribeKeywordResponse::set_allocated_error(::grpcCommon::GrpcError* error) {
  delete error_;
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:subscribe.SubscribeKeywordResponse.error)
}

inline const SubscribeKeywordResponse* SubscribeKeywordResponse::internal_default_instance() {
  return &SubscribeKeywordResponse_default_instance_.get();
}
// -------------------------------------------------------------------

// SubscribeKeywordListRequest

// optional string user_id = 1;
inline void SubscribeKeywordListRequest::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SubscribeKeywordListRequest::user_id() const {
  // @@protoc_insertion_point(field_get:subscribe.SubscribeKeywordListRequest.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubscribeKeywordListRequest::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:subscribe.SubscribeKeywordListRequest.user_id)
}
inline void SubscribeKeywordListRequest::set_user_id(const char* value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:subscribe.SubscribeKeywordListRequest.user_id)
}
inline void SubscribeKeywordListRequest::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:subscribe.SubscribeKeywordListRequest.user_id)
}
inline ::std::string* SubscribeKeywordListRequest::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:subscribe.SubscribeKeywordListRequest.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SubscribeKeywordListRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:subscribe.SubscribeKeywordListRequest.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubscribeKeywordListRequest::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:subscribe.SubscribeKeywordListRequest.user_id)
}

// optional int32 page_number = 2;
inline void SubscribeKeywordListRequest::clear_page_number() {
  page_number_ = 0;
}
inline ::google::protobuf::int32 SubscribeKeywordListRequest::page_number() const {
  // @@protoc_insertion_point(field_get:subscribe.SubscribeKeywordListRequest.page_number)
  return page_number_;
}
inline void SubscribeKeywordListRequest::set_page_number(::google::protobuf::int32 value) {
  
  page_number_ = value;
  // @@protoc_insertion_point(field_set:subscribe.SubscribeKeywordListRequest.page_number)
}

// optional int32 page_size = 3;
inline void SubscribeKeywordListRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::google::protobuf::int32 SubscribeKeywordListRequest::page_size() const {
  // @@protoc_insertion_point(field_get:subscribe.SubscribeKeywordListRequest.page_size)
  return page_size_;
}
inline void SubscribeKeywordListRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:subscribe.SubscribeKeywordListRequest.page_size)
}

inline const SubscribeKeywordListRequest* SubscribeKeywordListRequest::internal_default_instance() {
  return &SubscribeKeywordListRequest_default_instance_.get();
}
// -------------------------------------------------------------------

// SubscribeKeywordListResponse

// repeated .subscribe.SubscribeKeywordMessage subscribe_keyword = 1;
inline int SubscribeKeywordListResponse::subscribe_keyword_size() const {
  return subscribe_keyword_.size();
}
inline void SubscribeKeywordListResponse::clear_subscribe_keyword() {
  subscribe_keyword_.Clear();
}
inline const ::subscribe::SubscribeKeywordMessage& SubscribeKeywordListResponse::subscribe_keyword(int index) const {
  // @@protoc_insertion_point(field_get:subscribe.SubscribeKeywordListResponse.subscribe_keyword)
  return subscribe_keyword_.Get(index);
}
inline ::subscribe::SubscribeKeywordMessage* SubscribeKeywordListResponse::mutable_subscribe_keyword(int index) {
  // @@protoc_insertion_point(field_mutable:subscribe.SubscribeKeywordListResponse.subscribe_keyword)
  return subscribe_keyword_.Mutable(index);
}
inline ::subscribe::SubscribeKeywordMessage* SubscribeKeywordListResponse::add_subscribe_keyword() {
  // @@protoc_insertion_point(field_add:subscribe.SubscribeKeywordListResponse.subscribe_keyword)
  return subscribe_keyword_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::subscribe::SubscribeKeywordMessage >*
SubscribeKeywordListResponse::mutable_subscribe_keyword() {
  // @@protoc_insertion_point(field_mutable_list:subscribe.SubscribeKeywordListResponse.subscribe_keyword)
  return &subscribe_keyword_;
}
inline const ::google::protobuf::RepeatedPtrField< ::subscribe::SubscribeKeywordMessage >&
SubscribeKeywordListResponse::subscribe_keyword() const {
  // @@protoc_insertion_point(field_list:subscribe.SubscribeKeywordListResponse.subscribe_keyword)
  return subscribe_keyword_;
}

// optional bool has_more = 2;
inline void SubscribeKeywordListResponse::clear_has_more() {
  has_more_ = false;
}
inline bool SubscribeKeywordListResponse::has_more() const {
  // @@protoc_insertion_point(field_get:subscribe.SubscribeKeywordListResponse.has_more)
  return has_more_;
}
inline void SubscribeKeywordListResponse::set_has_more(bool value) {
  
  has_more_ = value;
  // @@protoc_insertion_point(field_set:subscribe.SubscribeKeywordListResponse.has_more)
}

// optional .grpcCommon.GrpcError error = 3;
inline bool SubscribeKeywordListResponse::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
inline void SubscribeKeywordListResponse::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) delete error_;
  error_ = NULL;
}
inline const ::grpcCommon::GrpcError& SubscribeKeywordListResponse::error() const {
  // @@protoc_insertion_point(field_get:subscribe.SubscribeKeywordListResponse.error)
  return error_ != NULL ? *error_
                         : *::grpcCommon::GrpcError::internal_default_instance();
}
inline ::grpcCommon::GrpcError* SubscribeKeywordListResponse::mutable_error() {
  
  if (error_ == NULL) {
    error_ = new ::grpcCommon::GrpcError;
  }
  // @@protoc_insertion_point(field_mutable:subscribe.SubscribeKeywordListResponse.error)
  return error_;
}
inline ::grpcCommon::GrpcError* SubscribeKeywordListResponse::release_error() {
  // @@protoc_insertion_point(field_release:subscribe.SubscribeKeywordListResponse.error)
  
  ::grpcCommon::GrpcError* temp = error_;
  error_ = NULL;
  return temp;
}
inline void SubscribeKeywordListResponse::set_allocated_error(::grpcCommon::GrpcError* error) {
  delete error_;
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:subscribe.SubscribeKeywordListResponse.error)
}

inline const SubscribeKeywordListResponse* SubscribeKeywordListResponse::internal_default_instance() {
  return &SubscribeKeywordListResponse_default_instance_.get();
}
// -------------------------------------------------------------------

// SubscribeKeywordMessage

// optional string user_id = 1;
inline void SubscribeKeywordMessage::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SubscribeKeywordMessage::user_id() const {
  // @@protoc_insertion_point(field_get:subscribe.SubscribeKeywordMessage.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubscribeKeywordMessage::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:subscribe.SubscribeKeywordMessage.user_id)
}
inline void SubscribeKeywordMessage::set_user_id(const char* value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:subscribe.SubscribeKeywordMessage.user_id)
}
inline void SubscribeKeywordMessage::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:subscribe.SubscribeKeywordMessage.user_id)
}
inline ::std::string* SubscribeKeywordMessage::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:subscribe.SubscribeKeywordMessage.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SubscribeKeywordMessage::release_user_id() {
  // @@protoc_insertion_point(field_release:subscribe.SubscribeKeywordMessage.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubscribeKeywordMessage::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:subscribe.SubscribeKeywordMessage.user_id)
}

// optional string subscribe_id = 2;
inline void SubscribeKeywordMessage::clear_subscribe_id() {
  subscribe_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SubscribeKeywordMessage::subscribe_id() const {
  // @@protoc_insertion_point(field_get:subscribe.SubscribeKeywordMessage.subscribe_id)
  return subscribe_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubscribeKeywordMessage::set_subscribe_id(const ::std::string& value) {
  
  subscribe_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:subscribe.SubscribeKeywordMessage.subscribe_id)
}
inline void SubscribeKeywordMessage::set_subscribe_id(const char* value) {
  
  subscribe_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:subscribe.SubscribeKeywordMessage.subscribe_id)
}
inline void SubscribeKeywordMessage::set_subscribe_id(const char* value, size_t size) {
  
  subscribe_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:subscribe.SubscribeKeywordMessage.subscribe_id)
}
inline ::std::string* SubscribeKeywordMessage::mutable_subscribe_id() {
  
  // @@protoc_insertion_point(field_mutable:subscribe.SubscribeKeywordMessage.subscribe_id)
  return subscribe_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SubscribeKeywordMessage::release_subscribe_id() {
  // @@protoc_insertion_point(field_release:subscribe.SubscribeKeywordMessage.subscribe_id)
  
  return subscribe_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubscribeKeywordMessage::set_allocated_subscribe_id(::std::string* subscribe_id) {
  if (subscribe_id != NULL) {
    
  } else {
    
  }
  subscribe_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subscribe_id);
  // @@protoc_insertion_point(field_set_allocated:subscribe.SubscribeKeywordMessage.subscribe_id)
}

// optional string docu_type = 3;
inline void SubscribeKeywordMessage::clear_docu_type() {
  docu_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SubscribeKeywordMessage::docu_type() const {
  // @@protoc_insertion_point(field_get:subscribe.SubscribeKeywordMessage.docu_type)
  return docu_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubscribeKeywordMessage::set_docu_type(const ::std::string& value) {
  
  docu_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:subscribe.SubscribeKeywordMessage.docu_type)
}
inline void SubscribeKeywordMessage::set_docu_type(const char* value) {
  
  docu_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:subscribe.SubscribeKeywordMessage.docu_type)
}
inline void SubscribeKeywordMessage::set_docu_type(const char* value, size_t size) {
  
  docu_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:subscribe.SubscribeKeywordMessage.docu_type)
}
inline ::std::string* SubscribeKeywordMessage::mutable_docu_type() {
  
  // @@protoc_insertion_point(field_mutable:subscribe.SubscribeKeywordMessage.docu_type)
  return docu_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SubscribeKeywordMessage::release_docu_type() {
  // @@protoc_insertion_point(field_release:subscribe.SubscribeKeywordMessage.docu_type)
  
  return docu_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubscribeKeywordMessage::set_allocated_docu_type(::std::string* docu_type) {
  if (docu_type != NULL) {
    
  } else {
    
  }
  docu_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), docu_type);
  // @@protoc_insertion_point(field_set_allocated:subscribe.SubscribeKeywordMessage.docu_type)
}

// optional string add_time = 4;
inline void SubscribeKeywordMessage::clear_add_time() {
  add_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SubscribeKeywordMessage::add_time() const {
  // @@protoc_insertion_point(field_get:subscribe.SubscribeKeywordMessage.add_time)
  return add_time_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubscribeKeywordMessage::set_add_time(const ::std::string& value) {
  
  add_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:subscribe.SubscribeKeywordMessage.add_time)
}
inline void SubscribeKeywordMessage::set_add_time(const char* value) {
  
  add_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:subscribe.SubscribeKeywordMessage.add_time)
}
inline void SubscribeKeywordMessage::set_add_time(const char* value, size_t size) {
  
  add_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:subscribe.SubscribeKeywordMessage.add_time)
}
inline ::std::string* SubscribeKeywordMessage::mutable_add_time() {
  
  // @@protoc_insertion_point(field_mutable:subscribe.SubscribeKeywordMessage.add_time)
  return add_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SubscribeKeywordMessage::release_add_time() {
  // @@protoc_insertion_point(field_release:subscribe.SubscribeKeywordMessage.add_time)
  
  return add_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubscribeKeywordMessage::set_allocated_add_time(::std::string* add_time) {
  if (add_time != NULL) {
    
  } else {
    
  }
  add_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), add_time);
  // @@protoc_insertion_point(field_set_allocated:subscribe.SubscribeKeywordMessage.add_time)
}

inline const SubscribeKeywordMessage* SubscribeKeywordMessage::internal_default_instance() {
  return &SubscribeKeywordMessage_default_instance_.get();
}
// -------------------------------------------------------------------

// DocType

// optional string ch_name = 1;
inline void DocType::clear_ch_name() {
  ch_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DocType::ch_name() const {
  // @@protoc_insertion_point(field_get:subscribe.DocType.ch_name)
  return ch_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DocType::set_ch_name(const ::std::string& value) {
  
  ch_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:subscribe.DocType.ch_name)
}
inline void DocType::set_ch_name(const char* value) {
  
  ch_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:subscribe.DocType.ch_name)
}
inline void DocType::set_ch_name(const char* value, size_t size) {
  
  ch_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:subscribe.DocType.ch_name)
}
inline ::std::string* DocType::mutable_ch_name() {
  
  // @@protoc_insertion_point(field_mutable:subscribe.DocType.ch_name)
  return ch_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DocType::release_ch_name() {
  // @@protoc_insertion_point(field_release:subscribe.DocType.ch_name)
  
  return ch_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DocType::set_allocated_ch_name(::std::string* ch_name) {
  if (ch_name != NULL) {
    
  } else {
    
  }
  ch_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ch_name);
  // @@protoc_insertion_point(field_set_allocated:subscribe.DocType.ch_name)
}

// optional string en_name = 2;
inline void DocType::clear_en_name() {
  en_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DocType::en_name() const {
  // @@protoc_insertion_point(field_get:subscribe.DocType.en_name)
  return en_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DocType::set_en_name(const ::std::string& value) {
  
  en_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:subscribe.DocType.en_name)
}
inline void DocType::set_en_name(const char* value) {
  
  en_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:subscribe.DocType.en_name)
}
inline void DocType::set_en_name(const char* value, size_t size) {
  
  en_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:subscribe.DocType.en_name)
}
inline ::std::string* DocType::mutable_en_name() {
  
  // @@protoc_insertion_point(field_mutable:subscribe.DocType.en_name)
  return en_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DocType::release_en_name() {
  // @@protoc_insertion_point(field_release:subscribe.DocType.en_name)
  
  return en_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DocType::set_allocated_en_name(::std::string* en_name) {
  if (en_name != NULL) {
    
  } else {
    
  }
  en_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), en_name);
  // @@protoc_insertion_point(field_set_allocated:subscribe.DocType.en_name)
}

inline const DocType* DocType::internal_default_instance() {
  return &DocType_default_instance_.get();
}
// -------------------------------------------------------------------

// SourceType

// optional string ch_name = 1;
inline void SourceType::clear_ch_name() {
  ch_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SourceType::ch_name() const {
  // @@protoc_insertion_point(field_get:subscribe.SourceType.ch_name)
  return ch_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SourceType::set_ch_name(const ::std::string& value) {
  
  ch_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:subscribe.SourceType.ch_name)
}
inline void SourceType::set_ch_name(const char* value) {
  
  ch_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:subscribe.SourceType.ch_name)
}
inline void SourceType::set_ch_name(const char* value, size_t size) {
  
  ch_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:subscribe.SourceType.ch_name)
}
inline ::std::string* SourceType::mutable_ch_name() {
  
  // @@protoc_insertion_point(field_mutable:subscribe.SourceType.ch_name)
  return ch_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SourceType::release_ch_name() {
  // @@protoc_insertion_point(field_release:subscribe.SourceType.ch_name)
  
  return ch_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SourceType::set_allocated_ch_name(::std::string* ch_name) {
  if (ch_name != NULL) {
    
  } else {
    
  }
  ch_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ch_name);
  // @@protoc_insertion_point(field_set_allocated:subscribe.SourceType.ch_name)
}

// optional string en_name = 2;
inline void SourceType::clear_en_name() {
  en_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SourceType::en_name() const {
  // @@protoc_insertion_point(field_get:subscribe.SourceType.en_name)
  return en_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SourceType::set_en_name(const ::std::string& value) {
  
  en_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:subscribe.SourceType.en_name)
}
inline void SourceType::set_en_name(const char* value) {
  
  en_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:subscribe.SourceType.en_name)
}
inline void SourceType::set_en_name(const char* value, size_t size) {
  
  en_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:subscribe.SourceType.en_name)
}
inline ::std::string* SourceType::mutable_en_name() {
  
  // @@protoc_insertion_point(field_mutable:subscribe.SourceType.en_name)
  return en_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SourceType::release_en_name() {
  // @@protoc_insertion_point(field_release:subscribe.SourceType.en_name)
  
  return en_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SourceType::set_allocated_en_name(::std::string* en_name) {
  if (en_name != NULL) {
    
  } else {
    
  }
  en_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), en_name);
  // @@protoc_insertion_point(field_set_allocated:subscribe.SourceType.en_name)
}

inline const SourceType* SourceType::internal_default_instance() {
  return &SourceType_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace subscribe

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto__INCLUDED
