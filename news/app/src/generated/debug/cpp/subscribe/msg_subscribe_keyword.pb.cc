// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: subscribe/msg_subscribe_keyword.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "subscribe/msg_subscribe_keyword.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace subscribe {

namespace {

const ::google::protobuf::Descriptor* SubscribePushEmailRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubscribePushEmailRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubscribePushEmailResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubscribePushEmailResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubscribeDocTypeListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubscribeDocTypeListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubscribeDocTypeListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubscribeDocTypeListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubscribeSourceTypeListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubscribeSourceTypeListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubscribeSourceTypeListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubscribeSourceTypeListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubscribeKeywordRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubscribeKeywordRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubscribeKeywordResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubscribeKeywordResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubscribeKeywordListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubscribeKeywordListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubscribeKeywordListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubscribeKeywordListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubscribeKeywordMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubscribeKeywordMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* DocType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DocType_reflection_ = NULL;
const ::google::protobuf::Descriptor* SourceType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SourceType_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto() {
  protobuf_AddDesc_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "subscribe/msg_subscribe_keyword.proto");
  GOOGLE_CHECK(file != NULL);
  SubscribePushEmailRequest_descriptor_ = file->message_type(0);
  static const int SubscribePushEmailRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribePushEmailRequest, user_id_),
  };
  SubscribePushEmailRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SubscribePushEmailRequest_descriptor_,
      SubscribePushEmailRequest::internal_default_instance(),
      SubscribePushEmailRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(SubscribePushEmailRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribePushEmailRequest, _internal_metadata_));
  SubscribePushEmailResponse_descriptor_ = file->message_type(1);
  static const int SubscribePushEmailResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribePushEmailResponse, email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribePushEmailResponse, has_email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribePushEmailResponse, error_),
  };
  SubscribePushEmailResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SubscribePushEmailResponse_descriptor_,
      SubscribePushEmailResponse::internal_default_instance(),
      SubscribePushEmailResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(SubscribePushEmailResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribePushEmailResponse, _internal_metadata_));
  SubscribeDocTypeListRequest_descriptor_ = file->message_type(2);
  static const int SubscribeDocTypeListRequest_offsets_[1] = {
  };
  SubscribeDocTypeListRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SubscribeDocTypeListRequest_descriptor_,
      SubscribeDocTypeListRequest::internal_default_instance(),
      SubscribeDocTypeListRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(SubscribeDocTypeListRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeDocTypeListRequest, _internal_metadata_));
  SubscribeDocTypeListResponse_descriptor_ = file->message_type(3);
  static const int SubscribeDocTypeListResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeDocTypeListResponse, doc_type_),
  };
  SubscribeDocTypeListResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SubscribeDocTypeListResponse_descriptor_,
      SubscribeDocTypeListResponse::internal_default_instance(),
      SubscribeDocTypeListResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(SubscribeDocTypeListResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeDocTypeListResponse, _internal_metadata_));
  SubscribeSourceTypeListRequest_descriptor_ = file->message_type(4);
  static const int SubscribeSourceTypeListRequest_offsets_[1] = {
  };
  SubscribeSourceTypeListRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SubscribeSourceTypeListRequest_descriptor_,
      SubscribeSourceTypeListRequest::internal_default_instance(),
      SubscribeSourceTypeListRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(SubscribeSourceTypeListRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeSourceTypeListRequest, _internal_metadata_));
  SubscribeSourceTypeListResponse_descriptor_ = file->message_type(5);
  static const int SubscribeSourceTypeListResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeSourceTypeListResponse, source_type_),
  };
  SubscribeSourceTypeListResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SubscribeSourceTypeListResponse_descriptor_,
      SubscribeSourceTypeListResponse::internal_default_instance(),
      SubscribeSourceTypeListResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(SubscribeSourceTypeListResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeSourceTypeListResponse, _internal_metadata_));
  SubscribeKeywordRequest_descriptor_ = file->message_type(6);
  static const int SubscribeKeywordRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeKeywordRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeKeywordRequest, keyword_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeKeywordRequest, doc_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeKeywordRequest, source_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeKeywordRequest, email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeKeywordRequest, should_update_email_),
  };
  SubscribeKeywordRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SubscribeKeywordRequest_descriptor_,
      SubscribeKeywordRequest::internal_default_instance(),
      SubscribeKeywordRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(SubscribeKeywordRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeKeywordRequest, _internal_metadata_));
  SubscribeKeywordResponse_descriptor_ = file->message_type(7);
  static const int SubscribeKeywordResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeKeywordResponse, subscribe_success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeKeywordResponse, error_),
  };
  SubscribeKeywordResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SubscribeKeywordResponse_descriptor_,
      SubscribeKeywordResponse::internal_default_instance(),
      SubscribeKeywordResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(SubscribeKeywordResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeKeywordResponse, _internal_metadata_));
  SubscribeKeywordListRequest_descriptor_ = file->message_type(8);
  static const int SubscribeKeywordListRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeKeywordListRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeKeywordListRequest, page_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeKeywordListRequest, page_size_),
  };
  SubscribeKeywordListRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SubscribeKeywordListRequest_descriptor_,
      SubscribeKeywordListRequest::internal_default_instance(),
      SubscribeKeywordListRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(SubscribeKeywordListRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeKeywordListRequest, _internal_metadata_));
  SubscribeKeywordListResponse_descriptor_ = file->message_type(9);
  static const int SubscribeKeywordListResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeKeywordListResponse, subscribe_keyword_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeKeywordListResponse, has_more_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeKeywordListResponse, error_),
  };
  SubscribeKeywordListResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SubscribeKeywordListResponse_descriptor_,
      SubscribeKeywordListResponse::internal_default_instance(),
      SubscribeKeywordListResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(SubscribeKeywordListResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeKeywordListResponse, _internal_metadata_));
  SubscribeKeywordMessage_descriptor_ = file->message_type(10);
  static const int SubscribeKeywordMessage_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeKeywordMessage, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeKeywordMessage, subscribe_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeKeywordMessage, docu_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeKeywordMessage, add_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeKeywordMessage, keyword_),
  };
  SubscribeKeywordMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SubscribeKeywordMessage_descriptor_,
      SubscribeKeywordMessage::internal_default_instance(),
      SubscribeKeywordMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(SubscribeKeywordMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeKeywordMessage, _internal_metadata_));
  DocType_descriptor_ = file->message_type(11);
  static const int DocType_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocType, ch_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocType, en_name_),
  };
  DocType_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DocType_descriptor_,
      DocType::internal_default_instance(),
      DocType_offsets_,
      -1,
      -1,
      -1,
      sizeof(DocType),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocType, _internal_metadata_));
  SourceType_descriptor_ = file->message_type(12);
  static const int SourceType_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceType, ch_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceType, en_name_),
  };
  SourceType_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SourceType_descriptor_,
      SourceType::internal_default_instance(),
      SourceType_offsets_,
      -1,
      -1,
      -1,
      sizeof(SourceType),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceType, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SubscribePushEmailRequest_descriptor_, SubscribePushEmailRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SubscribePushEmailResponse_descriptor_, SubscribePushEmailResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SubscribeDocTypeListRequest_descriptor_, SubscribeDocTypeListRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SubscribeDocTypeListResponse_descriptor_, SubscribeDocTypeListResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SubscribeSourceTypeListRequest_descriptor_, SubscribeSourceTypeListRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SubscribeSourceTypeListResponse_descriptor_, SubscribeSourceTypeListResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SubscribeKeywordRequest_descriptor_, SubscribeKeywordRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SubscribeKeywordResponse_descriptor_, SubscribeKeywordResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SubscribeKeywordListRequest_descriptor_, SubscribeKeywordListRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SubscribeKeywordListResponse_descriptor_, SubscribeKeywordListResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SubscribeKeywordMessage_descriptor_, SubscribeKeywordMessage::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DocType_descriptor_, DocType::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SourceType_descriptor_, SourceType::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto() {
  SubscribePushEmailRequest_default_instance_.Shutdown();
  delete SubscribePushEmailRequest_reflection_;
  SubscribePushEmailResponse_default_instance_.Shutdown();
  delete SubscribePushEmailResponse_reflection_;
  SubscribeDocTypeListRequest_default_instance_.Shutdown();
  delete SubscribeDocTypeListRequest_reflection_;
  SubscribeDocTypeListResponse_default_instance_.Shutdown();
  delete SubscribeDocTypeListResponse_reflection_;
  SubscribeSourceTypeListRequest_default_instance_.Shutdown();
  delete SubscribeSourceTypeListRequest_reflection_;
  SubscribeSourceTypeListResponse_default_instance_.Shutdown();
  delete SubscribeSourceTypeListResponse_reflection_;
  SubscribeKeywordRequest_default_instance_.Shutdown();
  delete SubscribeKeywordRequest_reflection_;
  SubscribeKeywordResponse_default_instance_.Shutdown();
  delete SubscribeKeywordResponse_reflection_;
  SubscribeKeywordListRequest_default_instance_.Shutdown();
  delete SubscribeKeywordListRequest_reflection_;
  SubscribeKeywordListResponse_default_instance_.Shutdown();
  delete SubscribeKeywordListResponse_reflection_;
  SubscribeKeywordMessage_default_instance_.Shutdown();
  delete SubscribeKeywordMessage_reflection_;
  DocType_default_instance_.Shutdown();
  delete DocType_reflection_;
  SourceType_default_instance_.Shutdown();
  delete SourceType_reflection_;
}

void protobuf_InitDefaults_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::protobuf_InitDefaults_google_2fprotobuf_2fany_2eproto();
  ::grpcCommon::protobuf_InitDefaults_grpcCommon_2fmsg_5ferror_2eproto();
  ::google::protobuf::internal::GetEmptyString();
  SubscribePushEmailRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  SubscribePushEmailResponse_default_instance_.DefaultConstruct();
  SubscribeDocTypeListRequest_default_instance_.DefaultConstruct();
  SubscribeDocTypeListResponse_default_instance_.DefaultConstruct();
  SubscribeSourceTypeListRequest_default_instance_.DefaultConstruct();
  SubscribeSourceTypeListResponse_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  SubscribeKeywordRequest_default_instance_.DefaultConstruct();
  SubscribeKeywordResponse_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  SubscribeKeywordListRequest_default_instance_.DefaultConstruct();
  SubscribeKeywordListResponse_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  SubscribeKeywordMessage_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  DocType_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  SourceType_default_instance_.DefaultConstruct();
  SubscribePushEmailRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  SubscribePushEmailResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  SubscribeDocTypeListRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  SubscribeDocTypeListResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  SubscribeSourceTypeListRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  SubscribeSourceTypeListResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  SubscribeKeywordRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  SubscribeKeywordResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  SubscribeKeywordListRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  SubscribeKeywordListResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  SubscribeKeywordMessage_default_instance_.get_mutable()->InitAsDefaultInstance();
  DocType_default_instance_.get_mutable()->InitAsDefaultInstance();
  SourceType_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto_once_);
void protobuf_InitDefaults_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto_once_,
                 &protobuf_InitDefaults_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto_impl);
}
void protobuf_AddDesc_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n%subscribe/msg_subscribe_keyword.proto\022"
    "\tsubscribe\032\031google/protobuf/any.proto\032\032g"
    "rpcCommon/msg_error.proto\",\n\031SubscribePu"
    "shEmailRequest\022\017\n\007user_id\030\001 \001(\t\"d\n\032Subsc"
    "ribePushEmailResponse\022\r\n\005email\030\001 \001(\t\022\021\n\t"
    "has_email\030\002 \001(\010\022$\n\005error\030\003 \001(\0132\025.grpcCom"
    "mon.GrpcError\"\035\n\033SubscribeDocTypeListReq"
    "uest\"D\n\034SubscribeDocTypeListResponse\022$\n\010"
    "doc_type\030\001 \003(\0132\022.subscribe.DocType\" \n\036Su"
    "bscribeSourceTypeListRequest\"M\n\037Subscrib"
    "eSourceTypeListResponse\022*\n\013source_type\030\001"
    " \003(\0132\025.subscribe.SourceType\"\271\001\n\027Subscrib"
    "eKeywordRequest\022\017\n\007user_id\030\001 \001(\t\022\017\n\007keyw"
    "ord\030\002 \001(\t\022$\n\010doc_type\030\003 \003(\0132\022.subscribe."
    "DocType\022*\n\013source_type\030\004 \003(\0132\025.subscribe"
    ".SourceType\022\r\n\005email\030\005 \001(\t\022\033\n\023should_upd"
    "ate_email\030\006 \001(\010\"[\n\030SubscribeKeywordRespo"
    "nse\022\031\n\021subscribe_success\030\001 \001(\010\022$\n\005error\030"
    "\002 \001(\0132\025.grpcCommon.GrpcError\"V\n\033Subscrib"
    "eKeywordListRequest\022\017\n\007user_id\030\001 \001(\t\022\023\n\013"
    "page_number\030\002 \001(\005\022\021\n\tpage_size\030\003 \001(\005\"\225\001\n"
    "\034SubscribeKeywordListResponse\022=\n\021subscri"
    "be_keyword\030\001 \003(\0132\".subscribe.SubscribeKe"
    "ywordMessage\022\020\n\010has_more\030\002 \001(\010\022$\n\005error\030"
    "\003 \001(\0132\025.grpcCommon.GrpcError\"v\n\027Subscrib"
    "eKeywordMessage\022\017\n\007user_id\030\001 \001(\t\022\024\n\014subs"
    "cribe_id\030\002 \001(\t\022\021\n\tdocu_type\030\003 \001(\t\022\020\n\010add"
    "_time\030\004 \001(\t\022\017\n\007keyword\030\005 \001(\t\"+\n\007DocType\022"
    "\017\n\007ch_name\030\001 \001(\t\022\017\n\007en_name\030\002 \001(\t\".\n\nSou"
    "rceType\022\017\n\007ch_name\030\001 \001(\t\022\017\n\007en_name\030\002 \001("
    "\tB \n\025com.wanfang.subscribeP\001\242\002\004WFPRb\006pro"
    "to3", 1243);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "subscribe/msg_subscribe_keyword.proto", &protobuf_RegisterTypes);
  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fany_2eproto();
  ::grpcCommon::protobuf_AddDesc_grpcCommon_2fmsg_5ferror_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto_once_);
void protobuf_AddDesc_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto_once_,
                 &protobuf_AddDesc_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto {
  StaticDescriptorInitializer_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto() {
    protobuf_AddDesc_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto();
  }
} static_descriptor_initializer_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubscribePushEmailRequest::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubscribePushEmailRequest::SubscribePushEmailRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:subscribe.SubscribePushEmailRequest)
}

void SubscribePushEmailRequest::InitAsDefaultInstance() {
}

SubscribePushEmailRequest::SubscribePushEmailRequest(const SubscribePushEmailRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:subscribe.SubscribePushEmailRequest)
}

void SubscribePushEmailRequest::SharedCtor() {
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

SubscribePushEmailRequest::~SubscribePushEmailRequest() {
  // @@protoc_insertion_point(destructor:subscribe.SubscribePushEmailRequest)
  SharedDtor();
}

void SubscribePushEmailRequest::SharedDtor() {
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SubscribePushEmailRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubscribePushEmailRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubscribePushEmailRequest_descriptor_;
}

const SubscribePushEmailRequest& SubscribePushEmailRequest::default_instance() {
  protobuf_InitDefaults_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SubscribePushEmailRequest> SubscribePushEmailRequest_default_instance_;

SubscribePushEmailRequest* SubscribePushEmailRequest::New(::google::protobuf::Arena* arena) const {
  SubscribePushEmailRequest* n = new SubscribePushEmailRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SubscribePushEmailRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:subscribe.SubscribePushEmailRequest)
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SubscribePushEmailRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:subscribe.SubscribePushEmailRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string user_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "subscribe.SubscribePushEmailRequest.user_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:subscribe.SubscribePushEmailRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:subscribe.SubscribePushEmailRequest)
  return false;
#undef DO_
}

void SubscribePushEmailRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:subscribe.SubscribePushEmailRequest)
  // optional string user_id = 1;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "subscribe.SubscribePushEmailRequest.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:subscribe.SubscribePushEmailRequest)
}

::google::protobuf::uint8* SubscribePushEmailRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:subscribe.SubscribePushEmailRequest)
  // optional string user_id = 1;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "subscribe.SubscribePushEmailRequest.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:subscribe.SubscribePushEmailRequest)
  return target;
}

size_t SubscribePushEmailRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:subscribe.SubscribePushEmailRequest)
  size_t total_size = 0;

  // optional string user_id = 1;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubscribePushEmailRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:subscribe.SubscribePushEmailRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SubscribePushEmailRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SubscribePushEmailRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:subscribe.SubscribePushEmailRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:subscribe.SubscribePushEmailRequest)
    UnsafeMergeFrom(*source);
  }
}

void SubscribePushEmailRequest::MergeFrom(const SubscribePushEmailRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:subscribe.SubscribePushEmailRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SubscribePushEmailRequest::UnsafeMergeFrom(const SubscribePushEmailRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.user_id().size() > 0) {

    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
}

void SubscribePushEmailRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:subscribe.SubscribePushEmailRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribePushEmailRequest::CopyFrom(const SubscribePushEmailRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:subscribe.SubscribePushEmailRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SubscribePushEmailRequest::IsInitialized() const {

  return true;
}

void SubscribePushEmailRequest::Swap(SubscribePushEmailRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubscribePushEmailRequest::InternalSwap(SubscribePushEmailRequest* other) {
  user_id_.Swap(&other->user_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SubscribePushEmailRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubscribePushEmailRequest_descriptor_;
  metadata.reflection = SubscribePushEmailRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SubscribePushEmailRequest

// optional string user_id = 1;
void SubscribePushEmailRequest::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SubscribePushEmailRequest::user_id() const {
  // @@protoc_insertion_point(field_get:subscribe.SubscribePushEmailRequest.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SubscribePushEmailRequest::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:subscribe.SubscribePushEmailRequest.user_id)
}
void SubscribePushEmailRequest::set_user_id(const char* value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:subscribe.SubscribePushEmailRequest.user_id)
}
void SubscribePushEmailRequest::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:subscribe.SubscribePushEmailRequest.user_id)
}
::std::string* SubscribePushEmailRequest::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:subscribe.SubscribePushEmailRequest.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SubscribePushEmailRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:subscribe.SubscribePushEmailRequest.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SubscribePushEmailRequest::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:subscribe.SubscribePushEmailRequest.user_id)
}

inline const SubscribePushEmailRequest* SubscribePushEmailRequest::internal_default_instance() {
  return &SubscribePushEmailRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubscribePushEmailResponse::kEmailFieldNumber;
const int SubscribePushEmailResponse::kHasEmailFieldNumber;
const int SubscribePushEmailResponse::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubscribePushEmailResponse::SubscribePushEmailResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:subscribe.SubscribePushEmailResponse)
}

void SubscribePushEmailResponse::InitAsDefaultInstance() {
  error_ = const_cast< ::grpcCommon::GrpcError*>(
      ::grpcCommon::GrpcError::internal_default_instance());
}

SubscribePushEmailResponse::SubscribePushEmailResponse(const SubscribePushEmailResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:subscribe.SubscribePushEmailResponse)
}

void SubscribePushEmailResponse::SharedCtor() {
  email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_ = NULL;
  has_email_ = false;
  _cached_size_ = 0;
}

SubscribePushEmailResponse::~SubscribePushEmailResponse() {
  // @@protoc_insertion_point(destructor:subscribe.SubscribePushEmailResponse)
  SharedDtor();
}

void SubscribePushEmailResponse::SharedDtor() {
  email_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &SubscribePushEmailResponse_default_instance_.get()) {
    delete error_;
  }
}

void SubscribePushEmailResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubscribePushEmailResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubscribePushEmailResponse_descriptor_;
}

const SubscribePushEmailResponse& SubscribePushEmailResponse::default_instance() {
  protobuf_InitDefaults_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SubscribePushEmailResponse> SubscribePushEmailResponse_default_instance_;

SubscribePushEmailResponse* SubscribePushEmailResponse::New(::google::protobuf::Arena* arena) const {
  SubscribePushEmailResponse* n = new SubscribePushEmailResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SubscribePushEmailResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:subscribe.SubscribePushEmailResponse)
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  has_email_ = false;
  if (GetArenaNoVirtual() == NULL && error_ != NULL) delete error_;
  error_ = NULL;
}

bool SubscribePushEmailResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:subscribe.SubscribePushEmailResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string email = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->email().data(), this->email().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "subscribe.SubscribePushEmailResponse.email"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_has_email;
        break;
      }

      // optional bool has_email = 2;
      case 2: {
        if (tag == 16) {
         parse_has_email:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_email_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_error;
        break;
      }

      // optional .grpcCommon.GrpcError error = 3;
      case 3: {
        if (tag == 26) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:subscribe.SubscribePushEmailResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:subscribe.SubscribePushEmailResponse)
  return false;
#undef DO_
}

void SubscribePushEmailResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:subscribe.SubscribePushEmailResponse)
  // optional string email = 1;
  if (this->email().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "subscribe.SubscribePushEmailResponse.email");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->email(), output);
  }

  // optional bool has_email = 2;
  if (this->has_email() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->has_email(), output);
  }

  // optional .grpcCommon.GrpcError error = 3;
  if (this->has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->error_, output);
  }

  // @@protoc_insertion_point(serialize_end:subscribe.SubscribePushEmailResponse)
}

::google::protobuf::uint8* SubscribePushEmailResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:subscribe.SubscribePushEmailResponse)
  // optional string email = 1;
  if (this->email().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "subscribe.SubscribePushEmailResponse.email");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->email(), target);
  }

  // optional bool has_email = 2;
  if (this->has_email() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->has_email(), target);
  }

  // optional .grpcCommon.GrpcError error = 3;
  if (this->has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->error_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:subscribe.SubscribePushEmailResponse)
  return target;
}

size_t SubscribePushEmailResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:subscribe.SubscribePushEmailResponse)
  size_t total_size = 0;

  // optional string email = 1;
  if (this->email().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->email());
  }

  // optional bool has_email = 2;
  if (this->has_email() != 0) {
    total_size += 1 + 1;
  }

  // optional .grpcCommon.GrpcError error = 3;
  if (this->has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->error_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubscribePushEmailResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:subscribe.SubscribePushEmailResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SubscribePushEmailResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SubscribePushEmailResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:subscribe.SubscribePushEmailResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:subscribe.SubscribePushEmailResponse)
    UnsafeMergeFrom(*source);
  }
}

void SubscribePushEmailResponse::MergeFrom(const SubscribePushEmailResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:subscribe.SubscribePushEmailResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SubscribePushEmailResponse::UnsafeMergeFrom(const SubscribePushEmailResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.email().size() > 0) {

    email_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  if (from.has_email() != 0) {
    set_has_email(from.has_email());
  }
  if (from.has_error()) {
    mutable_error()->::grpcCommon::GrpcError::MergeFrom(from.error());
  }
}

void SubscribePushEmailResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:subscribe.SubscribePushEmailResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribePushEmailResponse::CopyFrom(const SubscribePushEmailResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:subscribe.SubscribePushEmailResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SubscribePushEmailResponse::IsInitialized() const {

  return true;
}

void SubscribePushEmailResponse::Swap(SubscribePushEmailResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubscribePushEmailResponse::InternalSwap(SubscribePushEmailResponse* other) {
  email_.Swap(&other->email_);
  std::swap(has_email_, other->has_email_);
  std::swap(error_, other->error_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SubscribePushEmailResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubscribePushEmailResponse_descriptor_;
  metadata.reflection = SubscribePushEmailResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SubscribePushEmailResponse

// optional string email = 1;
void SubscribePushEmailResponse::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SubscribePushEmailResponse::email() const {
  // @@protoc_insertion_point(field_get:subscribe.SubscribePushEmailResponse.email)
  return email_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SubscribePushEmailResponse::set_email(const ::std::string& value) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:subscribe.SubscribePushEmailResponse.email)
}
void SubscribePushEmailResponse::set_email(const char* value) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:subscribe.SubscribePushEmailResponse.email)
}
void SubscribePushEmailResponse::set_email(const char* value, size_t size) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:subscribe.SubscribePushEmailResponse.email)
}
::std::string* SubscribePushEmailResponse::mutable_email() {
  
  // @@protoc_insertion_point(field_mutable:subscribe.SubscribePushEmailResponse.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SubscribePushEmailResponse::release_email() {
  // @@protoc_insertion_point(field_release:subscribe.SubscribePushEmailResponse.email)
  
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SubscribePushEmailResponse::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    
  } else {
    
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:subscribe.SubscribePushEmailResponse.email)
}

// optional bool has_email = 2;
void SubscribePushEmailResponse::clear_has_email() {
  has_email_ = false;
}
bool SubscribePushEmailResponse::has_email() const {
  // @@protoc_insertion_point(field_get:subscribe.SubscribePushEmailResponse.has_email)
  return has_email_;
}
void SubscribePushEmailResponse::set_has_email(bool value) {
  
  has_email_ = value;
  // @@protoc_insertion_point(field_set:subscribe.SubscribePushEmailResponse.has_email)
}

// optional .grpcCommon.GrpcError error = 3;
bool SubscribePushEmailResponse::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
void SubscribePushEmailResponse::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) delete error_;
  error_ = NULL;
}
const ::grpcCommon::GrpcError& SubscribePushEmailResponse::error() const {
  // @@protoc_insertion_point(field_get:subscribe.SubscribePushEmailResponse.error)
  return error_ != NULL ? *error_
                         : *::grpcCommon::GrpcError::internal_default_instance();
}
::grpcCommon::GrpcError* SubscribePushEmailResponse::mutable_error() {
  
  if (error_ == NULL) {
    error_ = new ::grpcCommon::GrpcError;
  }
  // @@protoc_insertion_point(field_mutable:subscribe.SubscribePushEmailResponse.error)
  return error_;
}
::grpcCommon::GrpcError* SubscribePushEmailResponse::release_error() {
  // @@protoc_insertion_point(field_release:subscribe.SubscribePushEmailResponse.error)
  
  ::grpcCommon::GrpcError* temp = error_;
  error_ = NULL;
  return temp;
}
void SubscribePushEmailResponse::set_allocated_error(::grpcCommon::GrpcError* error) {
  delete error_;
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:subscribe.SubscribePushEmailResponse.error)
}

inline const SubscribePushEmailResponse* SubscribePushEmailResponse::internal_default_instance() {
  return &SubscribePushEmailResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubscribeDocTypeListRequest::SubscribeDocTypeListRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:subscribe.SubscribeDocTypeListRequest)
}

void SubscribeDocTypeListRequest::InitAsDefaultInstance() {
}

SubscribeDocTypeListRequest::SubscribeDocTypeListRequest(const SubscribeDocTypeListRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:subscribe.SubscribeDocTypeListRequest)
}

void SubscribeDocTypeListRequest::SharedCtor() {
  _cached_size_ = 0;
}

SubscribeDocTypeListRequest::~SubscribeDocTypeListRequest() {
  // @@protoc_insertion_point(destructor:subscribe.SubscribeDocTypeListRequest)
  SharedDtor();
}

void SubscribeDocTypeListRequest::SharedDtor() {
}

void SubscribeDocTypeListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubscribeDocTypeListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubscribeDocTypeListRequest_descriptor_;
}

const SubscribeDocTypeListRequest& SubscribeDocTypeListRequest::default_instance() {
  protobuf_InitDefaults_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SubscribeDocTypeListRequest> SubscribeDocTypeListRequest_default_instance_;

SubscribeDocTypeListRequest* SubscribeDocTypeListRequest::New(::google::protobuf::Arena* arena) const {
  SubscribeDocTypeListRequest* n = new SubscribeDocTypeListRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SubscribeDocTypeListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:subscribe.SubscribeDocTypeListRequest)
}

bool SubscribeDocTypeListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:subscribe.SubscribeDocTypeListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:subscribe.SubscribeDocTypeListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:subscribe.SubscribeDocTypeListRequest)
  return false;
#undef DO_
}

void SubscribeDocTypeListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:subscribe.SubscribeDocTypeListRequest)
  // @@protoc_insertion_point(serialize_end:subscribe.SubscribeDocTypeListRequest)
}

::google::protobuf::uint8* SubscribeDocTypeListRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:subscribe.SubscribeDocTypeListRequest)
  // @@protoc_insertion_point(serialize_to_array_end:subscribe.SubscribeDocTypeListRequest)
  return target;
}

size_t SubscribeDocTypeListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:subscribe.SubscribeDocTypeListRequest)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubscribeDocTypeListRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:subscribe.SubscribeDocTypeListRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SubscribeDocTypeListRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SubscribeDocTypeListRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:subscribe.SubscribeDocTypeListRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:subscribe.SubscribeDocTypeListRequest)
    UnsafeMergeFrom(*source);
  }
}

void SubscribeDocTypeListRequest::MergeFrom(const SubscribeDocTypeListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:subscribe.SubscribeDocTypeListRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SubscribeDocTypeListRequest::UnsafeMergeFrom(const SubscribeDocTypeListRequest& from) {
  GOOGLE_DCHECK(&from != this);
}

void SubscribeDocTypeListRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:subscribe.SubscribeDocTypeListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeDocTypeListRequest::CopyFrom(const SubscribeDocTypeListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:subscribe.SubscribeDocTypeListRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SubscribeDocTypeListRequest::IsInitialized() const {

  return true;
}

void SubscribeDocTypeListRequest::Swap(SubscribeDocTypeListRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubscribeDocTypeListRequest::InternalSwap(SubscribeDocTypeListRequest* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SubscribeDocTypeListRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubscribeDocTypeListRequest_descriptor_;
  metadata.reflection = SubscribeDocTypeListRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SubscribeDocTypeListRequest

inline const SubscribeDocTypeListRequest* SubscribeDocTypeListRequest::internal_default_instance() {
  return &SubscribeDocTypeListRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubscribeDocTypeListResponse::kDocTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubscribeDocTypeListResponse::SubscribeDocTypeListResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:subscribe.SubscribeDocTypeListResponse)
}

void SubscribeDocTypeListResponse::InitAsDefaultInstance() {
}

SubscribeDocTypeListResponse::SubscribeDocTypeListResponse(const SubscribeDocTypeListResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:subscribe.SubscribeDocTypeListResponse)
}

void SubscribeDocTypeListResponse::SharedCtor() {
  _cached_size_ = 0;
}

SubscribeDocTypeListResponse::~SubscribeDocTypeListResponse() {
  // @@protoc_insertion_point(destructor:subscribe.SubscribeDocTypeListResponse)
  SharedDtor();
}

void SubscribeDocTypeListResponse::SharedDtor() {
}

void SubscribeDocTypeListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubscribeDocTypeListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubscribeDocTypeListResponse_descriptor_;
}

const SubscribeDocTypeListResponse& SubscribeDocTypeListResponse::default_instance() {
  protobuf_InitDefaults_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SubscribeDocTypeListResponse> SubscribeDocTypeListResponse_default_instance_;

SubscribeDocTypeListResponse* SubscribeDocTypeListResponse::New(::google::protobuf::Arena* arena) const {
  SubscribeDocTypeListResponse* n = new SubscribeDocTypeListResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SubscribeDocTypeListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:subscribe.SubscribeDocTypeListResponse)
  doc_type_.Clear();
}

bool SubscribeDocTypeListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:subscribe.SubscribeDocTypeListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .subscribe.DocType doc_type = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_doc_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_doc_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_doc_type;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:subscribe.SubscribeDocTypeListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:subscribe.SubscribeDocTypeListResponse)
  return false;
#undef DO_
}

void SubscribeDocTypeListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:subscribe.SubscribeDocTypeListResponse)
  // repeated .subscribe.DocType doc_type = 1;
  for (unsigned int i = 0, n = this->doc_type_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->doc_type(i), output);
  }

  // @@protoc_insertion_point(serialize_end:subscribe.SubscribeDocTypeListResponse)
}

::google::protobuf::uint8* SubscribeDocTypeListResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:subscribe.SubscribeDocTypeListResponse)
  // repeated .subscribe.DocType doc_type = 1;
  for (unsigned int i = 0, n = this->doc_type_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->doc_type(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:subscribe.SubscribeDocTypeListResponse)
  return target;
}

size_t SubscribeDocTypeListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:subscribe.SubscribeDocTypeListResponse)
  size_t total_size = 0;

  // repeated .subscribe.DocType doc_type = 1;
  {
    unsigned int count = this->doc_type_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->doc_type(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubscribeDocTypeListResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:subscribe.SubscribeDocTypeListResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SubscribeDocTypeListResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SubscribeDocTypeListResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:subscribe.SubscribeDocTypeListResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:subscribe.SubscribeDocTypeListResponse)
    UnsafeMergeFrom(*source);
  }
}

void SubscribeDocTypeListResponse::MergeFrom(const SubscribeDocTypeListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:subscribe.SubscribeDocTypeListResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SubscribeDocTypeListResponse::UnsafeMergeFrom(const SubscribeDocTypeListResponse& from) {
  GOOGLE_DCHECK(&from != this);
  doc_type_.MergeFrom(from.doc_type_);
}

void SubscribeDocTypeListResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:subscribe.SubscribeDocTypeListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeDocTypeListResponse::CopyFrom(const SubscribeDocTypeListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:subscribe.SubscribeDocTypeListResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SubscribeDocTypeListResponse::IsInitialized() const {

  return true;
}

void SubscribeDocTypeListResponse::Swap(SubscribeDocTypeListResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubscribeDocTypeListResponse::InternalSwap(SubscribeDocTypeListResponse* other) {
  doc_type_.UnsafeArenaSwap(&other->doc_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SubscribeDocTypeListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubscribeDocTypeListResponse_descriptor_;
  metadata.reflection = SubscribeDocTypeListResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SubscribeDocTypeListResponse

// repeated .subscribe.DocType doc_type = 1;
int SubscribeDocTypeListResponse::doc_type_size() const {
  return doc_type_.size();
}
void SubscribeDocTypeListResponse::clear_doc_type() {
  doc_type_.Clear();
}
const ::subscribe::DocType& SubscribeDocTypeListResponse::doc_type(int index) const {
  // @@protoc_insertion_point(field_get:subscribe.SubscribeDocTypeListResponse.doc_type)
  return doc_type_.Get(index);
}
::subscribe::DocType* SubscribeDocTypeListResponse::mutable_doc_type(int index) {
  // @@protoc_insertion_point(field_mutable:subscribe.SubscribeDocTypeListResponse.doc_type)
  return doc_type_.Mutable(index);
}
::subscribe::DocType* SubscribeDocTypeListResponse::add_doc_type() {
  // @@protoc_insertion_point(field_add:subscribe.SubscribeDocTypeListResponse.doc_type)
  return doc_type_.Add();
}
::google::protobuf::RepeatedPtrField< ::subscribe::DocType >*
SubscribeDocTypeListResponse::mutable_doc_type() {
  // @@protoc_insertion_point(field_mutable_list:subscribe.SubscribeDocTypeListResponse.doc_type)
  return &doc_type_;
}
const ::google::protobuf::RepeatedPtrField< ::subscribe::DocType >&
SubscribeDocTypeListResponse::doc_type() const {
  // @@protoc_insertion_point(field_list:subscribe.SubscribeDocTypeListResponse.doc_type)
  return doc_type_;
}

inline const SubscribeDocTypeListResponse* SubscribeDocTypeListResponse::internal_default_instance() {
  return &SubscribeDocTypeListResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubscribeSourceTypeListRequest::SubscribeSourceTypeListRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:subscribe.SubscribeSourceTypeListRequest)
}

void SubscribeSourceTypeListRequest::InitAsDefaultInstance() {
}

SubscribeSourceTypeListRequest::SubscribeSourceTypeListRequest(const SubscribeSourceTypeListRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:subscribe.SubscribeSourceTypeListRequest)
}

void SubscribeSourceTypeListRequest::SharedCtor() {
  _cached_size_ = 0;
}

SubscribeSourceTypeListRequest::~SubscribeSourceTypeListRequest() {
  // @@protoc_insertion_point(destructor:subscribe.SubscribeSourceTypeListRequest)
  SharedDtor();
}

void SubscribeSourceTypeListRequest::SharedDtor() {
}

void SubscribeSourceTypeListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubscribeSourceTypeListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubscribeSourceTypeListRequest_descriptor_;
}

const SubscribeSourceTypeListRequest& SubscribeSourceTypeListRequest::default_instance() {
  protobuf_InitDefaults_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SubscribeSourceTypeListRequest> SubscribeSourceTypeListRequest_default_instance_;

SubscribeSourceTypeListRequest* SubscribeSourceTypeListRequest::New(::google::protobuf::Arena* arena) const {
  SubscribeSourceTypeListRequest* n = new SubscribeSourceTypeListRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SubscribeSourceTypeListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:subscribe.SubscribeSourceTypeListRequest)
}

bool SubscribeSourceTypeListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:subscribe.SubscribeSourceTypeListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:subscribe.SubscribeSourceTypeListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:subscribe.SubscribeSourceTypeListRequest)
  return false;
#undef DO_
}

void SubscribeSourceTypeListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:subscribe.SubscribeSourceTypeListRequest)
  // @@protoc_insertion_point(serialize_end:subscribe.SubscribeSourceTypeListRequest)
}

::google::protobuf::uint8* SubscribeSourceTypeListRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:subscribe.SubscribeSourceTypeListRequest)
  // @@protoc_insertion_point(serialize_to_array_end:subscribe.SubscribeSourceTypeListRequest)
  return target;
}

size_t SubscribeSourceTypeListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:subscribe.SubscribeSourceTypeListRequest)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubscribeSourceTypeListRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:subscribe.SubscribeSourceTypeListRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SubscribeSourceTypeListRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SubscribeSourceTypeListRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:subscribe.SubscribeSourceTypeListRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:subscribe.SubscribeSourceTypeListRequest)
    UnsafeMergeFrom(*source);
  }
}

void SubscribeSourceTypeListRequest::MergeFrom(const SubscribeSourceTypeListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:subscribe.SubscribeSourceTypeListRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SubscribeSourceTypeListRequest::UnsafeMergeFrom(const SubscribeSourceTypeListRequest& from) {
  GOOGLE_DCHECK(&from != this);
}

void SubscribeSourceTypeListRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:subscribe.SubscribeSourceTypeListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeSourceTypeListRequest::CopyFrom(const SubscribeSourceTypeListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:subscribe.SubscribeSourceTypeListRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SubscribeSourceTypeListRequest::IsInitialized() const {

  return true;
}

void SubscribeSourceTypeListRequest::Swap(SubscribeSourceTypeListRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubscribeSourceTypeListRequest::InternalSwap(SubscribeSourceTypeListRequest* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SubscribeSourceTypeListRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubscribeSourceTypeListRequest_descriptor_;
  metadata.reflection = SubscribeSourceTypeListRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SubscribeSourceTypeListRequest

inline const SubscribeSourceTypeListRequest* SubscribeSourceTypeListRequest::internal_default_instance() {
  return &SubscribeSourceTypeListRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubscribeSourceTypeListResponse::kSourceTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubscribeSourceTypeListResponse::SubscribeSourceTypeListResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:subscribe.SubscribeSourceTypeListResponse)
}

void SubscribeSourceTypeListResponse::InitAsDefaultInstance() {
}

SubscribeSourceTypeListResponse::SubscribeSourceTypeListResponse(const SubscribeSourceTypeListResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:subscribe.SubscribeSourceTypeListResponse)
}

void SubscribeSourceTypeListResponse::SharedCtor() {
  _cached_size_ = 0;
}

SubscribeSourceTypeListResponse::~SubscribeSourceTypeListResponse() {
  // @@protoc_insertion_point(destructor:subscribe.SubscribeSourceTypeListResponse)
  SharedDtor();
}

void SubscribeSourceTypeListResponse::SharedDtor() {
}

void SubscribeSourceTypeListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubscribeSourceTypeListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubscribeSourceTypeListResponse_descriptor_;
}

const SubscribeSourceTypeListResponse& SubscribeSourceTypeListResponse::default_instance() {
  protobuf_InitDefaults_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SubscribeSourceTypeListResponse> SubscribeSourceTypeListResponse_default_instance_;

SubscribeSourceTypeListResponse* SubscribeSourceTypeListResponse::New(::google::protobuf::Arena* arena) const {
  SubscribeSourceTypeListResponse* n = new SubscribeSourceTypeListResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SubscribeSourceTypeListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:subscribe.SubscribeSourceTypeListResponse)
  source_type_.Clear();
}

bool SubscribeSourceTypeListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:subscribe.SubscribeSourceTypeListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .subscribe.SourceType source_type = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_source_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_source_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_source_type;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:subscribe.SubscribeSourceTypeListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:subscribe.SubscribeSourceTypeListResponse)
  return false;
#undef DO_
}

void SubscribeSourceTypeListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:subscribe.SubscribeSourceTypeListResponse)
  // repeated .subscribe.SourceType source_type = 1;
  for (unsigned int i = 0, n = this->source_type_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->source_type(i), output);
  }

  // @@protoc_insertion_point(serialize_end:subscribe.SubscribeSourceTypeListResponse)
}

::google::protobuf::uint8* SubscribeSourceTypeListResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:subscribe.SubscribeSourceTypeListResponse)
  // repeated .subscribe.SourceType source_type = 1;
  for (unsigned int i = 0, n = this->source_type_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->source_type(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:subscribe.SubscribeSourceTypeListResponse)
  return target;
}

size_t SubscribeSourceTypeListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:subscribe.SubscribeSourceTypeListResponse)
  size_t total_size = 0;

  // repeated .subscribe.SourceType source_type = 1;
  {
    unsigned int count = this->source_type_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->source_type(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubscribeSourceTypeListResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:subscribe.SubscribeSourceTypeListResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SubscribeSourceTypeListResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SubscribeSourceTypeListResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:subscribe.SubscribeSourceTypeListResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:subscribe.SubscribeSourceTypeListResponse)
    UnsafeMergeFrom(*source);
  }
}

void SubscribeSourceTypeListResponse::MergeFrom(const SubscribeSourceTypeListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:subscribe.SubscribeSourceTypeListResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SubscribeSourceTypeListResponse::UnsafeMergeFrom(const SubscribeSourceTypeListResponse& from) {
  GOOGLE_DCHECK(&from != this);
  source_type_.MergeFrom(from.source_type_);
}

void SubscribeSourceTypeListResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:subscribe.SubscribeSourceTypeListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeSourceTypeListResponse::CopyFrom(const SubscribeSourceTypeListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:subscribe.SubscribeSourceTypeListResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SubscribeSourceTypeListResponse::IsInitialized() const {

  return true;
}

void SubscribeSourceTypeListResponse::Swap(SubscribeSourceTypeListResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubscribeSourceTypeListResponse::InternalSwap(SubscribeSourceTypeListResponse* other) {
  source_type_.UnsafeArenaSwap(&other->source_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SubscribeSourceTypeListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubscribeSourceTypeListResponse_descriptor_;
  metadata.reflection = SubscribeSourceTypeListResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SubscribeSourceTypeListResponse

// repeated .subscribe.SourceType source_type = 1;
int SubscribeSourceTypeListResponse::source_type_size() const {
  return source_type_.size();
}
void SubscribeSourceTypeListResponse::clear_source_type() {
  source_type_.Clear();
}
const ::subscribe::SourceType& SubscribeSourceTypeListResponse::source_type(int index) const {
  // @@protoc_insertion_point(field_get:subscribe.SubscribeSourceTypeListResponse.source_type)
  return source_type_.Get(index);
}
::subscribe::SourceType* SubscribeSourceTypeListResponse::mutable_source_type(int index) {
  // @@protoc_insertion_point(field_mutable:subscribe.SubscribeSourceTypeListResponse.source_type)
  return source_type_.Mutable(index);
}
::subscribe::SourceType* SubscribeSourceTypeListResponse::add_source_type() {
  // @@protoc_insertion_point(field_add:subscribe.SubscribeSourceTypeListResponse.source_type)
  return source_type_.Add();
}
::google::protobuf::RepeatedPtrField< ::subscribe::SourceType >*
SubscribeSourceTypeListResponse::mutable_source_type() {
  // @@protoc_insertion_point(field_mutable_list:subscribe.SubscribeSourceTypeListResponse.source_type)
  return &source_type_;
}
const ::google::protobuf::RepeatedPtrField< ::subscribe::SourceType >&
SubscribeSourceTypeListResponse::source_type() const {
  // @@protoc_insertion_point(field_list:subscribe.SubscribeSourceTypeListResponse.source_type)
  return source_type_;
}

inline const SubscribeSourceTypeListResponse* SubscribeSourceTypeListResponse::internal_default_instance() {
  return &SubscribeSourceTypeListResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubscribeKeywordRequest::kUserIdFieldNumber;
const int SubscribeKeywordRequest::kKeywordFieldNumber;
const int SubscribeKeywordRequest::kDocTypeFieldNumber;
const int SubscribeKeywordRequest::kSourceTypeFieldNumber;
const int SubscribeKeywordRequest::kEmailFieldNumber;
const int SubscribeKeywordRequest::kShouldUpdateEmailFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubscribeKeywordRequest::SubscribeKeywordRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:subscribe.SubscribeKeywordRequest)
}

void SubscribeKeywordRequest::InitAsDefaultInstance() {
}

SubscribeKeywordRequest::SubscribeKeywordRequest(const SubscribeKeywordRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:subscribe.SubscribeKeywordRequest)
}

void SubscribeKeywordRequest::SharedCtor() {
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  keyword_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  should_update_email_ = false;
  _cached_size_ = 0;
}

SubscribeKeywordRequest::~SubscribeKeywordRequest() {
  // @@protoc_insertion_point(destructor:subscribe.SubscribeKeywordRequest)
  SharedDtor();
}

void SubscribeKeywordRequest::SharedDtor() {
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  keyword_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SubscribeKeywordRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubscribeKeywordRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubscribeKeywordRequest_descriptor_;
}

const SubscribeKeywordRequest& SubscribeKeywordRequest::default_instance() {
  protobuf_InitDefaults_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SubscribeKeywordRequest> SubscribeKeywordRequest_default_instance_;

SubscribeKeywordRequest* SubscribeKeywordRequest::New(::google::protobuf::Arena* arena) const {
  SubscribeKeywordRequest* n = new SubscribeKeywordRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SubscribeKeywordRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:subscribe.SubscribeKeywordRequest)
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  keyword_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  should_update_email_ = false;
  doc_type_.Clear();
  source_type_.Clear();
}

bool SubscribeKeywordRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:subscribe.SubscribeKeywordRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string user_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "subscribe.SubscribeKeywordRequest.user_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_keyword;
        break;
      }

      // optional string keyword = 2;
      case 2: {
        if (tag == 18) {
         parse_keyword:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_keyword()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->keyword().data(), this->keyword().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "subscribe.SubscribeKeywordRequest.keyword"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_doc_type;
        break;
      }

      // repeated .subscribe.DocType doc_type = 3;
      case 3: {
        if (tag == 26) {
         parse_doc_type:
          DO_(input->IncrementRecursionDepth());
         parse_loop_doc_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_doc_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_doc_type;
        if (input->ExpectTag(34)) goto parse_loop_source_type;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .subscribe.SourceType source_type = 4;
      case 4: {
        if (tag == 34) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_source_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_source_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_source_type;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(42)) goto parse_email;
        break;
      }

      // optional string email = 5;
      case 5: {
        if (tag == 42) {
         parse_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->email().data(), this->email().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "subscribe.SubscribeKeywordRequest.email"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_should_update_email;
        break;
      }

      // optional bool should_update_email = 6;
      case 6: {
        if (tag == 48) {
         parse_should_update_email:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &should_update_email_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:subscribe.SubscribeKeywordRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:subscribe.SubscribeKeywordRequest)
  return false;
#undef DO_
}

void SubscribeKeywordRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:subscribe.SubscribeKeywordRequest)
  // optional string user_id = 1;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "subscribe.SubscribeKeywordRequest.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user_id(), output);
  }

  // optional string keyword = 2;
  if (this->keyword().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->keyword().data(), this->keyword().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "subscribe.SubscribeKeywordRequest.keyword");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->keyword(), output);
  }

  // repeated .subscribe.DocType doc_type = 3;
  for (unsigned int i = 0, n = this->doc_type_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->doc_type(i), output);
  }

  // repeated .subscribe.SourceType source_type = 4;
  for (unsigned int i = 0, n = this->source_type_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->source_type(i), output);
  }

  // optional string email = 5;
  if (this->email().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "subscribe.SubscribeKeywordRequest.email");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->email(), output);
  }

  // optional bool should_update_email = 6;
  if (this->should_update_email() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->should_update_email(), output);
  }

  // @@protoc_insertion_point(serialize_end:subscribe.SubscribeKeywordRequest)
}

::google::protobuf::uint8* SubscribeKeywordRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:subscribe.SubscribeKeywordRequest)
  // optional string user_id = 1;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "subscribe.SubscribeKeywordRequest.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_id(), target);
  }

  // optional string keyword = 2;
  if (this->keyword().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->keyword().data(), this->keyword().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "subscribe.SubscribeKeywordRequest.keyword");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->keyword(), target);
  }

  // repeated .subscribe.DocType doc_type = 3;
  for (unsigned int i = 0, n = this->doc_type_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->doc_type(i), false, target);
  }

  // repeated .subscribe.SourceType source_type = 4;
  for (unsigned int i = 0, n = this->source_type_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->source_type(i), false, target);
  }

  // optional string email = 5;
  if (this->email().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "subscribe.SubscribeKeywordRequest.email");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->email(), target);
  }

  // optional bool should_update_email = 6;
  if (this->should_update_email() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->should_update_email(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:subscribe.SubscribeKeywordRequest)
  return target;
}

size_t SubscribeKeywordRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:subscribe.SubscribeKeywordRequest)
  size_t total_size = 0;

  // optional string user_id = 1;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  // optional string keyword = 2;
  if (this->keyword().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->keyword());
  }

  // optional string email = 5;
  if (this->email().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->email());
  }

  // optional bool should_update_email = 6;
  if (this->should_update_email() != 0) {
    total_size += 1 + 1;
  }

  // repeated .subscribe.DocType doc_type = 3;
  {
    unsigned int count = this->doc_type_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->doc_type(i));
    }
  }

  // repeated .subscribe.SourceType source_type = 4;
  {
    unsigned int count = this->source_type_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->source_type(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubscribeKeywordRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:subscribe.SubscribeKeywordRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SubscribeKeywordRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SubscribeKeywordRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:subscribe.SubscribeKeywordRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:subscribe.SubscribeKeywordRequest)
    UnsafeMergeFrom(*source);
  }
}

void SubscribeKeywordRequest::MergeFrom(const SubscribeKeywordRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:subscribe.SubscribeKeywordRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SubscribeKeywordRequest::UnsafeMergeFrom(const SubscribeKeywordRequest& from) {
  GOOGLE_DCHECK(&from != this);
  doc_type_.MergeFrom(from.doc_type_);
  source_type_.MergeFrom(from.source_type_);
  if (from.user_id().size() > 0) {

    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  if (from.keyword().size() > 0) {

    keyword_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.keyword_);
  }
  if (from.email().size() > 0) {

    email_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  if (from.should_update_email() != 0) {
    set_should_update_email(from.should_update_email());
  }
}

void SubscribeKeywordRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:subscribe.SubscribeKeywordRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeKeywordRequest::CopyFrom(const SubscribeKeywordRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:subscribe.SubscribeKeywordRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SubscribeKeywordRequest::IsInitialized() const {

  return true;
}

void SubscribeKeywordRequest::Swap(SubscribeKeywordRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubscribeKeywordRequest::InternalSwap(SubscribeKeywordRequest* other) {
  user_id_.Swap(&other->user_id_);
  keyword_.Swap(&other->keyword_);
  doc_type_.UnsafeArenaSwap(&other->doc_type_);
  source_type_.UnsafeArenaSwap(&other->source_type_);
  email_.Swap(&other->email_);
  std::swap(should_update_email_, other->should_update_email_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SubscribeKeywordRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubscribeKeywordRequest_descriptor_;
  metadata.reflection = SubscribeKeywordRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SubscribeKeywordRequest

// optional string user_id = 1;
void SubscribeKeywordRequest::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SubscribeKeywordRequest::user_id() const {
  // @@protoc_insertion_point(field_get:subscribe.SubscribeKeywordRequest.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SubscribeKeywordRequest::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:subscribe.SubscribeKeywordRequest.user_id)
}
void SubscribeKeywordRequest::set_user_id(const char* value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:subscribe.SubscribeKeywordRequest.user_id)
}
void SubscribeKeywordRequest::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:subscribe.SubscribeKeywordRequest.user_id)
}
::std::string* SubscribeKeywordRequest::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:subscribe.SubscribeKeywordRequest.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SubscribeKeywordRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:subscribe.SubscribeKeywordRequest.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SubscribeKeywordRequest::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:subscribe.SubscribeKeywordRequest.user_id)
}

// optional string keyword = 2;
void SubscribeKeywordRequest::clear_keyword() {
  keyword_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SubscribeKeywordRequest::keyword() const {
  // @@protoc_insertion_point(field_get:subscribe.SubscribeKeywordRequest.keyword)
  return keyword_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SubscribeKeywordRequest::set_keyword(const ::std::string& value) {
  
  keyword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:subscribe.SubscribeKeywordRequest.keyword)
}
void SubscribeKeywordRequest::set_keyword(const char* value) {
  
  keyword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:subscribe.SubscribeKeywordRequest.keyword)
}
void SubscribeKeywordRequest::set_keyword(const char* value, size_t size) {
  
  keyword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:subscribe.SubscribeKeywordRequest.keyword)
}
::std::string* SubscribeKeywordRequest::mutable_keyword() {
  
  // @@protoc_insertion_point(field_mutable:subscribe.SubscribeKeywordRequest.keyword)
  return keyword_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SubscribeKeywordRequest::release_keyword() {
  // @@protoc_insertion_point(field_release:subscribe.SubscribeKeywordRequest.keyword)
  
  return keyword_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SubscribeKeywordRequest::set_allocated_keyword(::std::string* keyword) {
  if (keyword != NULL) {
    
  } else {
    
  }
  keyword_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), keyword);
  // @@protoc_insertion_point(field_set_allocated:subscribe.SubscribeKeywordRequest.keyword)
}

// repeated .subscribe.DocType doc_type = 3;
int SubscribeKeywordRequest::doc_type_size() const {
  return doc_type_.size();
}
void SubscribeKeywordRequest::clear_doc_type() {
  doc_type_.Clear();
}
const ::subscribe::DocType& SubscribeKeywordRequest::doc_type(int index) const {
  // @@protoc_insertion_point(field_get:subscribe.SubscribeKeywordRequest.doc_type)
  return doc_type_.Get(index);
}
::subscribe::DocType* SubscribeKeywordRequest::mutable_doc_type(int index) {
  // @@protoc_insertion_point(field_mutable:subscribe.SubscribeKeywordRequest.doc_type)
  return doc_type_.Mutable(index);
}
::subscribe::DocType* SubscribeKeywordRequest::add_doc_type() {
  // @@protoc_insertion_point(field_add:subscribe.SubscribeKeywordRequest.doc_type)
  return doc_type_.Add();
}
::google::protobuf::RepeatedPtrField< ::subscribe::DocType >*
SubscribeKeywordRequest::mutable_doc_type() {
  // @@protoc_insertion_point(field_mutable_list:subscribe.SubscribeKeywordRequest.doc_type)
  return &doc_type_;
}
const ::google::protobuf::RepeatedPtrField< ::subscribe::DocType >&
SubscribeKeywordRequest::doc_type() const {
  // @@protoc_insertion_point(field_list:subscribe.SubscribeKeywordRequest.doc_type)
  return doc_type_;
}

// repeated .subscribe.SourceType source_type = 4;
int SubscribeKeywordRequest::source_type_size() const {
  return source_type_.size();
}
void SubscribeKeywordRequest::clear_source_type() {
  source_type_.Clear();
}
const ::subscribe::SourceType& SubscribeKeywordRequest::source_type(int index) const {
  // @@protoc_insertion_point(field_get:subscribe.SubscribeKeywordRequest.source_type)
  return source_type_.Get(index);
}
::subscribe::SourceType* SubscribeKeywordRequest::mutable_source_type(int index) {
  // @@protoc_insertion_point(field_mutable:subscribe.SubscribeKeywordRequest.source_type)
  return source_type_.Mutable(index);
}
::subscribe::SourceType* SubscribeKeywordRequest::add_source_type() {
  // @@protoc_insertion_point(field_add:subscribe.SubscribeKeywordRequest.source_type)
  return source_type_.Add();
}
::google::protobuf::RepeatedPtrField< ::subscribe::SourceType >*
SubscribeKeywordRequest::mutable_source_type() {
  // @@protoc_insertion_point(field_mutable_list:subscribe.SubscribeKeywordRequest.source_type)
  return &source_type_;
}
const ::google::protobuf::RepeatedPtrField< ::subscribe::SourceType >&
SubscribeKeywordRequest::source_type() const {
  // @@protoc_insertion_point(field_list:subscribe.SubscribeKeywordRequest.source_type)
  return source_type_;
}

// optional string email = 5;
void SubscribeKeywordRequest::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SubscribeKeywordRequest::email() const {
  // @@protoc_insertion_point(field_get:subscribe.SubscribeKeywordRequest.email)
  return email_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SubscribeKeywordRequest::set_email(const ::std::string& value) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:subscribe.SubscribeKeywordRequest.email)
}
void SubscribeKeywordRequest::set_email(const char* value) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:subscribe.SubscribeKeywordRequest.email)
}
void SubscribeKeywordRequest::set_email(const char* value, size_t size) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:subscribe.SubscribeKeywordRequest.email)
}
::std::string* SubscribeKeywordRequest::mutable_email() {
  
  // @@protoc_insertion_point(field_mutable:subscribe.SubscribeKeywordRequest.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SubscribeKeywordRequest::release_email() {
  // @@protoc_insertion_point(field_release:subscribe.SubscribeKeywordRequest.email)
  
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SubscribeKeywordRequest::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    
  } else {
    
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:subscribe.SubscribeKeywordRequest.email)
}

// optional bool should_update_email = 6;
void SubscribeKeywordRequest::clear_should_update_email() {
  should_update_email_ = false;
}
bool SubscribeKeywordRequest::should_update_email() const {
  // @@protoc_insertion_point(field_get:subscribe.SubscribeKeywordRequest.should_update_email)
  return should_update_email_;
}
void SubscribeKeywordRequest::set_should_update_email(bool value) {
  
  should_update_email_ = value;
  // @@protoc_insertion_point(field_set:subscribe.SubscribeKeywordRequest.should_update_email)
}

inline const SubscribeKeywordRequest* SubscribeKeywordRequest::internal_default_instance() {
  return &SubscribeKeywordRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubscribeKeywordResponse::kSubscribeSuccessFieldNumber;
const int SubscribeKeywordResponse::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubscribeKeywordResponse::SubscribeKeywordResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:subscribe.SubscribeKeywordResponse)
}

void SubscribeKeywordResponse::InitAsDefaultInstance() {
  error_ = const_cast< ::grpcCommon::GrpcError*>(
      ::grpcCommon::GrpcError::internal_default_instance());
}

SubscribeKeywordResponse::SubscribeKeywordResponse(const SubscribeKeywordResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:subscribe.SubscribeKeywordResponse)
}

void SubscribeKeywordResponse::SharedCtor() {
  error_ = NULL;
  subscribe_success_ = false;
  _cached_size_ = 0;
}

SubscribeKeywordResponse::~SubscribeKeywordResponse() {
  // @@protoc_insertion_point(destructor:subscribe.SubscribeKeywordResponse)
  SharedDtor();
}

void SubscribeKeywordResponse::SharedDtor() {
  if (this != &SubscribeKeywordResponse_default_instance_.get()) {
    delete error_;
  }
}

void SubscribeKeywordResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubscribeKeywordResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubscribeKeywordResponse_descriptor_;
}

const SubscribeKeywordResponse& SubscribeKeywordResponse::default_instance() {
  protobuf_InitDefaults_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SubscribeKeywordResponse> SubscribeKeywordResponse_default_instance_;

SubscribeKeywordResponse* SubscribeKeywordResponse::New(::google::protobuf::Arena* arena) const {
  SubscribeKeywordResponse* n = new SubscribeKeywordResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SubscribeKeywordResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:subscribe.SubscribeKeywordResponse)
  subscribe_success_ = false;
  if (GetArenaNoVirtual() == NULL && error_ != NULL) delete error_;
  error_ = NULL;
}

bool SubscribeKeywordResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:subscribe.SubscribeKeywordResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool subscribe_success = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &subscribe_success_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional .grpcCommon.GrpcError error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:subscribe.SubscribeKeywordResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:subscribe.SubscribeKeywordResponse)
  return false;
#undef DO_
}

void SubscribeKeywordResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:subscribe.SubscribeKeywordResponse)
  // optional bool subscribe_success = 1;
  if (this->subscribe_success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->subscribe_success(), output);
  }

  // optional .grpcCommon.GrpcError error = 2;
  if (this->has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->error_, output);
  }

  // @@protoc_insertion_point(serialize_end:subscribe.SubscribeKeywordResponse)
}

::google::protobuf::uint8* SubscribeKeywordResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:subscribe.SubscribeKeywordResponse)
  // optional bool subscribe_success = 1;
  if (this->subscribe_success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->subscribe_success(), target);
  }

  // optional .grpcCommon.GrpcError error = 2;
  if (this->has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->error_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:subscribe.SubscribeKeywordResponse)
  return target;
}

size_t SubscribeKeywordResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:subscribe.SubscribeKeywordResponse)
  size_t total_size = 0;

  // optional bool subscribe_success = 1;
  if (this->subscribe_success() != 0) {
    total_size += 1 + 1;
  }

  // optional .grpcCommon.GrpcError error = 2;
  if (this->has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->error_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubscribeKeywordResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:subscribe.SubscribeKeywordResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SubscribeKeywordResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SubscribeKeywordResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:subscribe.SubscribeKeywordResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:subscribe.SubscribeKeywordResponse)
    UnsafeMergeFrom(*source);
  }
}

void SubscribeKeywordResponse::MergeFrom(const SubscribeKeywordResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:subscribe.SubscribeKeywordResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SubscribeKeywordResponse::UnsafeMergeFrom(const SubscribeKeywordResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.subscribe_success() != 0) {
    set_subscribe_success(from.subscribe_success());
  }
  if (from.has_error()) {
    mutable_error()->::grpcCommon::GrpcError::MergeFrom(from.error());
  }
}

void SubscribeKeywordResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:subscribe.SubscribeKeywordResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeKeywordResponse::CopyFrom(const SubscribeKeywordResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:subscribe.SubscribeKeywordResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SubscribeKeywordResponse::IsInitialized() const {

  return true;
}

void SubscribeKeywordResponse::Swap(SubscribeKeywordResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubscribeKeywordResponse::InternalSwap(SubscribeKeywordResponse* other) {
  std::swap(subscribe_success_, other->subscribe_success_);
  std::swap(error_, other->error_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SubscribeKeywordResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubscribeKeywordResponse_descriptor_;
  metadata.reflection = SubscribeKeywordResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SubscribeKeywordResponse

// optional bool subscribe_success = 1;
void SubscribeKeywordResponse::clear_subscribe_success() {
  subscribe_success_ = false;
}
bool SubscribeKeywordResponse::subscribe_success() const {
  // @@protoc_insertion_point(field_get:subscribe.SubscribeKeywordResponse.subscribe_success)
  return subscribe_success_;
}
void SubscribeKeywordResponse::set_subscribe_success(bool value) {
  
  subscribe_success_ = value;
  // @@protoc_insertion_point(field_set:subscribe.SubscribeKeywordResponse.subscribe_success)
}

// optional .grpcCommon.GrpcError error = 2;
bool SubscribeKeywordResponse::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
void SubscribeKeywordResponse::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) delete error_;
  error_ = NULL;
}
const ::grpcCommon::GrpcError& SubscribeKeywordResponse::error() const {
  // @@protoc_insertion_point(field_get:subscribe.SubscribeKeywordResponse.error)
  return error_ != NULL ? *error_
                         : *::grpcCommon::GrpcError::internal_default_instance();
}
::grpcCommon::GrpcError* SubscribeKeywordResponse::mutable_error() {
  
  if (error_ == NULL) {
    error_ = new ::grpcCommon::GrpcError;
  }
  // @@protoc_insertion_point(field_mutable:subscribe.SubscribeKeywordResponse.error)
  return error_;
}
::grpcCommon::GrpcError* SubscribeKeywordResponse::release_error() {
  // @@protoc_insertion_point(field_release:subscribe.SubscribeKeywordResponse.error)
  
  ::grpcCommon::GrpcError* temp = error_;
  error_ = NULL;
  return temp;
}
void SubscribeKeywordResponse::set_allocated_error(::grpcCommon::GrpcError* error) {
  delete error_;
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:subscribe.SubscribeKeywordResponse.error)
}

inline const SubscribeKeywordResponse* SubscribeKeywordResponse::internal_default_instance() {
  return &SubscribeKeywordResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubscribeKeywordListRequest::kUserIdFieldNumber;
const int SubscribeKeywordListRequest::kPageNumberFieldNumber;
const int SubscribeKeywordListRequest::kPageSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubscribeKeywordListRequest::SubscribeKeywordListRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:subscribe.SubscribeKeywordListRequest)
}

void SubscribeKeywordListRequest::InitAsDefaultInstance() {
}

SubscribeKeywordListRequest::SubscribeKeywordListRequest(const SubscribeKeywordListRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:subscribe.SubscribeKeywordListRequest)
}

void SubscribeKeywordListRequest::SharedCtor() {
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&page_number_, 0, reinterpret_cast<char*>(&page_size_) -
    reinterpret_cast<char*>(&page_number_) + sizeof(page_size_));
  _cached_size_ = 0;
}

SubscribeKeywordListRequest::~SubscribeKeywordListRequest() {
  // @@protoc_insertion_point(destructor:subscribe.SubscribeKeywordListRequest)
  SharedDtor();
}

void SubscribeKeywordListRequest::SharedDtor() {
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SubscribeKeywordListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubscribeKeywordListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubscribeKeywordListRequest_descriptor_;
}

const SubscribeKeywordListRequest& SubscribeKeywordListRequest::default_instance() {
  protobuf_InitDefaults_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SubscribeKeywordListRequest> SubscribeKeywordListRequest_default_instance_;

SubscribeKeywordListRequest* SubscribeKeywordListRequest::New(::google::protobuf::Arena* arena) const {
  SubscribeKeywordListRequest* n = new SubscribeKeywordListRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SubscribeKeywordListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:subscribe.SubscribeKeywordListRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SubscribeKeywordListRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SubscribeKeywordListRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(page_number_, page_size_);
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool SubscribeKeywordListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:subscribe.SubscribeKeywordListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string user_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "subscribe.SubscribeKeywordListRequest.user_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_page_number;
        break;
      }

      // optional int32 page_number = 2;
      case 2: {
        if (tag == 16) {
         parse_page_number:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_number_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_page_size;
        break;
      }

      // optional int32 page_size = 3;
      case 3: {
        if (tag == 24) {
         parse_page_size:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_size_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:subscribe.SubscribeKeywordListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:subscribe.SubscribeKeywordListRequest)
  return false;
#undef DO_
}

void SubscribeKeywordListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:subscribe.SubscribeKeywordListRequest)
  // optional string user_id = 1;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "subscribe.SubscribeKeywordListRequest.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user_id(), output);
  }

  // optional int32 page_number = 2;
  if (this->page_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->page_number(), output);
  }

  // optional int32 page_size = 3;
  if (this->page_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->page_size(), output);
  }

  // @@protoc_insertion_point(serialize_end:subscribe.SubscribeKeywordListRequest)
}

::google::protobuf::uint8* SubscribeKeywordListRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:subscribe.SubscribeKeywordListRequest)
  // optional string user_id = 1;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "subscribe.SubscribeKeywordListRequest.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_id(), target);
  }

  // optional int32 page_number = 2;
  if (this->page_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->page_number(), target);
  }

  // optional int32 page_size = 3;
  if (this->page_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->page_size(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:subscribe.SubscribeKeywordListRequest)
  return target;
}

size_t SubscribeKeywordListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:subscribe.SubscribeKeywordListRequest)
  size_t total_size = 0;

  // optional string user_id = 1;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  // optional int32 page_number = 2;
  if (this->page_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->page_number());
  }

  // optional int32 page_size = 3;
  if (this->page_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->page_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubscribeKeywordListRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:subscribe.SubscribeKeywordListRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SubscribeKeywordListRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SubscribeKeywordListRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:subscribe.SubscribeKeywordListRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:subscribe.SubscribeKeywordListRequest)
    UnsafeMergeFrom(*source);
  }
}

void SubscribeKeywordListRequest::MergeFrom(const SubscribeKeywordListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:subscribe.SubscribeKeywordListRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SubscribeKeywordListRequest::UnsafeMergeFrom(const SubscribeKeywordListRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.user_id().size() > 0) {

    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  if (from.page_number() != 0) {
    set_page_number(from.page_number());
  }
  if (from.page_size() != 0) {
    set_page_size(from.page_size());
  }
}

void SubscribeKeywordListRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:subscribe.SubscribeKeywordListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeKeywordListRequest::CopyFrom(const SubscribeKeywordListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:subscribe.SubscribeKeywordListRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SubscribeKeywordListRequest::IsInitialized() const {

  return true;
}

void SubscribeKeywordListRequest::Swap(SubscribeKeywordListRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubscribeKeywordListRequest::InternalSwap(SubscribeKeywordListRequest* other) {
  user_id_.Swap(&other->user_id_);
  std::swap(page_number_, other->page_number_);
  std::swap(page_size_, other->page_size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SubscribeKeywordListRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubscribeKeywordListRequest_descriptor_;
  metadata.reflection = SubscribeKeywordListRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SubscribeKeywordListRequest

// optional string user_id = 1;
void SubscribeKeywordListRequest::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SubscribeKeywordListRequest::user_id() const {
  // @@protoc_insertion_point(field_get:subscribe.SubscribeKeywordListRequest.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SubscribeKeywordListRequest::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:subscribe.SubscribeKeywordListRequest.user_id)
}
void SubscribeKeywordListRequest::set_user_id(const char* value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:subscribe.SubscribeKeywordListRequest.user_id)
}
void SubscribeKeywordListRequest::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:subscribe.SubscribeKeywordListRequest.user_id)
}
::std::string* SubscribeKeywordListRequest::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:subscribe.SubscribeKeywordListRequest.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SubscribeKeywordListRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:subscribe.SubscribeKeywordListRequest.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SubscribeKeywordListRequest::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:subscribe.SubscribeKeywordListRequest.user_id)
}

// optional int32 page_number = 2;
void SubscribeKeywordListRequest::clear_page_number() {
  page_number_ = 0;
}
::google::protobuf::int32 SubscribeKeywordListRequest::page_number() const {
  // @@protoc_insertion_point(field_get:subscribe.SubscribeKeywordListRequest.page_number)
  return page_number_;
}
void SubscribeKeywordListRequest::set_page_number(::google::protobuf::int32 value) {
  
  page_number_ = value;
  // @@protoc_insertion_point(field_set:subscribe.SubscribeKeywordListRequest.page_number)
}

// optional int32 page_size = 3;
void SubscribeKeywordListRequest::clear_page_size() {
  page_size_ = 0;
}
::google::protobuf::int32 SubscribeKeywordListRequest::page_size() const {
  // @@protoc_insertion_point(field_get:subscribe.SubscribeKeywordListRequest.page_size)
  return page_size_;
}
void SubscribeKeywordListRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:subscribe.SubscribeKeywordListRequest.page_size)
}

inline const SubscribeKeywordListRequest* SubscribeKeywordListRequest::internal_default_instance() {
  return &SubscribeKeywordListRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubscribeKeywordListResponse::kSubscribeKeywordFieldNumber;
const int SubscribeKeywordListResponse::kHasMoreFieldNumber;
const int SubscribeKeywordListResponse::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubscribeKeywordListResponse::SubscribeKeywordListResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:subscribe.SubscribeKeywordListResponse)
}

void SubscribeKeywordListResponse::InitAsDefaultInstance() {
  error_ = const_cast< ::grpcCommon::GrpcError*>(
      ::grpcCommon::GrpcError::internal_default_instance());
}

SubscribeKeywordListResponse::SubscribeKeywordListResponse(const SubscribeKeywordListResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:subscribe.SubscribeKeywordListResponse)
}

void SubscribeKeywordListResponse::SharedCtor() {
  error_ = NULL;
  has_more_ = false;
  _cached_size_ = 0;
}

SubscribeKeywordListResponse::~SubscribeKeywordListResponse() {
  // @@protoc_insertion_point(destructor:subscribe.SubscribeKeywordListResponse)
  SharedDtor();
}

void SubscribeKeywordListResponse::SharedDtor() {
  if (this != &SubscribeKeywordListResponse_default_instance_.get()) {
    delete error_;
  }
}

void SubscribeKeywordListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubscribeKeywordListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubscribeKeywordListResponse_descriptor_;
}

const SubscribeKeywordListResponse& SubscribeKeywordListResponse::default_instance() {
  protobuf_InitDefaults_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SubscribeKeywordListResponse> SubscribeKeywordListResponse_default_instance_;

SubscribeKeywordListResponse* SubscribeKeywordListResponse::New(::google::protobuf::Arena* arena) const {
  SubscribeKeywordListResponse* n = new SubscribeKeywordListResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SubscribeKeywordListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:subscribe.SubscribeKeywordListResponse)
  has_more_ = false;
  if (GetArenaNoVirtual() == NULL && error_ != NULL) delete error_;
  error_ = NULL;
  subscribe_keyword_.Clear();
}

bool SubscribeKeywordListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:subscribe.SubscribeKeywordListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .subscribe.SubscribeKeywordMessage subscribe_keyword = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_subscribe_keyword:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_subscribe_keyword()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_subscribe_keyword;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(16)) goto parse_has_more;
        break;
      }

      // optional bool has_more = 2;
      case 2: {
        if (tag == 16) {
         parse_has_more:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_more_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_error;
        break;
      }

      // optional .grpcCommon.GrpcError error = 3;
      case 3: {
        if (tag == 26) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:subscribe.SubscribeKeywordListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:subscribe.SubscribeKeywordListResponse)
  return false;
#undef DO_
}

void SubscribeKeywordListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:subscribe.SubscribeKeywordListResponse)
  // repeated .subscribe.SubscribeKeywordMessage subscribe_keyword = 1;
  for (unsigned int i = 0, n = this->subscribe_keyword_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->subscribe_keyword(i), output);
  }

  // optional bool has_more = 2;
  if (this->has_more() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->has_more(), output);
  }

  // optional .grpcCommon.GrpcError error = 3;
  if (this->has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->error_, output);
  }

  // @@protoc_insertion_point(serialize_end:subscribe.SubscribeKeywordListResponse)
}

::google::protobuf::uint8* SubscribeKeywordListResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:subscribe.SubscribeKeywordListResponse)
  // repeated .subscribe.SubscribeKeywordMessage subscribe_keyword = 1;
  for (unsigned int i = 0, n = this->subscribe_keyword_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->subscribe_keyword(i), false, target);
  }

  // optional bool has_more = 2;
  if (this->has_more() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->has_more(), target);
  }

  // optional .grpcCommon.GrpcError error = 3;
  if (this->has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->error_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:subscribe.SubscribeKeywordListResponse)
  return target;
}

size_t SubscribeKeywordListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:subscribe.SubscribeKeywordListResponse)
  size_t total_size = 0;

  // optional bool has_more = 2;
  if (this->has_more() != 0) {
    total_size += 1 + 1;
  }

  // optional .grpcCommon.GrpcError error = 3;
  if (this->has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->error_);
  }

  // repeated .subscribe.SubscribeKeywordMessage subscribe_keyword = 1;
  {
    unsigned int count = this->subscribe_keyword_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->subscribe_keyword(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubscribeKeywordListResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:subscribe.SubscribeKeywordListResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SubscribeKeywordListResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SubscribeKeywordListResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:subscribe.SubscribeKeywordListResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:subscribe.SubscribeKeywordListResponse)
    UnsafeMergeFrom(*source);
  }
}

void SubscribeKeywordListResponse::MergeFrom(const SubscribeKeywordListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:subscribe.SubscribeKeywordListResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SubscribeKeywordListResponse::UnsafeMergeFrom(const SubscribeKeywordListResponse& from) {
  GOOGLE_DCHECK(&from != this);
  subscribe_keyword_.MergeFrom(from.subscribe_keyword_);
  if (from.has_more() != 0) {
    set_has_more(from.has_more());
  }
  if (from.has_error()) {
    mutable_error()->::grpcCommon::GrpcError::MergeFrom(from.error());
  }
}

void SubscribeKeywordListResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:subscribe.SubscribeKeywordListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeKeywordListResponse::CopyFrom(const SubscribeKeywordListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:subscribe.SubscribeKeywordListResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SubscribeKeywordListResponse::IsInitialized() const {

  return true;
}

void SubscribeKeywordListResponse::Swap(SubscribeKeywordListResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubscribeKeywordListResponse::InternalSwap(SubscribeKeywordListResponse* other) {
  subscribe_keyword_.UnsafeArenaSwap(&other->subscribe_keyword_);
  std::swap(has_more_, other->has_more_);
  std::swap(error_, other->error_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SubscribeKeywordListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubscribeKeywordListResponse_descriptor_;
  metadata.reflection = SubscribeKeywordListResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SubscribeKeywordListResponse

// repeated .subscribe.SubscribeKeywordMessage subscribe_keyword = 1;
int SubscribeKeywordListResponse::subscribe_keyword_size() const {
  return subscribe_keyword_.size();
}
void SubscribeKeywordListResponse::clear_subscribe_keyword() {
  subscribe_keyword_.Clear();
}
const ::subscribe::SubscribeKeywordMessage& SubscribeKeywordListResponse::subscribe_keyword(int index) const {
  // @@protoc_insertion_point(field_get:subscribe.SubscribeKeywordListResponse.subscribe_keyword)
  return subscribe_keyword_.Get(index);
}
::subscribe::SubscribeKeywordMessage* SubscribeKeywordListResponse::mutable_subscribe_keyword(int index) {
  // @@protoc_insertion_point(field_mutable:subscribe.SubscribeKeywordListResponse.subscribe_keyword)
  return subscribe_keyword_.Mutable(index);
}
::subscribe::SubscribeKeywordMessage* SubscribeKeywordListResponse::add_subscribe_keyword() {
  // @@protoc_insertion_point(field_add:subscribe.SubscribeKeywordListResponse.subscribe_keyword)
  return subscribe_keyword_.Add();
}
::google::protobuf::RepeatedPtrField< ::subscribe::SubscribeKeywordMessage >*
SubscribeKeywordListResponse::mutable_subscribe_keyword() {
  // @@protoc_insertion_point(field_mutable_list:subscribe.SubscribeKeywordListResponse.subscribe_keyword)
  return &subscribe_keyword_;
}
const ::google::protobuf::RepeatedPtrField< ::subscribe::SubscribeKeywordMessage >&
SubscribeKeywordListResponse::subscribe_keyword() const {
  // @@protoc_insertion_point(field_list:subscribe.SubscribeKeywordListResponse.subscribe_keyword)
  return subscribe_keyword_;
}

// optional bool has_more = 2;
void SubscribeKeywordListResponse::clear_has_more() {
  has_more_ = false;
}
bool SubscribeKeywordListResponse::has_more() const {
  // @@protoc_insertion_point(field_get:subscribe.SubscribeKeywordListResponse.has_more)
  return has_more_;
}
void SubscribeKeywordListResponse::set_has_more(bool value) {
  
  has_more_ = value;
  // @@protoc_insertion_point(field_set:subscribe.SubscribeKeywordListResponse.has_more)
}

// optional .grpcCommon.GrpcError error = 3;
bool SubscribeKeywordListResponse::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
void SubscribeKeywordListResponse::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) delete error_;
  error_ = NULL;
}
const ::grpcCommon::GrpcError& SubscribeKeywordListResponse::error() const {
  // @@protoc_insertion_point(field_get:subscribe.SubscribeKeywordListResponse.error)
  return error_ != NULL ? *error_
                         : *::grpcCommon::GrpcError::internal_default_instance();
}
::grpcCommon::GrpcError* SubscribeKeywordListResponse::mutable_error() {
  
  if (error_ == NULL) {
    error_ = new ::grpcCommon::GrpcError;
  }
  // @@protoc_insertion_point(field_mutable:subscribe.SubscribeKeywordListResponse.error)
  return error_;
}
::grpcCommon::GrpcError* SubscribeKeywordListResponse::release_error() {
  // @@protoc_insertion_point(field_release:subscribe.SubscribeKeywordListResponse.error)
  
  ::grpcCommon::GrpcError* temp = error_;
  error_ = NULL;
  return temp;
}
void SubscribeKeywordListResponse::set_allocated_error(::grpcCommon::GrpcError* error) {
  delete error_;
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:subscribe.SubscribeKeywordListResponse.error)
}

inline const SubscribeKeywordListResponse* SubscribeKeywordListResponse::internal_default_instance() {
  return &SubscribeKeywordListResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubscribeKeywordMessage::kUserIdFieldNumber;
const int SubscribeKeywordMessage::kSubscribeIdFieldNumber;
const int SubscribeKeywordMessage::kDocuTypeFieldNumber;
const int SubscribeKeywordMessage::kAddTimeFieldNumber;
const int SubscribeKeywordMessage::kKeywordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubscribeKeywordMessage::SubscribeKeywordMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:subscribe.SubscribeKeywordMessage)
}

void SubscribeKeywordMessage::InitAsDefaultInstance() {
}

SubscribeKeywordMessage::SubscribeKeywordMessage(const SubscribeKeywordMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:subscribe.SubscribeKeywordMessage)
}

void SubscribeKeywordMessage::SharedCtor() {
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subscribe_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  docu_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  add_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  keyword_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

SubscribeKeywordMessage::~SubscribeKeywordMessage() {
  // @@protoc_insertion_point(destructor:subscribe.SubscribeKeywordMessage)
  SharedDtor();
}

void SubscribeKeywordMessage::SharedDtor() {
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subscribe_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  docu_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  add_time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  keyword_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SubscribeKeywordMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubscribeKeywordMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubscribeKeywordMessage_descriptor_;
}

const SubscribeKeywordMessage& SubscribeKeywordMessage::default_instance() {
  protobuf_InitDefaults_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SubscribeKeywordMessage> SubscribeKeywordMessage_default_instance_;

SubscribeKeywordMessage* SubscribeKeywordMessage::New(::google::protobuf::Arena* arena) const {
  SubscribeKeywordMessage* n = new SubscribeKeywordMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SubscribeKeywordMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:subscribe.SubscribeKeywordMessage)
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subscribe_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  docu_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  add_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  keyword_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SubscribeKeywordMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:subscribe.SubscribeKeywordMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string user_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "subscribe.SubscribeKeywordMessage.user_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_subscribe_id;
        break;
      }

      // optional string subscribe_id = 2;
      case 2: {
        if (tag == 18) {
         parse_subscribe_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subscribe_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->subscribe_id().data(), this->subscribe_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "subscribe.SubscribeKeywordMessage.subscribe_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_docu_type;
        break;
      }

      // optional string docu_type = 3;
      case 3: {
        if (tag == 26) {
         parse_docu_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_docu_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->docu_type().data(), this->docu_type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "subscribe.SubscribeKeywordMessage.docu_type"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_add_time;
        break;
      }

      // optional string add_time = 4;
      case 4: {
        if (tag == 34) {
         parse_add_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_add_time()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->add_time().data(), this->add_time().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "subscribe.SubscribeKeywordMessage.add_time"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_keyword;
        break;
      }

      // optional string keyword = 5;
      case 5: {
        if (tag == 42) {
         parse_keyword:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_keyword()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->keyword().data(), this->keyword().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "subscribe.SubscribeKeywordMessage.keyword"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:subscribe.SubscribeKeywordMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:subscribe.SubscribeKeywordMessage)
  return false;
#undef DO_
}

void SubscribeKeywordMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:subscribe.SubscribeKeywordMessage)
  // optional string user_id = 1;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "subscribe.SubscribeKeywordMessage.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user_id(), output);
  }

  // optional string subscribe_id = 2;
  if (this->subscribe_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subscribe_id().data(), this->subscribe_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "subscribe.SubscribeKeywordMessage.subscribe_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->subscribe_id(), output);
  }

  // optional string docu_type = 3;
  if (this->docu_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->docu_type().data(), this->docu_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "subscribe.SubscribeKeywordMessage.docu_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->docu_type(), output);
  }

  // optional string add_time = 4;
  if (this->add_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->add_time().data(), this->add_time().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "subscribe.SubscribeKeywordMessage.add_time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->add_time(), output);
  }

  // optional string keyword = 5;
  if (this->keyword().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->keyword().data(), this->keyword().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "subscribe.SubscribeKeywordMessage.keyword");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->keyword(), output);
  }

  // @@protoc_insertion_point(serialize_end:subscribe.SubscribeKeywordMessage)
}

::google::protobuf::uint8* SubscribeKeywordMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:subscribe.SubscribeKeywordMessage)
  // optional string user_id = 1;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "subscribe.SubscribeKeywordMessage.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_id(), target);
  }

  // optional string subscribe_id = 2;
  if (this->subscribe_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subscribe_id().data(), this->subscribe_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "subscribe.SubscribeKeywordMessage.subscribe_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->subscribe_id(), target);
  }

  // optional string docu_type = 3;
  if (this->docu_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->docu_type().data(), this->docu_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "subscribe.SubscribeKeywordMessage.docu_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->docu_type(), target);
  }

  // optional string add_time = 4;
  if (this->add_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->add_time().data(), this->add_time().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "subscribe.SubscribeKeywordMessage.add_time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->add_time(), target);
  }

  // optional string keyword = 5;
  if (this->keyword().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->keyword().data(), this->keyword().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "subscribe.SubscribeKeywordMessage.keyword");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->keyword(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:subscribe.SubscribeKeywordMessage)
  return target;
}

size_t SubscribeKeywordMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:subscribe.SubscribeKeywordMessage)
  size_t total_size = 0;

  // optional string user_id = 1;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  // optional string subscribe_id = 2;
  if (this->subscribe_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->subscribe_id());
  }

  // optional string docu_type = 3;
  if (this->docu_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->docu_type());
  }

  // optional string add_time = 4;
  if (this->add_time().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->add_time());
  }

  // optional string keyword = 5;
  if (this->keyword().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->keyword());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubscribeKeywordMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:subscribe.SubscribeKeywordMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SubscribeKeywordMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SubscribeKeywordMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:subscribe.SubscribeKeywordMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:subscribe.SubscribeKeywordMessage)
    UnsafeMergeFrom(*source);
  }
}

void SubscribeKeywordMessage::MergeFrom(const SubscribeKeywordMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:subscribe.SubscribeKeywordMessage)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SubscribeKeywordMessage::UnsafeMergeFrom(const SubscribeKeywordMessage& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.user_id().size() > 0) {

    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  if (from.subscribe_id().size() > 0) {

    subscribe_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.subscribe_id_);
  }
  if (from.docu_type().size() > 0) {

    docu_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.docu_type_);
  }
  if (from.add_time().size() > 0) {

    add_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.add_time_);
  }
  if (from.keyword().size() > 0) {

    keyword_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.keyword_);
  }
}

void SubscribeKeywordMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:subscribe.SubscribeKeywordMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeKeywordMessage::CopyFrom(const SubscribeKeywordMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:subscribe.SubscribeKeywordMessage)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SubscribeKeywordMessage::IsInitialized() const {

  return true;
}

void SubscribeKeywordMessage::Swap(SubscribeKeywordMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubscribeKeywordMessage::InternalSwap(SubscribeKeywordMessage* other) {
  user_id_.Swap(&other->user_id_);
  subscribe_id_.Swap(&other->subscribe_id_);
  docu_type_.Swap(&other->docu_type_);
  add_time_.Swap(&other->add_time_);
  keyword_.Swap(&other->keyword_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SubscribeKeywordMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubscribeKeywordMessage_descriptor_;
  metadata.reflection = SubscribeKeywordMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SubscribeKeywordMessage

// optional string user_id = 1;
void SubscribeKeywordMessage::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SubscribeKeywordMessage::user_id() const {
  // @@protoc_insertion_point(field_get:subscribe.SubscribeKeywordMessage.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SubscribeKeywordMessage::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:subscribe.SubscribeKeywordMessage.user_id)
}
void SubscribeKeywordMessage::set_user_id(const char* value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:subscribe.SubscribeKeywordMessage.user_id)
}
void SubscribeKeywordMessage::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:subscribe.SubscribeKeywordMessage.user_id)
}
::std::string* SubscribeKeywordMessage::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:subscribe.SubscribeKeywordMessage.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SubscribeKeywordMessage::release_user_id() {
  // @@protoc_insertion_point(field_release:subscribe.SubscribeKeywordMessage.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SubscribeKeywordMessage::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:subscribe.SubscribeKeywordMessage.user_id)
}

// optional string subscribe_id = 2;
void SubscribeKeywordMessage::clear_subscribe_id() {
  subscribe_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SubscribeKeywordMessage::subscribe_id() const {
  // @@protoc_insertion_point(field_get:subscribe.SubscribeKeywordMessage.subscribe_id)
  return subscribe_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SubscribeKeywordMessage::set_subscribe_id(const ::std::string& value) {
  
  subscribe_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:subscribe.SubscribeKeywordMessage.subscribe_id)
}
void SubscribeKeywordMessage::set_subscribe_id(const char* value) {
  
  subscribe_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:subscribe.SubscribeKeywordMessage.subscribe_id)
}
void SubscribeKeywordMessage::set_subscribe_id(const char* value, size_t size) {
  
  subscribe_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:subscribe.SubscribeKeywordMessage.subscribe_id)
}
::std::string* SubscribeKeywordMessage::mutable_subscribe_id() {
  
  // @@protoc_insertion_point(field_mutable:subscribe.SubscribeKeywordMessage.subscribe_id)
  return subscribe_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SubscribeKeywordMessage::release_subscribe_id() {
  // @@protoc_insertion_point(field_release:subscribe.SubscribeKeywordMessage.subscribe_id)
  
  return subscribe_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SubscribeKeywordMessage::set_allocated_subscribe_id(::std::string* subscribe_id) {
  if (subscribe_id != NULL) {
    
  } else {
    
  }
  subscribe_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subscribe_id);
  // @@protoc_insertion_point(field_set_allocated:subscribe.SubscribeKeywordMessage.subscribe_id)
}

// optional string docu_type = 3;
void SubscribeKeywordMessage::clear_docu_type() {
  docu_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SubscribeKeywordMessage::docu_type() const {
  // @@protoc_insertion_point(field_get:subscribe.SubscribeKeywordMessage.docu_type)
  return docu_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SubscribeKeywordMessage::set_docu_type(const ::std::string& value) {
  
  docu_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:subscribe.SubscribeKeywordMessage.docu_type)
}
void SubscribeKeywordMessage::set_docu_type(const char* value) {
  
  docu_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:subscribe.SubscribeKeywordMessage.docu_type)
}
void SubscribeKeywordMessage::set_docu_type(const char* value, size_t size) {
  
  docu_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:subscribe.SubscribeKeywordMessage.docu_type)
}
::std::string* SubscribeKeywordMessage::mutable_docu_type() {
  
  // @@protoc_insertion_point(field_mutable:subscribe.SubscribeKeywordMessage.docu_type)
  return docu_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SubscribeKeywordMessage::release_docu_type() {
  // @@protoc_insertion_point(field_release:subscribe.SubscribeKeywordMessage.docu_type)
  
  return docu_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SubscribeKeywordMessage::set_allocated_docu_type(::std::string* docu_type) {
  if (docu_type != NULL) {
    
  } else {
    
  }
  docu_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), docu_type);
  // @@protoc_insertion_point(field_set_allocated:subscribe.SubscribeKeywordMessage.docu_type)
}

// optional string add_time = 4;
void SubscribeKeywordMessage::clear_add_time() {
  add_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SubscribeKeywordMessage::add_time() const {
  // @@protoc_insertion_point(field_get:subscribe.SubscribeKeywordMessage.add_time)
  return add_time_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SubscribeKeywordMessage::set_add_time(const ::std::string& value) {
  
  add_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:subscribe.SubscribeKeywordMessage.add_time)
}
void SubscribeKeywordMessage::set_add_time(const char* value) {
  
  add_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:subscribe.SubscribeKeywordMessage.add_time)
}
void SubscribeKeywordMessage::set_add_time(const char* value, size_t size) {
  
  add_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:subscribe.SubscribeKeywordMessage.add_time)
}
::std::string* SubscribeKeywordMessage::mutable_add_time() {
  
  // @@protoc_insertion_point(field_mutable:subscribe.SubscribeKeywordMessage.add_time)
  return add_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SubscribeKeywordMessage::release_add_time() {
  // @@protoc_insertion_point(field_release:subscribe.SubscribeKeywordMessage.add_time)
  
  return add_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SubscribeKeywordMessage::set_allocated_add_time(::std::string* add_time) {
  if (add_time != NULL) {
    
  } else {
    
  }
  add_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), add_time);
  // @@protoc_insertion_point(field_set_allocated:subscribe.SubscribeKeywordMessage.add_time)
}

// optional string keyword = 5;
void SubscribeKeywordMessage::clear_keyword() {
  keyword_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SubscribeKeywordMessage::keyword() const {
  // @@protoc_insertion_point(field_get:subscribe.SubscribeKeywordMessage.keyword)
  return keyword_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SubscribeKeywordMessage::set_keyword(const ::std::string& value) {
  
  keyword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:subscribe.SubscribeKeywordMessage.keyword)
}
void SubscribeKeywordMessage::set_keyword(const char* value) {
  
  keyword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:subscribe.SubscribeKeywordMessage.keyword)
}
void SubscribeKeywordMessage::set_keyword(const char* value, size_t size) {
  
  keyword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:subscribe.SubscribeKeywordMessage.keyword)
}
::std::string* SubscribeKeywordMessage::mutable_keyword() {
  
  // @@protoc_insertion_point(field_mutable:subscribe.SubscribeKeywordMessage.keyword)
  return keyword_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SubscribeKeywordMessage::release_keyword() {
  // @@protoc_insertion_point(field_release:subscribe.SubscribeKeywordMessage.keyword)
  
  return keyword_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SubscribeKeywordMessage::set_allocated_keyword(::std::string* keyword) {
  if (keyword != NULL) {
    
  } else {
    
  }
  keyword_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), keyword);
  // @@protoc_insertion_point(field_set_allocated:subscribe.SubscribeKeywordMessage.keyword)
}

inline const SubscribeKeywordMessage* SubscribeKeywordMessage::internal_default_instance() {
  return &SubscribeKeywordMessage_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DocType::kChNameFieldNumber;
const int DocType::kEnNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DocType::DocType()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:subscribe.DocType)
}

void DocType::InitAsDefaultInstance() {
}

DocType::DocType(const DocType& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:subscribe.DocType)
}

void DocType::SharedCtor() {
  ch_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  en_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

DocType::~DocType() {
  // @@protoc_insertion_point(destructor:subscribe.DocType)
  SharedDtor();
}

void DocType::SharedDtor() {
  ch_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  en_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DocType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DocType_descriptor_;
}

const DocType& DocType::default_instance() {
  protobuf_InitDefaults_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<DocType> DocType_default_instance_;

DocType* DocType::New(::google::protobuf::Arena* arena) const {
  DocType* n = new DocType;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DocType::Clear() {
// @@protoc_insertion_point(message_clear_start:subscribe.DocType)
  ch_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  en_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DocType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:subscribe.DocType)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ch_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ch_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ch_name().data(), this->ch_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "subscribe.DocType.ch_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_en_name;
        break;
      }

      // optional string en_name = 2;
      case 2: {
        if (tag == 18) {
         parse_en_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_en_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->en_name().data(), this->en_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "subscribe.DocType.en_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:subscribe.DocType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:subscribe.DocType)
  return false;
#undef DO_
}

void DocType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:subscribe.DocType)
  // optional string ch_name = 1;
  if (this->ch_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ch_name().data(), this->ch_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "subscribe.DocType.ch_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ch_name(), output);
  }

  // optional string en_name = 2;
  if (this->en_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->en_name().data(), this->en_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "subscribe.DocType.en_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->en_name(), output);
  }

  // @@protoc_insertion_point(serialize_end:subscribe.DocType)
}

::google::protobuf::uint8* DocType::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:subscribe.DocType)
  // optional string ch_name = 1;
  if (this->ch_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ch_name().data(), this->ch_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "subscribe.DocType.ch_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ch_name(), target);
  }

  // optional string en_name = 2;
  if (this->en_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->en_name().data(), this->en_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "subscribe.DocType.en_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->en_name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:subscribe.DocType)
  return target;
}

size_t DocType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:subscribe.DocType)
  size_t total_size = 0;

  // optional string ch_name = 1;
  if (this->ch_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ch_name());
  }

  // optional string en_name = 2;
  if (this->en_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->en_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocType::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:subscribe.DocType)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DocType* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DocType>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:subscribe.DocType)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:subscribe.DocType)
    UnsafeMergeFrom(*source);
  }
}

void DocType::MergeFrom(const DocType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:subscribe.DocType)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void DocType::UnsafeMergeFrom(const DocType& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.ch_name().size() > 0) {

    ch_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ch_name_);
  }
  if (from.en_name().size() > 0) {

    en_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.en_name_);
  }
}

void DocType::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:subscribe.DocType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocType::CopyFrom(const DocType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:subscribe.DocType)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool DocType::IsInitialized() const {

  return true;
}

void DocType::Swap(DocType* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DocType::InternalSwap(DocType* other) {
  ch_name_.Swap(&other->ch_name_);
  en_name_.Swap(&other->en_name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DocType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DocType_descriptor_;
  metadata.reflection = DocType_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DocType

// optional string ch_name = 1;
void DocType::clear_ch_name() {
  ch_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DocType::ch_name() const {
  // @@protoc_insertion_point(field_get:subscribe.DocType.ch_name)
  return ch_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DocType::set_ch_name(const ::std::string& value) {
  
  ch_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:subscribe.DocType.ch_name)
}
void DocType::set_ch_name(const char* value) {
  
  ch_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:subscribe.DocType.ch_name)
}
void DocType::set_ch_name(const char* value, size_t size) {
  
  ch_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:subscribe.DocType.ch_name)
}
::std::string* DocType::mutable_ch_name() {
  
  // @@protoc_insertion_point(field_mutable:subscribe.DocType.ch_name)
  return ch_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DocType::release_ch_name() {
  // @@protoc_insertion_point(field_release:subscribe.DocType.ch_name)
  
  return ch_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DocType::set_allocated_ch_name(::std::string* ch_name) {
  if (ch_name != NULL) {
    
  } else {
    
  }
  ch_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ch_name);
  // @@protoc_insertion_point(field_set_allocated:subscribe.DocType.ch_name)
}

// optional string en_name = 2;
void DocType::clear_en_name() {
  en_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DocType::en_name() const {
  // @@protoc_insertion_point(field_get:subscribe.DocType.en_name)
  return en_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DocType::set_en_name(const ::std::string& value) {
  
  en_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:subscribe.DocType.en_name)
}
void DocType::set_en_name(const char* value) {
  
  en_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:subscribe.DocType.en_name)
}
void DocType::set_en_name(const char* value, size_t size) {
  
  en_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:subscribe.DocType.en_name)
}
::std::string* DocType::mutable_en_name() {
  
  // @@protoc_insertion_point(field_mutable:subscribe.DocType.en_name)
  return en_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DocType::release_en_name() {
  // @@protoc_insertion_point(field_release:subscribe.DocType.en_name)
  
  return en_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DocType::set_allocated_en_name(::std::string* en_name) {
  if (en_name != NULL) {
    
  } else {
    
  }
  en_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), en_name);
  // @@protoc_insertion_point(field_set_allocated:subscribe.DocType.en_name)
}

inline const DocType* DocType::internal_default_instance() {
  return &DocType_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SourceType::kChNameFieldNumber;
const int SourceType::kEnNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SourceType::SourceType()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:subscribe.SourceType)
}

void SourceType::InitAsDefaultInstance() {
}

SourceType::SourceType(const SourceType& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:subscribe.SourceType)
}

void SourceType::SharedCtor() {
  ch_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  en_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

SourceType::~SourceType() {
  // @@protoc_insertion_point(destructor:subscribe.SourceType)
  SharedDtor();
}

void SourceType::SharedDtor() {
  ch_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  en_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SourceType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SourceType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SourceType_descriptor_;
}

const SourceType& SourceType::default_instance() {
  protobuf_InitDefaults_subscribe_2fmsg_5fsubscribe_5fkeyword_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SourceType> SourceType_default_instance_;

SourceType* SourceType::New(::google::protobuf::Arena* arena) const {
  SourceType* n = new SourceType;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SourceType::Clear() {
// @@protoc_insertion_point(message_clear_start:subscribe.SourceType)
  ch_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  en_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SourceType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:subscribe.SourceType)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ch_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ch_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ch_name().data(), this->ch_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "subscribe.SourceType.ch_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_en_name;
        break;
      }

      // optional string en_name = 2;
      case 2: {
        if (tag == 18) {
         parse_en_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_en_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->en_name().data(), this->en_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "subscribe.SourceType.en_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:subscribe.SourceType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:subscribe.SourceType)
  return false;
#undef DO_
}

void SourceType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:subscribe.SourceType)
  // optional string ch_name = 1;
  if (this->ch_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ch_name().data(), this->ch_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "subscribe.SourceType.ch_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ch_name(), output);
  }

  // optional string en_name = 2;
  if (this->en_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->en_name().data(), this->en_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "subscribe.SourceType.en_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->en_name(), output);
  }

  // @@protoc_insertion_point(serialize_end:subscribe.SourceType)
}

::google::protobuf::uint8* SourceType::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:subscribe.SourceType)
  // optional string ch_name = 1;
  if (this->ch_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ch_name().data(), this->ch_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "subscribe.SourceType.ch_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ch_name(), target);
  }

  // optional string en_name = 2;
  if (this->en_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->en_name().data(), this->en_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "subscribe.SourceType.en_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->en_name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:subscribe.SourceType)
  return target;
}

size_t SourceType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:subscribe.SourceType)
  size_t total_size = 0;

  // optional string ch_name = 1;
  if (this->ch_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ch_name());
  }

  // optional string en_name = 2;
  if (this->en_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->en_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SourceType::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:subscribe.SourceType)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SourceType* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SourceType>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:subscribe.SourceType)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:subscribe.SourceType)
    UnsafeMergeFrom(*source);
  }
}

void SourceType::MergeFrom(const SourceType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:subscribe.SourceType)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SourceType::UnsafeMergeFrom(const SourceType& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.ch_name().size() > 0) {

    ch_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ch_name_);
  }
  if (from.en_name().size() > 0) {

    en_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.en_name_);
  }
}

void SourceType::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:subscribe.SourceType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SourceType::CopyFrom(const SourceType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:subscribe.SourceType)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SourceType::IsInitialized() const {

  return true;
}

void SourceType::Swap(SourceType* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SourceType::InternalSwap(SourceType* other) {
  ch_name_.Swap(&other->ch_name_);
  en_name_.Swap(&other->en_name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SourceType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SourceType_descriptor_;
  metadata.reflection = SourceType_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SourceType

// optional string ch_name = 1;
void SourceType::clear_ch_name() {
  ch_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SourceType::ch_name() const {
  // @@protoc_insertion_point(field_get:subscribe.SourceType.ch_name)
  return ch_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SourceType::set_ch_name(const ::std::string& value) {
  
  ch_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:subscribe.SourceType.ch_name)
}
void SourceType::set_ch_name(const char* value) {
  
  ch_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:subscribe.SourceType.ch_name)
}
void SourceType::set_ch_name(const char* value, size_t size) {
  
  ch_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:subscribe.SourceType.ch_name)
}
::std::string* SourceType::mutable_ch_name() {
  
  // @@protoc_insertion_point(field_mutable:subscribe.SourceType.ch_name)
  return ch_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SourceType::release_ch_name() {
  // @@protoc_insertion_point(field_release:subscribe.SourceType.ch_name)
  
  return ch_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SourceType::set_allocated_ch_name(::std::string* ch_name) {
  if (ch_name != NULL) {
    
  } else {
    
  }
  ch_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ch_name);
  // @@protoc_insertion_point(field_set_allocated:subscribe.SourceType.ch_name)
}

// optional string en_name = 2;
void SourceType::clear_en_name() {
  en_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SourceType::en_name() const {
  // @@protoc_insertion_point(field_get:subscribe.SourceType.en_name)
  return en_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SourceType::set_en_name(const ::std::string& value) {
  
  en_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:subscribe.SourceType.en_name)
}
void SourceType::set_en_name(const char* value) {
  
  en_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:subscribe.SourceType.en_name)
}
void SourceType::set_en_name(const char* value, size_t size) {
  
  en_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:subscribe.SourceType.en_name)
}
::std::string* SourceType::mutable_en_name() {
  
  // @@protoc_insertion_point(field_mutable:subscribe.SourceType.en_name)
  return en_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SourceType::release_en_name() {
  // @@protoc_insertion_point(field_release:subscribe.SourceType.en_name)
  
  return en_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SourceType::set_allocated_en_name(::std::string* en_name) {
  if (en_name != NULL) {
    
  } else {
    
  }
  en_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), en_name);
  // @@protoc_insertion_point(field_set_allocated:subscribe.SourceType.en_name)
}

inline const SourceType* SourceType::internal_default_instance() {
  return &SourceType_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace subscribe

// @@protoc_insertion_point(global_scope)
