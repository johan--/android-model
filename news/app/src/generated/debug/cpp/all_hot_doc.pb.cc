// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: all_hot_doc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "all_hot_doc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace main {

namespace {

const ::google::protobuf::Descriptor* HotDocRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HotDocRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* HotDocReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HotDocReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* HotDoc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HotDoc_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_all_5fhot_5fdoc_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_all_5fhot_5fdoc_2eproto() {
  protobuf_AddDesc_all_5fhot_5fdoc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "all_hot_doc.proto");
  GOOGLE_CHECK(file != NULL);
  HotDocRequest_descriptor_ = file->message_type(0);
  static const int HotDocRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HotDocRequest, page_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HotDocRequest, page_size_),
  };
  HotDocRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HotDocRequest_descriptor_,
      HotDocRequest::internal_default_instance(),
      HotDocRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(HotDocRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HotDocRequest, _internal_metadata_));
  HotDocReply_descriptor_ = file->message_type(1);
  static const int HotDocReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HotDocReply, hot_doc_),
  };
  HotDocReply_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HotDocReply_descriptor_,
      HotDocReply::internal_default_instance(),
      HotDocReply_offsets_,
      -1,
      -1,
      -1,
      sizeof(HotDocReply),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HotDocReply, _internal_metadata_));
  HotDoc_descriptor_ = file->message_type(2);
  static const int HotDoc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HotDoc, docu_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HotDoc, docu_title_),
  };
  HotDoc_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HotDoc_descriptor_,
      HotDoc::internal_default_instance(),
      HotDoc_offsets_,
      -1,
      -1,
      -1,
      sizeof(HotDoc),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HotDoc, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_all_5fhot_5fdoc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HotDocRequest_descriptor_, HotDocRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HotDocReply_descriptor_, HotDocReply::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HotDoc_descriptor_, HotDoc::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_all_5fhot_5fdoc_2eproto() {
  HotDocRequest_default_instance_.Shutdown();
  delete HotDocRequest_reflection_;
  HotDocReply_default_instance_.Shutdown();
  delete HotDocReply_reflection_;
  HotDoc_default_instance_.Shutdown();
  delete HotDoc_reflection_;
}

void protobuf_InitDefaults_all_5fhot_5fdoc_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  HotDocRequest_default_instance_.DefaultConstruct();
  HotDocReply_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  HotDoc_default_instance_.DefaultConstruct();
  HotDocRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  HotDocReply_default_instance_.get_mutable()->InitAsDefaultInstance();
  HotDoc_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_all_5fhot_5fdoc_2eproto_once_);
void protobuf_InitDefaults_all_5fhot_5fdoc_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_all_5fhot_5fdoc_2eproto_once_,
                 &protobuf_InitDefaults_all_5fhot_5fdoc_2eproto_impl);
}
void protobuf_AddDesc_all_5fhot_5fdoc_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_all_5fhot_5fdoc_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021all_hot_doc.proto\022\004main\"7\n\rHotDocReque"
    "st\022\023\n\013page_number\030\001 \001(\t\022\021\n\tpage_size\030\002 \001"
    "(\t\",\n\013HotDocReply\022\035\n\007hot_doc\030\001 \003(\0132\014.mai"
    "n.HotDoc\"-\n\006HotDoc\022\017\n\007docu_id\030\001 \001(\t\022\022\n\nd"
    "ocu_title\030\002 \001(\tB\022\n\020com.wanfang.mainb\006pro"
    "to3", 203);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "all_hot_doc.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_all_5fhot_5fdoc_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_all_5fhot_5fdoc_2eproto_once_);
void protobuf_AddDesc_all_5fhot_5fdoc_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_all_5fhot_5fdoc_2eproto_once_,
                 &protobuf_AddDesc_all_5fhot_5fdoc_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_all_5fhot_5fdoc_2eproto {
  StaticDescriptorInitializer_all_5fhot_5fdoc_2eproto() {
    protobuf_AddDesc_all_5fhot_5fdoc_2eproto();
  }
} static_descriptor_initializer_all_5fhot_5fdoc_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HotDocRequest::kPageNumberFieldNumber;
const int HotDocRequest::kPageSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HotDocRequest::HotDocRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_all_5fhot_5fdoc_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.HotDocRequest)
}

void HotDocRequest::InitAsDefaultInstance() {
}

HotDocRequest::HotDocRequest(const HotDocRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.HotDocRequest)
}

void HotDocRequest::SharedCtor() {
  page_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_size_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

HotDocRequest::~HotDocRequest() {
  // @@protoc_insertion_point(destructor:main.HotDocRequest)
  SharedDtor();
}

void HotDocRequest::SharedDtor() {
  page_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_size_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void HotDocRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HotDocRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HotDocRequest_descriptor_;
}

const HotDocRequest& HotDocRequest::default_instance() {
  protobuf_InitDefaults_all_5fhot_5fdoc_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<HotDocRequest> HotDocRequest_default_instance_;

HotDocRequest* HotDocRequest::New(::google::protobuf::Arena* arena) const {
  HotDocRequest* n = new HotDocRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HotDocRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:main.HotDocRequest)
  page_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_size_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool HotDocRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:main.HotDocRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string page_number = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_number()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->page_number().data(), this->page_number().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "main.HotDocRequest.page_number"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_page_size;
        break;
      }

      // optional string page_size = 2;
      case 2: {
        if (tag == 18) {
         parse_page_size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_size()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->page_size().data(), this->page_size().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "main.HotDocRequest.page_size"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.HotDocRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.HotDocRequest)
  return false;
#undef DO_
}

void HotDocRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.HotDocRequest)
  // optional string page_number = 1;
  if (this->page_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_number().data(), this->page_number().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "main.HotDocRequest.page_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->page_number(), output);
  }

  // optional string page_size = 2;
  if (this->page_size().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_size().data(), this->page_size().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "main.HotDocRequest.page_size");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->page_size(), output);
  }

  // @@protoc_insertion_point(serialize_end:main.HotDocRequest)
}

::google::protobuf::uint8* HotDocRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:main.HotDocRequest)
  // optional string page_number = 1;
  if (this->page_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_number().data(), this->page_number().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "main.HotDocRequest.page_number");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->page_number(), target);
  }

  // optional string page_size = 2;
  if (this->page_size().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_size().data(), this->page_size().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "main.HotDocRequest.page_size");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->page_size(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:main.HotDocRequest)
  return target;
}

size_t HotDocRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:main.HotDocRequest)
  size_t total_size = 0;

  // optional string page_number = 1;
  if (this->page_number().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->page_number());
  }

  // optional string page_size = 2;
  if (this->page_size().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->page_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HotDocRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:main.HotDocRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const HotDocRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HotDocRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:main.HotDocRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:main.HotDocRequest)
    UnsafeMergeFrom(*source);
  }
}

void HotDocRequest::MergeFrom(const HotDocRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:main.HotDocRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void HotDocRequest::UnsafeMergeFrom(const HotDocRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.page_number().size() > 0) {

    page_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_number_);
  }
  if (from.page_size().size() > 0) {

    page_size_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_size_);
  }
}

void HotDocRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:main.HotDocRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HotDocRequest::CopyFrom(const HotDocRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:main.HotDocRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool HotDocRequest::IsInitialized() const {

  return true;
}

void HotDocRequest::Swap(HotDocRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HotDocRequest::InternalSwap(HotDocRequest* other) {
  page_number_.Swap(&other->page_number_);
  page_size_.Swap(&other->page_size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HotDocRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HotDocRequest_descriptor_;
  metadata.reflection = HotDocRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HotDocRequest

// optional string page_number = 1;
void HotDocRequest::clear_page_number() {
  page_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& HotDocRequest::page_number() const {
  // @@protoc_insertion_point(field_get:main.HotDocRequest.page_number)
  return page_number_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HotDocRequest::set_page_number(const ::std::string& value) {
  
  page_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:main.HotDocRequest.page_number)
}
void HotDocRequest::set_page_number(const char* value) {
  
  page_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:main.HotDocRequest.page_number)
}
void HotDocRequest::set_page_number(const char* value, size_t size) {
  
  page_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:main.HotDocRequest.page_number)
}
::std::string* HotDocRequest::mutable_page_number() {
  
  // @@protoc_insertion_point(field_mutable:main.HotDocRequest.page_number)
  return page_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* HotDocRequest::release_page_number() {
  // @@protoc_insertion_point(field_release:main.HotDocRequest.page_number)
  
  return page_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HotDocRequest::set_allocated_page_number(::std::string* page_number) {
  if (page_number != NULL) {
    
  } else {
    
  }
  page_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_number);
  // @@protoc_insertion_point(field_set_allocated:main.HotDocRequest.page_number)
}

// optional string page_size = 2;
void HotDocRequest::clear_page_size() {
  page_size_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& HotDocRequest::page_size() const {
  // @@protoc_insertion_point(field_get:main.HotDocRequest.page_size)
  return page_size_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HotDocRequest::set_page_size(const ::std::string& value) {
  
  page_size_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:main.HotDocRequest.page_size)
}
void HotDocRequest::set_page_size(const char* value) {
  
  page_size_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:main.HotDocRequest.page_size)
}
void HotDocRequest::set_page_size(const char* value, size_t size) {
  
  page_size_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:main.HotDocRequest.page_size)
}
::std::string* HotDocRequest::mutable_page_size() {
  
  // @@protoc_insertion_point(field_mutable:main.HotDocRequest.page_size)
  return page_size_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* HotDocRequest::release_page_size() {
  // @@protoc_insertion_point(field_release:main.HotDocRequest.page_size)
  
  return page_size_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HotDocRequest::set_allocated_page_size(::std::string* page_size) {
  if (page_size != NULL) {
    
  } else {
    
  }
  page_size_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_size);
  // @@protoc_insertion_point(field_set_allocated:main.HotDocRequest.page_size)
}

inline const HotDocRequest* HotDocRequest::internal_default_instance() {
  return &HotDocRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HotDocReply::kHotDocFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HotDocReply::HotDocReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_all_5fhot_5fdoc_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.HotDocReply)
}

void HotDocReply::InitAsDefaultInstance() {
}

HotDocReply::HotDocReply(const HotDocReply& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.HotDocReply)
}

void HotDocReply::SharedCtor() {
  _cached_size_ = 0;
}

HotDocReply::~HotDocReply() {
  // @@protoc_insertion_point(destructor:main.HotDocReply)
  SharedDtor();
}

void HotDocReply::SharedDtor() {
}

void HotDocReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HotDocReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HotDocReply_descriptor_;
}

const HotDocReply& HotDocReply::default_instance() {
  protobuf_InitDefaults_all_5fhot_5fdoc_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<HotDocReply> HotDocReply_default_instance_;

HotDocReply* HotDocReply::New(::google::protobuf::Arena* arena) const {
  HotDocReply* n = new HotDocReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HotDocReply::Clear() {
// @@protoc_insertion_point(message_clear_start:main.HotDocReply)
  hot_doc_.Clear();
}

bool HotDocReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:main.HotDocReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .main.HotDoc hot_doc = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_hot_doc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_hot_doc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_hot_doc;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.HotDocReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.HotDocReply)
  return false;
#undef DO_
}

void HotDocReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.HotDocReply)
  // repeated .main.HotDoc hot_doc = 1;
  for (unsigned int i = 0, n = this->hot_doc_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->hot_doc(i), output);
  }

  // @@protoc_insertion_point(serialize_end:main.HotDocReply)
}

::google::protobuf::uint8* HotDocReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:main.HotDocReply)
  // repeated .main.HotDoc hot_doc = 1;
  for (unsigned int i = 0, n = this->hot_doc_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->hot_doc(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:main.HotDocReply)
  return target;
}

size_t HotDocReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:main.HotDocReply)
  size_t total_size = 0;

  // repeated .main.HotDoc hot_doc = 1;
  {
    unsigned int count = this->hot_doc_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hot_doc(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HotDocReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:main.HotDocReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const HotDocReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HotDocReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:main.HotDocReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:main.HotDocReply)
    UnsafeMergeFrom(*source);
  }
}

void HotDocReply::MergeFrom(const HotDocReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:main.HotDocReply)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void HotDocReply::UnsafeMergeFrom(const HotDocReply& from) {
  GOOGLE_DCHECK(&from != this);
  hot_doc_.MergeFrom(from.hot_doc_);
}

void HotDocReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:main.HotDocReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HotDocReply::CopyFrom(const HotDocReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:main.HotDocReply)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool HotDocReply::IsInitialized() const {

  return true;
}

void HotDocReply::Swap(HotDocReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HotDocReply::InternalSwap(HotDocReply* other) {
  hot_doc_.UnsafeArenaSwap(&other->hot_doc_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HotDocReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HotDocReply_descriptor_;
  metadata.reflection = HotDocReply_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HotDocReply

// repeated .main.HotDoc hot_doc = 1;
int HotDocReply::hot_doc_size() const {
  return hot_doc_.size();
}
void HotDocReply::clear_hot_doc() {
  hot_doc_.Clear();
}
const ::main::HotDoc& HotDocReply::hot_doc(int index) const {
  // @@protoc_insertion_point(field_get:main.HotDocReply.hot_doc)
  return hot_doc_.Get(index);
}
::main::HotDoc* HotDocReply::mutable_hot_doc(int index) {
  // @@protoc_insertion_point(field_mutable:main.HotDocReply.hot_doc)
  return hot_doc_.Mutable(index);
}
::main::HotDoc* HotDocReply::add_hot_doc() {
  // @@protoc_insertion_point(field_add:main.HotDocReply.hot_doc)
  return hot_doc_.Add();
}
::google::protobuf::RepeatedPtrField< ::main::HotDoc >*
HotDocReply::mutable_hot_doc() {
  // @@protoc_insertion_point(field_mutable_list:main.HotDocReply.hot_doc)
  return &hot_doc_;
}
const ::google::protobuf::RepeatedPtrField< ::main::HotDoc >&
HotDocReply::hot_doc() const {
  // @@protoc_insertion_point(field_list:main.HotDocReply.hot_doc)
  return hot_doc_;
}

inline const HotDocReply* HotDocReply::internal_default_instance() {
  return &HotDocReply_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HotDoc::kDocuIdFieldNumber;
const int HotDoc::kDocuTitleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HotDoc::HotDoc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_all_5fhot_5fdoc_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.HotDoc)
}

void HotDoc::InitAsDefaultInstance() {
}

HotDoc::HotDoc(const HotDoc& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.HotDoc)
}

void HotDoc::SharedCtor() {
  docu_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  docu_title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

HotDoc::~HotDoc() {
  // @@protoc_insertion_point(destructor:main.HotDoc)
  SharedDtor();
}

void HotDoc::SharedDtor() {
  docu_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  docu_title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void HotDoc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HotDoc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HotDoc_descriptor_;
}

const HotDoc& HotDoc::default_instance() {
  protobuf_InitDefaults_all_5fhot_5fdoc_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<HotDoc> HotDoc_default_instance_;

HotDoc* HotDoc::New(::google::protobuf::Arena* arena) const {
  HotDoc* n = new HotDoc;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HotDoc::Clear() {
// @@protoc_insertion_point(message_clear_start:main.HotDoc)
  docu_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  docu_title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool HotDoc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:main.HotDoc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string docu_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_docu_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->docu_id().data(), this->docu_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "main.HotDoc.docu_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_docu_title;
        break;
      }

      // optional string docu_title = 2;
      case 2: {
        if (tag == 18) {
         parse_docu_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_docu_title()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->docu_title().data(), this->docu_title().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "main.HotDoc.docu_title"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.HotDoc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.HotDoc)
  return false;
#undef DO_
}

void HotDoc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.HotDoc)
  // optional string docu_id = 1;
  if (this->docu_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->docu_id().data(), this->docu_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "main.HotDoc.docu_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->docu_id(), output);
  }

  // optional string docu_title = 2;
  if (this->docu_title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->docu_title().data(), this->docu_title().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "main.HotDoc.docu_title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->docu_title(), output);
  }

  // @@protoc_insertion_point(serialize_end:main.HotDoc)
}

::google::protobuf::uint8* HotDoc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:main.HotDoc)
  // optional string docu_id = 1;
  if (this->docu_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->docu_id().data(), this->docu_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "main.HotDoc.docu_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->docu_id(), target);
  }

  // optional string docu_title = 2;
  if (this->docu_title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->docu_title().data(), this->docu_title().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "main.HotDoc.docu_title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->docu_title(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:main.HotDoc)
  return target;
}

size_t HotDoc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:main.HotDoc)
  size_t total_size = 0;

  // optional string docu_id = 1;
  if (this->docu_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->docu_id());
  }

  // optional string docu_title = 2;
  if (this->docu_title().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->docu_title());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HotDoc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:main.HotDoc)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const HotDoc* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HotDoc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:main.HotDoc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:main.HotDoc)
    UnsafeMergeFrom(*source);
  }
}

void HotDoc::MergeFrom(const HotDoc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:main.HotDoc)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void HotDoc::UnsafeMergeFrom(const HotDoc& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.docu_id().size() > 0) {

    docu_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.docu_id_);
  }
  if (from.docu_title().size() > 0) {

    docu_title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.docu_title_);
  }
}

void HotDoc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:main.HotDoc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HotDoc::CopyFrom(const HotDoc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:main.HotDoc)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool HotDoc::IsInitialized() const {

  return true;
}

void HotDoc::Swap(HotDoc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HotDoc::InternalSwap(HotDoc* other) {
  docu_id_.Swap(&other->docu_id_);
  docu_title_.Swap(&other->docu_title_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HotDoc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HotDoc_descriptor_;
  metadata.reflection = HotDoc_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HotDoc

// optional string docu_id = 1;
void HotDoc::clear_docu_id() {
  docu_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& HotDoc::docu_id() const {
  // @@protoc_insertion_point(field_get:main.HotDoc.docu_id)
  return docu_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HotDoc::set_docu_id(const ::std::string& value) {
  
  docu_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:main.HotDoc.docu_id)
}
void HotDoc::set_docu_id(const char* value) {
  
  docu_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:main.HotDoc.docu_id)
}
void HotDoc::set_docu_id(const char* value, size_t size) {
  
  docu_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:main.HotDoc.docu_id)
}
::std::string* HotDoc::mutable_docu_id() {
  
  // @@protoc_insertion_point(field_mutable:main.HotDoc.docu_id)
  return docu_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* HotDoc::release_docu_id() {
  // @@protoc_insertion_point(field_release:main.HotDoc.docu_id)
  
  return docu_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HotDoc::set_allocated_docu_id(::std::string* docu_id) {
  if (docu_id != NULL) {
    
  } else {
    
  }
  docu_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), docu_id);
  // @@protoc_insertion_point(field_set_allocated:main.HotDoc.docu_id)
}

// optional string docu_title = 2;
void HotDoc::clear_docu_title() {
  docu_title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& HotDoc::docu_title() const {
  // @@protoc_insertion_point(field_get:main.HotDoc.docu_title)
  return docu_title_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HotDoc::set_docu_title(const ::std::string& value) {
  
  docu_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:main.HotDoc.docu_title)
}
void HotDoc::set_docu_title(const char* value) {
  
  docu_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:main.HotDoc.docu_title)
}
void HotDoc::set_docu_title(const char* value, size_t size) {
  
  docu_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:main.HotDoc.docu_title)
}
::std::string* HotDoc::mutable_docu_title() {
  
  // @@protoc_insertion_point(field_mutable:main.HotDoc.docu_title)
  return docu_title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* HotDoc::release_docu_title() {
  // @@protoc_insertion_point(field_release:main.HotDoc.docu_title)
  
  return docu_title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HotDoc::set_allocated_docu_title(::std::string* docu_title) {
  if (docu_title != NULL) {
    
  } else {
    
  }
  docu_title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), docu_title);
  // @@protoc_insertion_point(field_set_allocated:main.HotDoc.docu_title)
}

inline const HotDoc* HotDoc::internal_default_instance() {
  return &HotDoc_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace main

// @@protoc_insertion_point(global_scope)
