// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: guess_like.proto

#ifndef PROTOBUF_guess_5flike_2eproto__INCLUDED
#define PROTOBUF_guess_5flike_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace main {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_guess_5flike_2eproto();
void protobuf_InitDefaults_guess_5flike_2eproto();
void protobuf_AssignDesc_guess_5flike_2eproto();
void protobuf_ShutdownFile_guess_5flike_2eproto();

class GuessLike;
class GuessLikeReply;
class GuessLikeRequest;

// ===================================================================

class GuessLikeRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:main.GuessLikeRequest) */ {
 public:
  GuessLikeRequest();
  virtual ~GuessLikeRequest();

  GuessLikeRequest(const GuessLikeRequest& from);

  inline GuessLikeRequest& operator=(const GuessLikeRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuessLikeRequest& default_instance();

  static const GuessLikeRequest* internal_default_instance();

  void Swap(GuessLikeRequest* other);

  // implements Message ----------------------------------------------

  inline GuessLikeRequest* New() const { return New(NULL); }

  GuessLikeRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuessLikeRequest& from);
  void MergeFrom(const GuessLikeRequest& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GuessLikeRequest* other);
  void UnsafeMergeFrom(const GuessLikeRequest& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string page_number = 1;
  void clear_page_number();
  static const int kPageNumberFieldNumber = 1;
  const ::std::string& page_number() const;
  void set_page_number(const ::std::string& value);
  void set_page_number(const char* value);
  void set_page_number(const char* value, size_t size);
  ::std::string* mutable_page_number();
  ::std::string* release_page_number();
  void set_allocated_page_number(::std::string* page_number);

  // optional string page_size = 2;
  void clear_page_size();
  static const int kPageSizeFieldNumber = 2;
  const ::std::string& page_size() const;
  void set_page_size(const ::std::string& value);
  void set_page_size(const char* value);
  void set_page_size(const char* value, size_t size);
  ::std::string* mutable_page_size();
  ::std::string* release_page_size();
  void set_allocated_page_size(::std::string* page_size);

  // optional string user_id = 3;
  void clear_user_id();
  static const int kUserIdFieldNumber = 3;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // @@protoc_insertion_point(class_scope:main.GuessLikeRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr page_number_;
  ::google::protobuf::internal::ArenaStringPtr page_size_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_guess_5flike_2eproto_impl();
  friend void  protobuf_AddDesc_guess_5flike_2eproto_impl();
  friend void protobuf_AssignDesc_guess_5flike_2eproto();
  friend void protobuf_ShutdownFile_guess_5flike_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<GuessLikeRequest> GuessLikeRequest_default_instance_;

// -------------------------------------------------------------------

class GuessLikeReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:main.GuessLikeReply) */ {
 public:
  GuessLikeReply();
  virtual ~GuessLikeReply();

  GuessLikeReply(const GuessLikeReply& from);

  inline GuessLikeReply& operator=(const GuessLikeReply& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuessLikeReply& default_instance();

  static const GuessLikeReply* internal_default_instance();

  void Swap(GuessLikeReply* other);

  // implements Message ----------------------------------------------

  inline GuessLikeReply* New() const { return New(NULL); }

  GuessLikeReply* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuessLikeReply& from);
  void MergeFrom(const GuessLikeReply& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GuessLikeReply* other);
  void UnsafeMergeFrom(const GuessLikeReply& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .main.GuessLike guess_like = 1;
  int guess_like_size() const;
  void clear_guess_like();
  static const int kGuessLikeFieldNumber = 1;
  const ::main::GuessLike& guess_like(int index) const;
  ::main::GuessLike* mutable_guess_like(int index);
  ::main::GuessLike* add_guess_like();
  ::google::protobuf::RepeatedPtrField< ::main::GuessLike >*
      mutable_guess_like();
  const ::google::protobuf::RepeatedPtrField< ::main::GuessLike >&
      guess_like() const;

  // @@protoc_insertion_point(class_scope:main.GuessLikeReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::main::GuessLike > guess_like_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_guess_5flike_2eproto_impl();
  friend void  protobuf_AddDesc_guess_5flike_2eproto_impl();
  friend void protobuf_AssignDesc_guess_5flike_2eproto();
  friend void protobuf_ShutdownFile_guess_5flike_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<GuessLikeReply> GuessLikeReply_default_instance_;

// -------------------------------------------------------------------

class GuessLike : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:main.GuessLike) */ {
 public:
  GuessLike();
  virtual ~GuessLike();

  GuessLike(const GuessLike& from);

  inline GuessLike& operator=(const GuessLike& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuessLike& default_instance();

  static const GuessLike* internal_default_instance();

  void Swap(GuessLike* other);

  // implements Message ----------------------------------------------

  inline GuessLike* New() const { return New(NULL); }

  GuessLike* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuessLike& from);
  void MergeFrom(const GuessLike& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GuessLike* other);
  void UnsafeMergeFrom(const GuessLike& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string like_cover = 1;
  void clear_like_cover();
  static const int kLikeCoverFieldNumber = 1;
  const ::std::string& like_cover() const;
  void set_like_cover(const ::std::string& value);
  void set_like_cover(const char* value);
  void set_like_cover(const char* value, size_t size);
  ::std::string* mutable_like_cover();
  ::std::string* release_like_cover();
  void set_allocated_like_cover(::std::string* like_cover);

  // optional string like_id = 2;
  void clear_like_id();
  static const int kLikeIdFieldNumber = 2;
  const ::std::string& like_id() const;
  void set_like_id(const ::std::string& value);
  void set_like_id(const char* value);
  void set_like_id(const char* value, size_t size);
  ::std::string* mutable_like_id();
  ::std::string* release_like_id();
  void set_allocated_like_id(::std::string* like_id);

  // optional string like_title = 3;
  void clear_like_title();
  static const int kLikeTitleFieldNumber = 3;
  const ::std::string& like_title() const;
  void set_like_title(const ::std::string& value);
  void set_like_title(const char* value);
  void set_like_title(const char* value, size_t size);
  ::std::string* mutable_like_title();
  ::std::string* release_like_title();
  void set_allocated_like_title(::std::string* like_title);

  // @@protoc_insertion_point(class_scope:main.GuessLike)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr like_cover_;
  ::google::protobuf::internal::ArenaStringPtr like_id_;
  ::google::protobuf::internal::ArenaStringPtr like_title_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_guess_5flike_2eproto_impl();
  friend void  protobuf_AddDesc_guess_5flike_2eproto_impl();
  friend void protobuf_AssignDesc_guess_5flike_2eproto();
  friend void protobuf_ShutdownFile_guess_5flike_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<GuessLike> GuessLike_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// GuessLikeRequest

// optional string page_number = 1;
inline void GuessLikeRequest::clear_page_number() {
  page_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GuessLikeRequest::page_number() const {
  // @@protoc_insertion_point(field_get:main.GuessLikeRequest.page_number)
  return page_number_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GuessLikeRequest::set_page_number(const ::std::string& value) {
  
  page_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:main.GuessLikeRequest.page_number)
}
inline void GuessLikeRequest::set_page_number(const char* value) {
  
  page_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:main.GuessLikeRequest.page_number)
}
inline void GuessLikeRequest::set_page_number(const char* value, size_t size) {
  
  page_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:main.GuessLikeRequest.page_number)
}
inline ::std::string* GuessLikeRequest::mutable_page_number() {
  
  // @@protoc_insertion_point(field_mutable:main.GuessLikeRequest.page_number)
  return page_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GuessLikeRequest::release_page_number() {
  // @@protoc_insertion_point(field_release:main.GuessLikeRequest.page_number)
  
  return page_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GuessLikeRequest::set_allocated_page_number(::std::string* page_number) {
  if (page_number != NULL) {
    
  } else {
    
  }
  page_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_number);
  // @@protoc_insertion_point(field_set_allocated:main.GuessLikeRequest.page_number)
}

// optional string page_size = 2;
inline void GuessLikeRequest::clear_page_size() {
  page_size_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GuessLikeRequest::page_size() const {
  // @@protoc_insertion_point(field_get:main.GuessLikeRequest.page_size)
  return page_size_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GuessLikeRequest::set_page_size(const ::std::string& value) {
  
  page_size_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:main.GuessLikeRequest.page_size)
}
inline void GuessLikeRequest::set_page_size(const char* value) {
  
  page_size_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:main.GuessLikeRequest.page_size)
}
inline void GuessLikeRequest::set_page_size(const char* value, size_t size) {
  
  page_size_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:main.GuessLikeRequest.page_size)
}
inline ::std::string* GuessLikeRequest::mutable_page_size() {
  
  // @@protoc_insertion_point(field_mutable:main.GuessLikeRequest.page_size)
  return page_size_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GuessLikeRequest::release_page_size() {
  // @@protoc_insertion_point(field_release:main.GuessLikeRequest.page_size)
  
  return page_size_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GuessLikeRequest::set_allocated_page_size(::std::string* page_size) {
  if (page_size != NULL) {
    
  } else {
    
  }
  page_size_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_size);
  // @@protoc_insertion_point(field_set_allocated:main.GuessLikeRequest.page_size)
}

// optional string user_id = 3;
inline void GuessLikeRequest::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GuessLikeRequest::user_id() const {
  // @@protoc_insertion_point(field_get:main.GuessLikeRequest.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GuessLikeRequest::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:main.GuessLikeRequest.user_id)
}
inline void GuessLikeRequest::set_user_id(const char* value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:main.GuessLikeRequest.user_id)
}
inline void GuessLikeRequest::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:main.GuessLikeRequest.user_id)
}
inline ::std::string* GuessLikeRequest::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:main.GuessLikeRequest.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GuessLikeRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:main.GuessLikeRequest.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GuessLikeRequest::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:main.GuessLikeRequest.user_id)
}

inline const GuessLikeRequest* GuessLikeRequest::internal_default_instance() {
  return &GuessLikeRequest_default_instance_.get();
}
// -------------------------------------------------------------------

// GuessLikeReply

// repeated .main.GuessLike guess_like = 1;
inline int GuessLikeReply::guess_like_size() const {
  return guess_like_.size();
}
inline void GuessLikeReply::clear_guess_like() {
  guess_like_.Clear();
}
inline const ::main::GuessLike& GuessLikeReply::guess_like(int index) const {
  // @@protoc_insertion_point(field_get:main.GuessLikeReply.guess_like)
  return guess_like_.Get(index);
}
inline ::main::GuessLike* GuessLikeReply::mutable_guess_like(int index) {
  // @@protoc_insertion_point(field_mutable:main.GuessLikeReply.guess_like)
  return guess_like_.Mutable(index);
}
inline ::main::GuessLike* GuessLikeReply::add_guess_like() {
  // @@protoc_insertion_point(field_add:main.GuessLikeReply.guess_like)
  return guess_like_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::main::GuessLike >*
GuessLikeReply::mutable_guess_like() {
  // @@protoc_insertion_point(field_mutable_list:main.GuessLikeReply.guess_like)
  return &guess_like_;
}
inline const ::google::protobuf::RepeatedPtrField< ::main::GuessLike >&
GuessLikeReply::guess_like() const {
  // @@protoc_insertion_point(field_list:main.GuessLikeReply.guess_like)
  return guess_like_;
}

inline const GuessLikeReply* GuessLikeReply::internal_default_instance() {
  return &GuessLikeReply_default_instance_.get();
}
// -------------------------------------------------------------------

// GuessLike

// optional string like_cover = 1;
inline void GuessLike::clear_like_cover() {
  like_cover_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GuessLike::like_cover() const {
  // @@protoc_insertion_point(field_get:main.GuessLike.like_cover)
  return like_cover_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GuessLike::set_like_cover(const ::std::string& value) {
  
  like_cover_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:main.GuessLike.like_cover)
}
inline void GuessLike::set_like_cover(const char* value) {
  
  like_cover_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:main.GuessLike.like_cover)
}
inline void GuessLike::set_like_cover(const char* value, size_t size) {
  
  like_cover_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:main.GuessLike.like_cover)
}
inline ::std::string* GuessLike::mutable_like_cover() {
  
  // @@protoc_insertion_point(field_mutable:main.GuessLike.like_cover)
  return like_cover_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GuessLike::release_like_cover() {
  // @@protoc_insertion_point(field_release:main.GuessLike.like_cover)
  
  return like_cover_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GuessLike::set_allocated_like_cover(::std::string* like_cover) {
  if (like_cover != NULL) {
    
  } else {
    
  }
  like_cover_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), like_cover);
  // @@protoc_insertion_point(field_set_allocated:main.GuessLike.like_cover)
}

// optional string like_id = 2;
inline void GuessLike::clear_like_id() {
  like_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GuessLike::like_id() const {
  // @@protoc_insertion_point(field_get:main.GuessLike.like_id)
  return like_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GuessLike::set_like_id(const ::std::string& value) {
  
  like_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:main.GuessLike.like_id)
}
inline void GuessLike::set_like_id(const char* value) {
  
  like_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:main.GuessLike.like_id)
}
inline void GuessLike::set_like_id(const char* value, size_t size) {
  
  like_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:main.GuessLike.like_id)
}
inline ::std::string* GuessLike::mutable_like_id() {
  
  // @@protoc_insertion_point(field_mutable:main.GuessLike.like_id)
  return like_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GuessLike::release_like_id() {
  // @@protoc_insertion_point(field_release:main.GuessLike.like_id)
  
  return like_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GuessLike::set_allocated_like_id(::std::string* like_id) {
  if (like_id != NULL) {
    
  } else {
    
  }
  like_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), like_id);
  // @@protoc_insertion_point(field_set_allocated:main.GuessLike.like_id)
}

// optional string like_title = 3;
inline void GuessLike::clear_like_title() {
  like_title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GuessLike::like_title() const {
  // @@protoc_insertion_point(field_get:main.GuessLike.like_title)
  return like_title_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GuessLike::set_like_title(const ::std::string& value) {
  
  like_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:main.GuessLike.like_title)
}
inline void GuessLike::set_like_title(const char* value) {
  
  like_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:main.GuessLike.like_title)
}
inline void GuessLike::set_like_title(const char* value, size_t size) {
  
  like_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:main.GuessLike.like_title)
}
inline ::std::string* GuessLike::mutable_like_title() {
  
  // @@protoc_insertion_point(field_mutable:main.GuessLike.like_title)
  return like_title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GuessLike::release_like_title() {
  // @@protoc_insertion_point(field_release:main.GuessLike.like_title)
  
  return like_title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GuessLike::set_allocated_like_title(::std::string* like_title) {
  if (like_title != NULL) {
    
  } else {
    
  }
  like_title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), like_title);
  // @@protoc_insertion_point(field_set_allocated:main.GuessLike.like_title)
}

inline const GuessLike* GuessLike::internal_default_instance() {
  return &GuessLike_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace main

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_guess_5flike_2eproto__INCLUDED
