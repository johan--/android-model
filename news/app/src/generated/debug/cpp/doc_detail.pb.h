// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: doc_detail.proto

#ifndef PROTOBUF_doc_5fdetail_2eproto__INCLUDED
#define PROTOBUF_doc_5fdetail_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace main {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_doc_5fdetail_2eproto();
void protobuf_InitDefaults_doc_5fdetail_2eproto();
void protobuf_AssignDesc_doc_5fdetail_2eproto();
void protobuf_ShutdownFile_doc_5fdetail_2eproto();

class AboutResources;
class DocReply;
class DocRequest;

// ===================================================================

class DocRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:main.DocRequest) */ {
 public:
  DocRequest();
  virtual ~DocRequest();

  DocRequest(const DocRequest& from);

  inline DocRequest& operator=(const DocRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DocRequest& default_instance();

  static const DocRequest* internal_default_instance();

  void Swap(DocRequest* other);

  // implements Message ----------------------------------------------

  inline DocRequest* New() const { return New(NULL); }

  DocRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DocRequest& from);
  void MergeFrom(const DocRequest& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DocRequest* other);
  void UnsafeMergeFrom(const DocRequest& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string docuID = 1;
  void clear_docuid();
  static const int kDocuIDFieldNumber = 1;
  const ::std::string& docuid() const;
  void set_docuid(const ::std::string& value);
  void set_docuid(const char* value);
  void set_docuid(const char* value, size_t size);
  ::std::string* mutable_docuid();
  ::std::string* release_docuid();
  void set_allocated_docuid(::std::string* docuid);

  // @@protoc_insertion_point(class_scope:main.DocRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr docuid_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_doc_5fdetail_2eproto_impl();
  friend void  protobuf_AddDesc_doc_5fdetail_2eproto_impl();
  friend void protobuf_AssignDesc_doc_5fdetail_2eproto();
  friend void protobuf_ShutdownFile_doc_5fdetail_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<DocRequest> DocRequest_default_instance_;

// -------------------------------------------------------------------

class DocReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:main.DocReply) */ {
 public:
  DocReply();
  virtual ~DocReply();

  DocReply(const DocReply& from);

  inline DocReply& operator=(const DocReply& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DocReply& default_instance();

  static const DocReply* internal_default_instance();

  void Swap(DocReply* other);

  // implements Message ----------------------------------------------

  inline DocReply* New() const { return New(NULL); }

  DocReply* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DocReply& from);
  void MergeFrom(const DocReply& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DocReply* other);
  void UnsafeMergeFrom(const DocReply& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .main.AboutResources aboutResources = 1;
  int aboutresources_size() const;
  void clear_aboutresources();
  static const int kAboutResourcesFieldNumber = 1;
  const ::main::AboutResources& aboutresources(int index) const;
  ::main::AboutResources* mutable_aboutresources(int index);
  ::main::AboutResources* add_aboutresources();
  ::google::protobuf::RepeatedPtrField< ::main::AboutResources >*
      mutable_aboutresources();
  const ::google::protobuf::RepeatedPtrField< ::main::AboutResources >&
      aboutresources() const;

  // optional string docuAbstract = 2;
  void clear_docuabstract();
  static const int kDocuAbstractFieldNumber = 2;
  const ::std::string& docuabstract() const;
  void set_docuabstract(const ::std::string& value);
  void set_docuabstract(const char* value);
  void set_docuabstract(const char* value, size_t size);
  ::std::string* mutable_docuabstract();
  ::std::string* release_docuabstract();
  void set_allocated_docuabstract(::std::string* docuabstract);

  // optional string docuAuthor = 3;
  void clear_docuauthor();
  static const int kDocuAuthorFieldNumber = 3;
  const ::std::string& docuauthor() const;
  void set_docuauthor(const ::std::string& value);
  void set_docuauthor(const char* value);
  void set_docuauthor(const char* value, size_t size);
  ::std::string* mutable_docuauthor();
  ::std::string* release_docuauthor();
  void set_allocated_docuauthor(::std::string* docuauthor);

  // optional string docuAuthorCompany = 4;
  void clear_docuauthorcompany();
  static const int kDocuAuthorCompanyFieldNumber = 4;
  const ::std::string& docuauthorcompany() const;
  void set_docuauthorcompany(const ::std::string& value);
  void set_docuauthorcompany(const char* value);
  void set_docuauthorcompany(const char* value, size_t size);
  ::std::string* mutable_docuauthorcompany();
  ::std::string* release_docuauthorcompany();
  void set_allocated_docuauthorcompany(::std::string* docuauthorcompany);

  // optional string docuDate = 5;
  void clear_docudate();
  static const int kDocuDateFieldNumber = 5;
  const ::std::string& docudate() const;
  void set_docudate(const ::std::string& value);
  void set_docudate(const char* value);
  void set_docudate(const char* value, size_t size);
  ::std::string* mutable_docudate();
  ::std::string* release_docudate();
  void set_allocated_docudate(::std::string* docudate);

  // optional string docuDownloadCount = 6;
  void clear_docudownloadcount();
  static const int kDocuDownloadCountFieldNumber = 6;
  const ::std::string& docudownloadcount() const;
  void set_docudownloadcount(const ::std::string& value);
  void set_docudownloadcount(const char* value);
  void set_docudownloadcount(const char* value, size_t size);
  ::std::string* mutable_docudownloadcount();
  ::std::string* release_docudownloadcount();
  void set_allocated_docudownloadcount(::std::string* docudownloadcount);

  // optional string docuJournalName = 7;
  void clear_docujournalname();
  static const int kDocuJournalNameFieldNumber = 7;
  const ::std::string& docujournalname() const;
  void set_docujournalname(const ::std::string& value);
  void set_docujournalname(const char* value);
  void set_docujournalname(const char* value, size_t size);
  ::std::string* mutable_docujournalname();
  ::std::string* release_docujournalname();
  void set_allocated_docujournalname(::std::string* docujournalname);

  // optional string docuKeywords = 8;
  void clear_docukeywords();
  static const int kDocuKeywordsFieldNumber = 8;
  const ::std::string& docukeywords() const;
  void set_docukeywords(const ::std::string& value);
  void set_docukeywords(const char* value);
  void set_docukeywords(const char* value, size_t size);
  ::std::string* mutable_docukeywords();
  ::std::string* release_docukeywords();
  void set_allocated_docukeywords(::std::string* docukeywords);

  // optional string docuQuoteCount = 9;
  void clear_docuquotecount();
  static const int kDocuQuoteCountFieldNumber = 9;
  const ::std::string& docuquotecount() const;
  void set_docuquotecount(const ::std::string& value);
  void set_docuquotecount(const char* value);
  void set_docuquotecount(const char* value, size_t size);
  ::std::string* mutable_docuquotecount();
  ::std::string* release_docuquotecount();
  void set_allocated_docuquotecount(::std::string* docuquotecount);

  // optional string docuReadCount = 10;
  void clear_docureadcount();
  static const int kDocuReadCountFieldNumber = 10;
  const ::std::string& docureadcount() const;
  void set_docureadcount(const ::std::string& value);
  void set_docureadcount(const char* value);
  void set_docureadcount(const char* value, size_t size);
  ::std::string* mutable_docureadcount();
  ::std::string* release_docureadcount();
  void set_allocated_docureadcount(::std::string* docureadcount);

  // optional string docuThirdLinkCount = 11;
  void clear_docuthirdlinkcount();
  static const int kDocuThirdLinkCountFieldNumber = 11;
  const ::std::string& docuthirdlinkcount() const;
  void set_docuthirdlinkcount(const ::std::string& value);
  void set_docuthirdlinkcount(const char* value);
  void set_docuthirdlinkcount(const char* value, size_t size);
  ::std::string* mutable_docuthirdlinkcount();
  ::std::string* release_docuthirdlinkcount();
  void set_allocated_docuthirdlinkcount(::std::string* docuthirdlinkcount);

  // optional string docuTitle = 12;
  void clear_docutitle();
  static const int kDocuTitleFieldNumber = 12;
  const ::std::string& docutitle() const;
  void set_docutitle(const ::std::string& value);
  void set_docutitle(const char* value);
  void set_docutitle(const char* value, size_t size);
  ::std::string* mutable_docutitle();
  ::std::string* release_docutitle();
  void set_allocated_docutitle(::std::string* docutitle);

  // @@protoc_insertion_point(class_scope:main.DocReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::main::AboutResources > aboutresources_;
  ::google::protobuf::internal::ArenaStringPtr docuabstract_;
  ::google::protobuf::internal::ArenaStringPtr docuauthor_;
  ::google::protobuf::internal::ArenaStringPtr docuauthorcompany_;
  ::google::protobuf::internal::ArenaStringPtr docudate_;
  ::google::protobuf::internal::ArenaStringPtr docudownloadcount_;
  ::google::protobuf::internal::ArenaStringPtr docujournalname_;
  ::google::protobuf::internal::ArenaStringPtr docukeywords_;
  ::google::protobuf::internal::ArenaStringPtr docuquotecount_;
  ::google::protobuf::internal::ArenaStringPtr docureadcount_;
  ::google::protobuf::internal::ArenaStringPtr docuthirdlinkcount_;
  ::google::protobuf::internal::ArenaStringPtr docutitle_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_doc_5fdetail_2eproto_impl();
  friend void  protobuf_AddDesc_doc_5fdetail_2eproto_impl();
  friend void protobuf_AssignDesc_doc_5fdetail_2eproto();
  friend void protobuf_ShutdownFile_doc_5fdetail_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<DocReply> DocReply_default_instance_;

// -------------------------------------------------------------------

class AboutResources : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:main.AboutResources) */ {
 public:
  AboutResources();
  virtual ~AboutResources();

  AboutResources(const AboutResources& from);

  inline AboutResources& operator=(const AboutResources& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AboutResources& default_instance();

  static const AboutResources* internal_default_instance();

  void Swap(AboutResources* other);

  // implements Message ----------------------------------------------

  inline AboutResources* New() const { return New(NULL); }

  AboutResources* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AboutResources& from);
  void MergeFrom(const AboutResources& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AboutResources* other);
  void UnsafeMergeFrom(const AboutResources& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string docuID = 1;
  void clear_docuid();
  static const int kDocuIDFieldNumber = 1;
  const ::std::string& docuid() const;
  void set_docuid(const ::std::string& value);
  void set_docuid(const char* value);
  void set_docuid(const char* value, size_t size);
  ::std::string* mutable_docuid();
  ::std::string* release_docuid();
  void set_allocated_docuid(::std::string* docuid);

  // optional string docuTitle = 2;
  void clear_docutitle();
  static const int kDocuTitleFieldNumber = 2;
  const ::std::string& docutitle() const;
  void set_docutitle(const ::std::string& value);
  void set_docutitle(const char* value);
  void set_docutitle(const char* value, size_t size);
  ::std::string* mutable_docutitle();
  ::std::string* release_docutitle();
  void set_allocated_docutitle(::std::string* docutitle);

  // @@protoc_insertion_point(class_scope:main.AboutResources)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr docuid_;
  ::google::protobuf::internal::ArenaStringPtr docutitle_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_doc_5fdetail_2eproto_impl();
  friend void  protobuf_AddDesc_doc_5fdetail_2eproto_impl();
  friend void protobuf_AssignDesc_doc_5fdetail_2eproto();
  friend void protobuf_ShutdownFile_doc_5fdetail_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<AboutResources> AboutResources_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// DocRequest

// optional string docuID = 1;
inline void DocRequest::clear_docuid() {
  docuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DocRequest::docuid() const {
  // @@protoc_insertion_point(field_get:main.DocRequest.docuID)
  return docuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DocRequest::set_docuid(const ::std::string& value) {
  
  docuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:main.DocRequest.docuID)
}
inline void DocRequest::set_docuid(const char* value) {
  
  docuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:main.DocRequest.docuID)
}
inline void DocRequest::set_docuid(const char* value, size_t size) {
  
  docuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:main.DocRequest.docuID)
}
inline ::std::string* DocRequest::mutable_docuid() {
  
  // @@protoc_insertion_point(field_mutable:main.DocRequest.docuID)
  return docuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DocRequest::release_docuid() {
  // @@protoc_insertion_point(field_release:main.DocRequest.docuID)
  
  return docuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DocRequest::set_allocated_docuid(::std::string* docuid) {
  if (docuid != NULL) {
    
  } else {
    
  }
  docuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), docuid);
  // @@protoc_insertion_point(field_set_allocated:main.DocRequest.docuID)
}

inline const DocRequest* DocRequest::internal_default_instance() {
  return &DocRequest_default_instance_.get();
}
// -------------------------------------------------------------------

// DocReply

// repeated .main.AboutResources aboutResources = 1;
inline int DocReply::aboutresources_size() const {
  return aboutresources_.size();
}
inline void DocReply::clear_aboutresources() {
  aboutresources_.Clear();
}
inline const ::main::AboutResources& DocReply::aboutresources(int index) const {
  // @@protoc_insertion_point(field_get:main.DocReply.aboutResources)
  return aboutresources_.Get(index);
}
inline ::main::AboutResources* DocReply::mutable_aboutresources(int index) {
  // @@protoc_insertion_point(field_mutable:main.DocReply.aboutResources)
  return aboutresources_.Mutable(index);
}
inline ::main::AboutResources* DocReply::add_aboutresources() {
  // @@protoc_insertion_point(field_add:main.DocReply.aboutResources)
  return aboutresources_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::main::AboutResources >*
DocReply::mutable_aboutresources() {
  // @@protoc_insertion_point(field_mutable_list:main.DocReply.aboutResources)
  return &aboutresources_;
}
inline const ::google::protobuf::RepeatedPtrField< ::main::AboutResources >&
DocReply::aboutresources() const {
  // @@protoc_insertion_point(field_list:main.DocReply.aboutResources)
  return aboutresources_;
}

// optional string docuAbstract = 2;
inline void DocReply::clear_docuabstract() {
  docuabstract_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DocReply::docuabstract() const {
  // @@protoc_insertion_point(field_get:main.DocReply.docuAbstract)
  return docuabstract_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DocReply::set_docuabstract(const ::std::string& value) {
  
  docuabstract_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:main.DocReply.docuAbstract)
}
inline void DocReply::set_docuabstract(const char* value) {
  
  docuabstract_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:main.DocReply.docuAbstract)
}
inline void DocReply::set_docuabstract(const char* value, size_t size) {
  
  docuabstract_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:main.DocReply.docuAbstract)
}
inline ::std::string* DocReply::mutable_docuabstract() {
  
  // @@protoc_insertion_point(field_mutable:main.DocReply.docuAbstract)
  return docuabstract_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DocReply::release_docuabstract() {
  // @@protoc_insertion_point(field_release:main.DocReply.docuAbstract)
  
  return docuabstract_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DocReply::set_allocated_docuabstract(::std::string* docuabstract) {
  if (docuabstract != NULL) {
    
  } else {
    
  }
  docuabstract_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), docuabstract);
  // @@protoc_insertion_point(field_set_allocated:main.DocReply.docuAbstract)
}

// optional string docuAuthor = 3;
inline void DocReply::clear_docuauthor() {
  docuauthor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DocReply::docuauthor() const {
  // @@protoc_insertion_point(field_get:main.DocReply.docuAuthor)
  return docuauthor_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DocReply::set_docuauthor(const ::std::string& value) {
  
  docuauthor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:main.DocReply.docuAuthor)
}
inline void DocReply::set_docuauthor(const char* value) {
  
  docuauthor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:main.DocReply.docuAuthor)
}
inline void DocReply::set_docuauthor(const char* value, size_t size) {
  
  docuauthor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:main.DocReply.docuAuthor)
}
inline ::std::string* DocReply::mutable_docuauthor() {
  
  // @@protoc_insertion_point(field_mutable:main.DocReply.docuAuthor)
  return docuauthor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DocReply::release_docuauthor() {
  // @@protoc_insertion_point(field_release:main.DocReply.docuAuthor)
  
  return docuauthor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DocReply::set_allocated_docuauthor(::std::string* docuauthor) {
  if (docuauthor != NULL) {
    
  } else {
    
  }
  docuauthor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), docuauthor);
  // @@protoc_insertion_point(field_set_allocated:main.DocReply.docuAuthor)
}

// optional string docuAuthorCompany = 4;
inline void DocReply::clear_docuauthorcompany() {
  docuauthorcompany_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DocReply::docuauthorcompany() const {
  // @@protoc_insertion_point(field_get:main.DocReply.docuAuthorCompany)
  return docuauthorcompany_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DocReply::set_docuauthorcompany(const ::std::string& value) {
  
  docuauthorcompany_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:main.DocReply.docuAuthorCompany)
}
inline void DocReply::set_docuauthorcompany(const char* value) {
  
  docuauthorcompany_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:main.DocReply.docuAuthorCompany)
}
inline void DocReply::set_docuauthorcompany(const char* value, size_t size) {
  
  docuauthorcompany_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:main.DocReply.docuAuthorCompany)
}
inline ::std::string* DocReply::mutable_docuauthorcompany() {
  
  // @@protoc_insertion_point(field_mutable:main.DocReply.docuAuthorCompany)
  return docuauthorcompany_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DocReply::release_docuauthorcompany() {
  // @@protoc_insertion_point(field_release:main.DocReply.docuAuthorCompany)
  
  return docuauthorcompany_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DocReply::set_allocated_docuauthorcompany(::std::string* docuauthorcompany) {
  if (docuauthorcompany != NULL) {
    
  } else {
    
  }
  docuauthorcompany_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), docuauthorcompany);
  // @@protoc_insertion_point(field_set_allocated:main.DocReply.docuAuthorCompany)
}

// optional string docuDate = 5;
inline void DocReply::clear_docudate() {
  docudate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DocReply::docudate() const {
  // @@protoc_insertion_point(field_get:main.DocReply.docuDate)
  return docudate_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DocReply::set_docudate(const ::std::string& value) {
  
  docudate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:main.DocReply.docuDate)
}
inline void DocReply::set_docudate(const char* value) {
  
  docudate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:main.DocReply.docuDate)
}
inline void DocReply::set_docudate(const char* value, size_t size) {
  
  docudate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:main.DocReply.docuDate)
}
inline ::std::string* DocReply::mutable_docudate() {
  
  // @@protoc_insertion_point(field_mutable:main.DocReply.docuDate)
  return docudate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DocReply::release_docudate() {
  // @@protoc_insertion_point(field_release:main.DocReply.docuDate)
  
  return docudate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DocReply::set_allocated_docudate(::std::string* docudate) {
  if (docudate != NULL) {
    
  } else {
    
  }
  docudate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), docudate);
  // @@protoc_insertion_point(field_set_allocated:main.DocReply.docuDate)
}

// optional string docuDownloadCount = 6;
inline void DocReply::clear_docudownloadcount() {
  docudownloadcount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DocReply::docudownloadcount() const {
  // @@protoc_insertion_point(field_get:main.DocReply.docuDownloadCount)
  return docudownloadcount_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DocReply::set_docudownloadcount(const ::std::string& value) {
  
  docudownloadcount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:main.DocReply.docuDownloadCount)
}
inline void DocReply::set_docudownloadcount(const char* value) {
  
  docudownloadcount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:main.DocReply.docuDownloadCount)
}
inline void DocReply::set_docudownloadcount(const char* value, size_t size) {
  
  docudownloadcount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:main.DocReply.docuDownloadCount)
}
inline ::std::string* DocReply::mutable_docudownloadcount() {
  
  // @@protoc_insertion_point(field_mutable:main.DocReply.docuDownloadCount)
  return docudownloadcount_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DocReply::release_docudownloadcount() {
  // @@protoc_insertion_point(field_release:main.DocReply.docuDownloadCount)
  
  return docudownloadcount_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DocReply::set_allocated_docudownloadcount(::std::string* docudownloadcount) {
  if (docudownloadcount != NULL) {
    
  } else {
    
  }
  docudownloadcount_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), docudownloadcount);
  // @@protoc_insertion_point(field_set_allocated:main.DocReply.docuDownloadCount)
}

// optional string docuJournalName = 7;
inline void DocReply::clear_docujournalname() {
  docujournalname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DocReply::docujournalname() const {
  // @@protoc_insertion_point(field_get:main.DocReply.docuJournalName)
  return docujournalname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DocReply::set_docujournalname(const ::std::string& value) {
  
  docujournalname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:main.DocReply.docuJournalName)
}
inline void DocReply::set_docujournalname(const char* value) {
  
  docujournalname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:main.DocReply.docuJournalName)
}
inline void DocReply::set_docujournalname(const char* value, size_t size) {
  
  docujournalname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:main.DocReply.docuJournalName)
}
inline ::std::string* DocReply::mutable_docujournalname() {
  
  // @@protoc_insertion_point(field_mutable:main.DocReply.docuJournalName)
  return docujournalname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DocReply::release_docujournalname() {
  // @@protoc_insertion_point(field_release:main.DocReply.docuJournalName)
  
  return docujournalname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DocReply::set_allocated_docujournalname(::std::string* docujournalname) {
  if (docujournalname != NULL) {
    
  } else {
    
  }
  docujournalname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), docujournalname);
  // @@protoc_insertion_point(field_set_allocated:main.DocReply.docuJournalName)
}

// optional string docuKeywords = 8;
inline void DocReply::clear_docukeywords() {
  docukeywords_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DocReply::docukeywords() const {
  // @@protoc_insertion_point(field_get:main.DocReply.docuKeywords)
  return docukeywords_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DocReply::set_docukeywords(const ::std::string& value) {
  
  docukeywords_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:main.DocReply.docuKeywords)
}
inline void DocReply::set_docukeywords(const char* value) {
  
  docukeywords_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:main.DocReply.docuKeywords)
}
inline void DocReply::set_docukeywords(const char* value, size_t size) {
  
  docukeywords_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:main.DocReply.docuKeywords)
}
inline ::std::string* DocReply::mutable_docukeywords() {
  
  // @@protoc_insertion_point(field_mutable:main.DocReply.docuKeywords)
  return docukeywords_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DocReply::release_docukeywords() {
  // @@protoc_insertion_point(field_release:main.DocReply.docuKeywords)
  
  return docukeywords_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DocReply::set_allocated_docukeywords(::std::string* docukeywords) {
  if (docukeywords != NULL) {
    
  } else {
    
  }
  docukeywords_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), docukeywords);
  // @@protoc_insertion_point(field_set_allocated:main.DocReply.docuKeywords)
}

// optional string docuQuoteCount = 9;
inline void DocReply::clear_docuquotecount() {
  docuquotecount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DocReply::docuquotecount() const {
  // @@protoc_insertion_point(field_get:main.DocReply.docuQuoteCount)
  return docuquotecount_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DocReply::set_docuquotecount(const ::std::string& value) {
  
  docuquotecount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:main.DocReply.docuQuoteCount)
}
inline void DocReply::set_docuquotecount(const char* value) {
  
  docuquotecount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:main.DocReply.docuQuoteCount)
}
inline void DocReply::set_docuquotecount(const char* value, size_t size) {
  
  docuquotecount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:main.DocReply.docuQuoteCount)
}
inline ::std::string* DocReply::mutable_docuquotecount() {
  
  // @@protoc_insertion_point(field_mutable:main.DocReply.docuQuoteCount)
  return docuquotecount_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DocReply::release_docuquotecount() {
  // @@protoc_insertion_point(field_release:main.DocReply.docuQuoteCount)
  
  return docuquotecount_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DocReply::set_allocated_docuquotecount(::std::string* docuquotecount) {
  if (docuquotecount != NULL) {
    
  } else {
    
  }
  docuquotecount_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), docuquotecount);
  // @@protoc_insertion_point(field_set_allocated:main.DocReply.docuQuoteCount)
}

// optional string docuReadCount = 10;
inline void DocReply::clear_docureadcount() {
  docureadcount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DocReply::docureadcount() const {
  // @@protoc_insertion_point(field_get:main.DocReply.docuReadCount)
  return docureadcount_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DocReply::set_docureadcount(const ::std::string& value) {
  
  docureadcount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:main.DocReply.docuReadCount)
}
inline void DocReply::set_docureadcount(const char* value) {
  
  docureadcount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:main.DocReply.docuReadCount)
}
inline void DocReply::set_docureadcount(const char* value, size_t size) {
  
  docureadcount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:main.DocReply.docuReadCount)
}
inline ::std::string* DocReply::mutable_docureadcount() {
  
  // @@protoc_insertion_point(field_mutable:main.DocReply.docuReadCount)
  return docureadcount_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DocReply::release_docureadcount() {
  // @@protoc_insertion_point(field_release:main.DocReply.docuReadCount)
  
  return docureadcount_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DocReply::set_allocated_docureadcount(::std::string* docureadcount) {
  if (docureadcount != NULL) {
    
  } else {
    
  }
  docureadcount_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), docureadcount);
  // @@protoc_insertion_point(field_set_allocated:main.DocReply.docuReadCount)
}

// optional string docuThirdLinkCount = 11;
inline void DocReply::clear_docuthirdlinkcount() {
  docuthirdlinkcount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DocReply::docuthirdlinkcount() const {
  // @@protoc_insertion_point(field_get:main.DocReply.docuThirdLinkCount)
  return docuthirdlinkcount_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DocReply::set_docuthirdlinkcount(const ::std::string& value) {
  
  docuthirdlinkcount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:main.DocReply.docuThirdLinkCount)
}
inline void DocReply::set_docuthirdlinkcount(const char* value) {
  
  docuthirdlinkcount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:main.DocReply.docuThirdLinkCount)
}
inline void DocReply::set_docuthirdlinkcount(const char* value, size_t size) {
  
  docuthirdlinkcount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:main.DocReply.docuThirdLinkCount)
}
inline ::std::string* DocReply::mutable_docuthirdlinkcount() {
  
  // @@protoc_insertion_point(field_mutable:main.DocReply.docuThirdLinkCount)
  return docuthirdlinkcount_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DocReply::release_docuthirdlinkcount() {
  // @@protoc_insertion_point(field_release:main.DocReply.docuThirdLinkCount)
  
  return docuthirdlinkcount_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DocReply::set_allocated_docuthirdlinkcount(::std::string* docuthirdlinkcount) {
  if (docuthirdlinkcount != NULL) {
    
  } else {
    
  }
  docuthirdlinkcount_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), docuthirdlinkcount);
  // @@protoc_insertion_point(field_set_allocated:main.DocReply.docuThirdLinkCount)
}

// optional string docuTitle = 12;
inline void DocReply::clear_docutitle() {
  docutitle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DocReply::docutitle() const {
  // @@protoc_insertion_point(field_get:main.DocReply.docuTitle)
  return docutitle_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DocReply::set_docutitle(const ::std::string& value) {
  
  docutitle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:main.DocReply.docuTitle)
}
inline void DocReply::set_docutitle(const char* value) {
  
  docutitle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:main.DocReply.docuTitle)
}
inline void DocReply::set_docutitle(const char* value, size_t size) {
  
  docutitle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:main.DocReply.docuTitle)
}
inline ::std::string* DocReply::mutable_docutitle() {
  
  // @@protoc_insertion_point(field_mutable:main.DocReply.docuTitle)
  return docutitle_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DocReply::release_docutitle() {
  // @@protoc_insertion_point(field_release:main.DocReply.docuTitle)
  
  return docutitle_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DocReply::set_allocated_docutitle(::std::string* docutitle) {
  if (docutitle != NULL) {
    
  } else {
    
  }
  docutitle_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), docutitle);
  // @@protoc_insertion_point(field_set_allocated:main.DocReply.docuTitle)
}

inline const DocReply* DocReply::internal_default_instance() {
  return &DocReply_default_instance_.get();
}
// -------------------------------------------------------------------

// AboutResources

// optional string docuID = 1;
inline void AboutResources::clear_docuid() {
  docuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AboutResources::docuid() const {
  // @@protoc_insertion_point(field_get:main.AboutResources.docuID)
  return docuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AboutResources::set_docuid(const ::std::string& value) {
  
  docuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:main.AboutResources.docuID)
}
inline void AboutResources::set_docuid(const char* value) {
  
  docuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:main.AboutResources.docuID)
}
inline void AboutResources::set_docuid(const char* value, size_t size) {
  
  docuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:main.AboutResources.docuID)
}
inline ::std::string* AboutResources::mutable_docuid() {
  
  // @@protoc_insertion_point(field_mutable:main.AboutResources.docuID)
  return docuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AboutResources::release_docuid() {
  // @@protoc_insertion_point(field_release:main.AboutResources.docuID)
  
  return docuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AboutResources::set_allocated_docuid(::std::string* docuid) {
  if (docuid != NULL) {
    
  } else {
    
  }
  docuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), docuid);
  // @@protoc_insertion_point(field_set_allocated:main.AboutResources.docuID)
}

// optional string docuTitle = 2;
inline void AboutResources::clear_docutitle() {
  docutitle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AboutResources::docutitle() const {
  // @@protoc_insertion_point(field_get:main.AboutResources.docuTitle)
  return docutitle_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AboutResources::set_docutitle(const ::std::string& value) {
  
  docutitle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:main.AboutResources.docuTitle)
}
inline void AboutResources::set_docutitle(const char* value) {
  
  docutitle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:main.AboutResources.docuTitle)
}
inline void AboutResources::set_docutitle(const char* value, size_t size) {
  
  docutitle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:main.AboutResources.docuTitle)
}
inline ::std::string* AboutResources::mutable_docutitle() {
  
  // @@protoc_insertion_point(field_mutable:main.AboutResources.docuTitle)
  return docutitle_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AboutResources::release_docutitle() {
  // @@protoc_insertion_point(field_release:main.AboutResources.docuTitle)
  
  return docutitle_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AboutResources::set_allocated_docutitle(::std::string* docutitle) {
  if (docutitle != NULL) {
    
  } else {
    
  }
  docutitle_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), docutitle);
  // @@protoc_insertion_point(field_set_allocated:main.AboutResources.docuTitle)
}

inline const AboutResources* AboutResources::internal_default_instance() {
  return &AboutResources_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace main

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_doc_5fdetail_2eproto__INCLUDED
