// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bind/msg_wfcard_bind.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "bind/msg_wfcard_bind.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace bind {

namespace {

const ::google::protobuf::Descriptor* WFCardBindRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WFCardBindRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* WFCardBindResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WFCardBindResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* WFCardBlanceRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WFCardBlanceRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* WfCardBlanceResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WfCardBlanceResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_bind_2fmsg_5fwfcard_5fbind_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_bind_2fmsg_5fwfcard_5fbind_2eproto() {
  protobuf_AddDesc_bind_2fmsg_5fwfcard_5fbind_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "bind/msg_wfcard_bind.proto");
  GOOGLE_CHECK(file != NULL);
  WFCardBindRequest_descriptor_ = file->message_type(0);
  static const int WFCardBindRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WFCardBindRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WFCardBindRequest, login_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WFCardBindRequest, card_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WFCardBindRequest, card_pwd_),
  };
  WFCardBindRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WFCardBindRequest_descriptor_,
      WFCardBindRequest::internal_default_instance(),
      WFCardBindRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(WFCardBindRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WFCardBindRequest, _internal_metadata_));
  WFCardBindResponse_descriptor_ = file->message_type(1);
  static const int WFCardBindResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WFCardBindResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WFCardBindResponse, error_),
  };
  WFCardBindResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WFCardBindResponse_descriptor_,
      WFCardBindResponse::internal_default_instance(),
      WFCardBindResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(WFCardBindResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WFCardBindResponse, _internal_metadata_));
  WFCardBlanceRequest_descriptor_ = file->message_type(2);
  static const int WFCardBlanceRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WFCardBlanceRequest, user_id_),
  };
  WFCardBlanceRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WFCardBlanceRequest_descriptor_,
      WFCardBlanceRequest::internal_default_instance(),
      WFCardBlanceRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(WFCardBlanceRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WFCardBlanceRequest, _internal_metadata_));
  WfCardBlanceResponse_descriptor_ = file->message_type(3);
  static const int WfCardBlanceResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WfCardBlanceResponse, blance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WfCardBlanceResponse, error_),
  };
  WfCardBlanceResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WfCardBlanceResponse_descriptor_,
      WfCardBlanceResponse::internal_default_instance(),
      WfCardBlanceResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(WfCardBlanceResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WfCardBlanceResponse, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_bind_2fmsg_5fwfcard_5fbind_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WFCardBindRequest_descriptor_, WFCardBindRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WFCardBindResponse_descriptor_, WFCardBindResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WFCardBlanceRequest_descriptor_, WFCardBlanceRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WfCardBlanceResponse_descriptor_, WfCardBlanceResponse::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_bind_2fmsg_5fwfcard_5fbind_2eproto() {
  WFCardBindRequest_default_instance_.Shutdown();
  delete WFCardBindRequest_reflection_;
  WFCardBindResponse_default_instance_.Shutdown();
  delete WFCardBindResponse_reflection_;
  WFCardBlanceRequest_default_instance_.Shutdown();
  delete WFCardBlanceRequest_reflection_;
  WfCardBlanceResponse_default_instance_.Shutdown();
  delete WfCardBlanceResponse_reflection_;
}

void protobuf_InitDefaults_bind_2fmsg_5fwfcard_5fbind_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::grpcCommon::protobuf_InitDefaults_grpcCommon_2fmsg_5ferror_2eproto();
  ::google::protobuf::internal::GetEmptyString();
  WFCardBindRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  WFCardBindResponse_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  WFCardBlanceRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  WfCardBlanceResponse_default_instance_.DefaultConstruct();
  WFCardBindRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  WFCardBindResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  WFCardBlanceRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  WfCardBlanceResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_bind_2fmsg_5fwfcard_5fbind_2eproto_once_);
void protobuf_InitDefaults_bind_2fmsg_5fwfcard_5fbind_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_bind_2fmsg_5fwfcard_5fbind_2eproto_once_,
                 &protobuf_InitDefaults_bind_2fmsg_5fwfcard_5fbind_2eproto_impl);
}
void protobuf_AddDesc_bind_2fmsg_5fwfcard_5fbind_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_bind_2fmsg_5fwfcard_5fbind_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032bind/msg_wfcard_bind.proto\022\004bind\032\032grpc"
    "Common/msg_error.proto\"]\n\021WFCardBindRequ"
    "est\022\017\n\007user_id\030\001 \001(\t\022\023\n\013login_token\030\002 \001("
    "\t\022\020\n\010card_num\030\003 \001(\t\022\020\n\010card_pwd\030\004 \001(\t\"J\n"
    "\022WFCardBindResponse\022\016\n\006status\030\001 \001(\t\022$\n\005e"
    "rror\030\002 \001(\0132\025.grpcCommon.GrpcError\"&\n\023WFC"
    "ardBlanceRequest\022\017\n\007user_id\030\001 \001(\t\"L\n\024WfC"
    "ardBlanceResponse\022\016\n\006blance\030\001 \001(\t\022$\n\005err"
    "or\030\002 \001(\0132\025.grpcCommon.GrpcErrorB\033\n\020com.w"
    "anfang.bindP\001\242\002\004WFPRb\006proto3", 388);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "bind/msg_wfcard_bind.proto", &protobuf_RegisterTypes);
  ::grpcCommon::protobuf_AddDesc_grpcCommon_2fmsg_5ferror_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_bind_2fmsg_5fwfcard_5fbind_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_bind_2fmsg_5fwfcard_5fbind_2eproto_once_);
void protobuf_AddDesc_bind_2fmsg_5fwfcard_5fbind_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_bind_2fmsg_5fwfcard_5fbind_2eproto_once_,
                 &protobuf_AddDesc_bind_2fmsg_5fwfcard_5fbind_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_bind_2fmsg_5fwfcard_5fbind_2eproto {
  StaticDescriptorInitializer_bind_2fmsg_5fwfcard_5fbind_2eproto() {
    protobuf_AddDesc_bind_2fmsg_5fwfcard_5fbind_2eproto();
  }
} static_descriptor_initializer_bind_2fmsg_5fwfcard_5fbind_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WFCardBindRequest::kUserIdFieldNumber;
const int WFCardBindRequest::kLoginTokenFieldNumber;
const int WFCardBindRequest::kCardNumFieldNumber;
const int WFCardBindRequest::kCardPwdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WFCardBindRequest::WFCardBindRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_bind_2fmsg_5fwfcard_5fbind_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:bind.WFCardBindRequest)
}

void WFCardBindRequest::InitAsDefaultInstance() {
}

WFCardBindRequest::WFCardBindRequest(const WFCardBindRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bind.WFCardBindRequest)
}

void WFCardBindRequest::SharedCtor() {
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  login_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  card_num_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  card_pwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

WFCardBindRequest::~WFCardBindRequest() {
  // @@protoc_insertion_point(destructor:bind.WFCardBindRequest)
  SharedDtor();
}

void WFCardBindRequest::SharedDtor() {
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  login_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  card_num_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  card_pwd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void WFCardBindRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WFCardBindRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WFCardBindRequest_descriptor_;
}

const WFCardBindRequest& WFCardBindRequest::default_instance() {
  protobuf_InitDefaults_bind_2fmsg_5fwfcard_5fbind_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<WFCardBindRequest> WFCardBindRequest_default_instance_;

WFCardBindRequest* WFCardBindRequest::New(::google::protobuf::Arena* arena) const {
  WFCardBindRequest* n = new WFCardBindRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WFCardBindRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bind.WFCardBindRequest)
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  login_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  card_num_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  card_pwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool WFCardBindRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bind.WFCardBindRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string user_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bind.WFCardBindRequest.user_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_login_token;
        break;
      }

      // optional string login_token = 2;
      case 2: {
        if (tag == 18) {
         parse_login_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_login_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->login_token().data(), this->login_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bind.WFCardBindRequest.login_token"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_card_num;
        break;
      }

      // optional string card_num = 3;
      case 3: {
        if (tag == 26) {
         parse_card_num:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_card_num()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->card_num().data(), this->card_num().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bind.WFCardBindRequest.card_num"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_card_pwd;
        break;
      }

      // optional string card_pwd = 4;
      case 4: {
        if (tag == 34) {
         parse_card_pwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_card_pwd()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->card_pwd().data(), this->card_pwd().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bind.WFCardBindRequest.card_pwd"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bind.WFCardBindRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bind.WFCardBindRequest)
  return false;
#undef DO_
}

void WFCardBindRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bind.WFCardBindRequest)
  // optional string user_id = 1;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bind.WFCardBindRequest.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user_id(), output);
  }

  // optional string login_token = 2;
  if (this->login_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->login_token().data(), this->login_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bind.WFCardBindRequest.login_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->login_token(), output);
  }

  // optional string card_num = 3;
  if (this->card_num().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->card_num().data(), this->card_num().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bind.WFCardBindRequest.card_num");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->card_num(), output);
  }

  // optional string card_pwd = 4;
  if (this->card_pwd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->card_pwd().data(), this->card_pwd().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bind.WFCardBindRequest.card_pwd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->card_pwd(), output);
  }

  // @@protoc_insertion_point(serialize_end:bind.WFCardBindRequest)
}

::google::protobuf::uint8* WFCardBindRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:bind.WFCardBindRequest)
  // optional string user_id = 1;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bind.WFCardBindRequest.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_id(), target);
  }

  // optional string login_token = 2;
  if (this->login_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->login_token().data(), this->login_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bind.WFCardBindRequest.login_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->login_token(), target);
  }

  // optional string card_num = 3;
  if (this->card_num().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->card_num().data(), this->card_num().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bind.WFCardBindRequest.card_num");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->card_num(), target);
  }

  // optional string card_pwd = 4;
  if (this->card_pwd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->card_pwd().data(), this->card_pwd().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bind.WFCardBindRequest.card_pwd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->card_pwd(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:bind.WFCardBindRequest)
  return target;
}

size_t WFCardBindRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bind.WFCardBindRequest)
  size_t total_size = 0;

  // optional string user_id = 1;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  // optional string login_token = 2;
  if (this->login_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->login_token());
  }

  // optional string card_num = 3;
  if (this->card_num().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->card_num());
  }

  // optional string card_pwd = 4;
  if (this->card_pwd().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->card_pwd());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WFCardBindRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bind.WFCardBindRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const WFCardBindRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WFCardBindRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bind.WFCardBindRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bind.WFCardBindRequest)
    UnsafeMergeFrom(*source);
  }
}

void WFCardBindRequest::MergeFrom(const WFCardBindRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bind.WFCardBindRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void WFCardBindRequest::UnsafeMergeFrom(const WFCardBindRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.user_id().size() > 0) {

    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  if (from.login_token().size() > 0) {

    login_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.login_token_);
  }
  if (from.card_num().size() > 0) {

    card_num_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.card_num_);
  }
  if (from.card_pwd().size() > 0) {

    card_pwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.card_pwd_);
  }
}

void WFCardBindRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bind.WFCardBindRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WFCardBindRequest::CopyFrom(const WFCardBindRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bind.WFCardBindRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool WFCardBindRequest::IsInitialized() const {

  return true;
}

void WFCardBindRequest::Swap(WFCardBindRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WFCardBindRequest::InternalSwap(WFCardBindRequest* other) {
  user_id_.Swap(&other->user_id_);
  login_token_.Swap(&other->login_token_);
  card_num_.Swap(&other->card_num_);
  card_pwd_.Swap(&other->card_pwd_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WFCardBindRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WFCardBindRequest_descriptor_;
  metadata.reflection = WFCardBindRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WFCardBindRequest

// optional string user_id = 1;
void WFCardBindRequest::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& WFCardBindRequest::user_id() const {
  // @@protoc_insertion_point(field_get:bind.WFCardBindRequest.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WFCardBindRequest::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bind.WFCardBindRequest.user_id)
}
void WFCardBindRequest::set_user_id(const char* value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bind.WFCardBindRequest.user_id)
}
void WFCardBindRequest::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bind.WFCardBindRequest.user_id)
}
::std::string* WFCardBindRequest::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:bind.WFCardBindRequest.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* WFCardBindRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:bind.WFCardBindRequest.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WFCardBindRequest::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:bind.WFCardBindRequest.user_id)
}

// optional string login_token = 2;
void WFCardBindRequest::clear_login_token() {
  login_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& WFCardBindRequest::login_token() const {
  // @@protoc_insertion_point(field_get:bind.WFCardBindRequest.login_token)
  return login_token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WFCardBindRequest::set_login_token(const ::std::string& value) {
  
  login_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bind.WFCardBindRequest.login_token)
}
void WFCardBindRequest::set_login_token(const char* value) {
  
  login_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bind.WFCardBindRequest.login_token)
}
void WFCardBindRequest::set_login_token(const char* value, size_t size) {
  
  login_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bind.WFCardBindRequest.login_token)
}
::std::string* WFCardBindRequest::mutable_login_token() {
  
  // @@protoc_insertion_point(field_mutable:bind.WFCardBindRequest.login_token)
  return login_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* WFCardBindRequest::release_login_token() {
  // @@protoc_insertion_point(field_release:bind.WFCardBindRequest.login_token)
  
  return login_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WFCardBindRequest::set_allocated_login_token(::std::string* login_token) {
  if (login_token != NULL) {
    
  } else {
    
  }
  login_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), login_token);
  // @@protoc_insertion_point(field_set_allocated:bind.WFCardBindRequest.login_token)
}

// optional string card_num = 3;
void WFCardBindRequest::clear_card_num() {
  card_num_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& WFCardBindRequest::card_num() const {
  // @@protoc_insertion_point(field_get:bind.WFCardBindRequest.card_num)
  return card_num_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WFCardBindRequest::set_card_num(const ::std::string& value) {
  
  card_num_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bind.WFCardBindRequest.card_num)
}
void WFCardBindRequest::set_card_num(const char* value) {
  
  card_num_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bind.WFCardBindRequest.card_num)
}
void WFCardBindRequest::set_card_num(const char* value, size_t size) {
  
  card_num_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bind.WFCardBindRequest.card_num)
}
::std::string* WFCardBindRequest::mutable_card_num() {
  
  // @@protoc_insertion_point(field_mutable:bind.WFCardBindRequest.card_num)
  return card_num_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* WFCardBindRequest::release_card_num() {
  // @@protoc_insertion_point(field_release:bind.WFCardBindRequest.card_num)
  
  return card_num_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WFCardBindRequest::set_allocated_card_num(::std::string* card_num) {
  if (card_num != NULL) {
    
  } else {
    
  }
  card_num_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), card_num);
  // @@protoc_insertion_point(field_set_allocated:bind.WFCardBindRequest.card_num)
}

// optional string card_pwd = 4;
void WFCardBindRequest::clear_card_pwd() {
  card_pwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& WFCardBindRequest::card_pwd() const {
  // @@protoc_insertion_point(field_get:bind.WFCardBindRequest.card_pwd)
  return card_pwd_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WFCardBindRequest::set_card_pwd(const ::std::string& value) {
  
  card_pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bind.WFCardBindRequest.card_pwd)
}
void WFCardBindRequest::set_card_pwd(const char* value) {
  
  card_pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bind.WFCardBindRequest.card_pwd)
}
void WFCardBindRequest::set_card_pwd(const char* value, size_t size) {
  
  card_pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bind.WFCardBindRequest.card_pwd)
}
::std::string* WFCardBindRequest::mutable_card_pwd() {
  
  // @@protoc_insertion_point(field_mutable:bind.WFCardBindRequest.card_pwd)
  return card_pwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* WFCardBindRequest::release_card_pwd() {
  // @@protoc_insertion_point(field_release:bind.WFCardBindRequest.card_pwd)
  
  return card_pwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WFCardBindRequest::set_allocated_card_pwd(::std::string* card_pwd) {
  if (card_pwd != NULL) {
    
  } else {
    
  }
  card_pwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), card_pwd);
  // @@protoc_insertion_point(field_set_allocated:bind.WFCardBindRequest.card_pwd)
}

inline const WFCardBindRequest* WFCardBindRequest::internal_default_instance() {
  return &WFCardBindRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WFCardBindResponse::kStatusFieldNumber;
const int WFCardBindResponse::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WFCardBindResponse::WFCardBindResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_bind_2fmsg_5fwfcard_5fbind_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:bind.WFCardBindResponse)
}

void WFCardBindResponse::InitAsDefaultInstance() {
  error_ = const_cast< ::grpcCommon::GrpcError*>(
      ::grpcCommon::GrpcError::internal_default_instance());
}

WFCardBindResponse::WFCardBindResponse(const WFCardBindResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bind.WFCardBindResponse)
}

void WFCardBindResponse::SharedCtor() {
  status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_ = NULL;
  _cached_size_ = 0;
}

WFCardBindResponse::~WFCardBindResponse() {
  // @@protoc_insertion_point(destructor:bind.WFCardBindResponse)
  SharedDtor();
}

void WFCardBindResponse::SharedDtor() {
  status_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &WFCardBindResponse_default_instance_.get()) {
    delete error_;
  }
}

void WFCardBindResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WFCardBindResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WFCardBindResponse_descriptor_;
}

const WFCardBindResponse& WFCardBindResponse::default_instance() {
  protobuf_InitDefaults_bind_2fmsg_5fwfcard_5fbind_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<WFCardBindResponse> WFCardBindResponse_default_instance_;

WFCardBindResponse* WFCardBindResponse::New(::google::protobuf::Arena* arena) const {
  WFCardBindResponse* n = new WFCardBindResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WFCardBindResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bind.WFCardBindResponse)
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && error_ != NULL) delete error_;
  error_ = NULL;
}

bool WFCardBindResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bind.WFCardBindResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string status = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->status().data(), this->status().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bind.WFCardBindResponse.status"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional .grpcCommon.GrpcError error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bind.WFCardBindResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bind.WFCardBindResponse)
  return false;
#undef DO_
}

void WFCardBindResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bind.WFCardBindResponse)
  // optional string status = 1;
  if (this->status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bind.WFCardBindResponse.status");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->status(), output);
  }

  // optional .grpcCommon.GrpcError error = 2;
  if (this->has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->error_, output);
  }

  // @@protoc_insertion_point(serialize_end:bind.WFCardBindResponse)
}

::google::protobuf::uint8* WFCardBindResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:bind.WFCardBindResponse)
  // optional string status = 1;
  if (this->status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bind.WFCardBindResponse.status");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->status(), target);
  }

  // optional .grpcCommon.GrpcError error = 2;
  if (this->has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->error_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:bind.WFCardBindResponse)
  return target;
}

size_t WFCardBindResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bind.WFCardBindResponse)
  size_t total_size = 0;

  // optional string status = 1;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->status());
  }

  // optional .grpcCommon.GrpcError error = 2;
  if (this->has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->error_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WFCardBindResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bind.WFCardBindResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const WFCardBindResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WFCardBindResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bind.WFCardBindResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bind.WFCardBindResponse)
    UnsafeMergeFrom(*source);
  }
}

void WFCardBindResponse::MergeFrom(const WFCardBindResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bind.WFCardBindResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void WFCardBindResponse::UnsafeMergeFrom(const WFCardBindResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.status().size() > 0) {

    status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  if (from.has_error()) {
    mutable_error()->::grpcCommon::GrpcError::MergeFrom(from.error());
  }
}

void WFCardBindResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bind.WFCardBindResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WFCardBindResponse::CopyFrom(const WFCardBindResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bind.WFCardBindResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool WFCardBindResponse::IsInitialized() const {

  return true;
}

void WFCardBindResponse::Swap(WFCardBindResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WFCardBindResponse::InternalSwap(WFCardBindResponse* other) {
  status_.Swap(&other->status_);
  std::swap(error_, other->error_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WFCardBindResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WFCardBindResponse_descriptor_;
  metadata.reflection = WFCardBindResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WFCardBindResponse

// optional string status = 1;
void WFCardBindResponse::clear_status() {
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& WFCardBindResponse::status() const {
  // @@protoc_insertion_point(field_get:bind.WFCardBindResponse.status)
  return status_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WFCardBindResponse::set_status(const ::std::string& value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bind.WFCardBindResponse.status)
}
void WFCardBindResponse::set_status(const char* value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bind.WFCardBindResponse.status)
}
void WFCardBindResponse::set_status(const char* value, size_t size) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bind.WFCardBindResponse.status)
}
::std::string* WFCardBindResponse::mutable_status() {
  
  // @@protoc_insertion_point(field_mutable:bind.WFCardBindResponse.status)
  return status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* WFCardBindResponse::release_status() {
  // @@protoc_insertion_point(field_release:bind.WFCardBindResponse.status)
  
  return status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WFCardBindResponse::set_allocated_status(::std::string* status) {
  if (status != NULL) {
    
  } else {
    
  }
  status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:bind.WFCardBindResponse.status)
}

// optional .grpcCommon.GrpcError error = 2;
bool WFCardBindResponse::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
void WFCardBindResponse::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) delete error_;
  error_ = NULL;
}
const ::grpcCommon::GrpcError& WFCardBindResponse::error() const {
  // @@protoc_insertion_point(field_get:bind.WFCardBindResponse.error)
  return error_ != NULL ? *error_
                         : *::grpcCommon::GrpcError::internal_default_instance();
}
::grpcCommon::GrpcError* WFCardBindResponse::mutable_error() {
  
  if (error_ == NULL) {
    error_ = new ::grpcCommon::GrpcError;
  }
  // @@protoc_insertion_point(field_mutable:bind.WFCardBindResponse.error)
  return error_;
}
::grpcCommon::GrpcError* WFCardBindResponse::release_error() {
  // @@protoc_insertion_point(field_release:bind.WFCardBindResponse.error)
  
  ::grpcCommon::GrpcError* temp = error_;
  error_ = NULL;
  return temp;
}
void WFCardBindResponse::set_allocated_error(::grpcCommon::GrpcError* error) {
  delete error_;
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:bind.WFCardBindResponse.error)
}

inline const WFCardBindResponse* WFCardBindResponse::internal_default_instance() {
  return &WFCardBindResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WFCardBlanceRequest::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WFCardBlanceRequest::WFCardBlanceRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_bind_2fmsg_5fwfcard_5fbind_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:bind.WFCardBlanceRequest)
}

void WFCardBlanceRequest::InitAsDefaultInstance() {
}

WFCardBlanceRequest::WFCardBlanceRequest(const WFCardBlanceRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bind.WFCardBlanceRequest)
}

void WFCardBlanceRequest::SharedCtor() {
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

WFCardBlanceRequest::~WFCardBlanceRequest() {
  // @@protoc_insertion_point(destructor:bind.WFCardBlanceRequest)
  SharedDtor();
}

void WFCardBlanceRequest::SharedDtor() {
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void WFCardBlanceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WFCardBlanceRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WFCardBlanceRequest_descriptor_;
}

const WFCardBlanceRequest& WFCardBlanceRequest::default_instance() {
  protobuf_InitDefaults_bind_2fmsg_5fwfcard_5fbind_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<WFCardBlanceRequest> WFCardBlanceRequest_default_instance_;

WFCardBlanceRequest* WFCardBlanceRequest::New(::google::protobuf::Arena* arena) const {
  WFCardBlanceRequest* n = new WFCardBlanceRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WFCardBlanceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bind.WFCardBlanceRequest)
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool WFCardBlanceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bind.WFCardBlanceRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string user_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bind.WFCardBlanceRequest.user_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bind.WFCardBlanceRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bind.WFCardBlanceRequest)
  return false;
#undef DO_
}

void WFCardBlanceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bind.WFCardBlanceRequest)
  // optional string user_id = 1;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bind.WFCardBlanceRequest.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:bind.WFCardBlanceRequest)
}

::google::protobuf::uint8* WFCardBlanceRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:bind.WFCardBlanceRequest)
  // optional string user_id = 1;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bind.WFCardBlanceRequest.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:bind.WFCardBlanceRequest)
  return target;
}

size_t WFCardBlanceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bind.WFCardBlanceRequest)
  size_t total_size = 0;

  // optional string user_id = 1;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WFCardBlanceRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bind.WFCardBlanceRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const WFCardBlanceRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WFCardBlanceRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bind.WFCardBlanceRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bind.WFCardBlanceRequest)
    UnsafeMergeFrom(*source);
  }
}

void WFCardBlanceRequest::MergeFrom(const WFCardBlanceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bind.WFCardBlanceRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void WFCardBlanceRequest::UnsafeMergeFrom(const WFCardBlanceRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.user_id().size() > 0) {

    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
}

void WFCardBlanceRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bind.WFCardBlanceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WFCardBlanceRequest::CopyFrom(const WFCardBlanceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bind.WFCardBlanceRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool WFCardBlanceRequest::IsInitialized() const {

  return true;
}

void WFCardBlanceRequest::Swap(WFCardBlanceRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WFCardBlanceRequest::InternalSwap(WFCardBlanceRequest* other) {
  user_id_.Swap(&other->user_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WFCardBlanceRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WFCardBlanceRequest_descriptor_;
  metadata.reflection = WFCardBlanceRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WFCardBlanceRequest

// optional string user_id = 1;
void WFCardBlanceRequest::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& WFCardBlanceRequest::user_id() const {
  // @@protoc_insertion_point(field_get:bind.WFCardBlanceRequest.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WFCardBlanceRequest::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bind.WFCardBlanceRequest.user_id)
}
void WFCardBlanceRequest::set_user_id(const char* value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bind.WFCardBlanceRequest.user_id)
}
void WFCardBlanceRequest::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bind.WFCardBlanceRequest.user_id)
}
::std::string* WFCardBlanceRequest::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:bind.WFCardBlanceRequest.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* WFCardBlanceRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:bind.WFCardBlanceRequest.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WFCardBlanceRequest::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:bind.WFCardBlanceRequest.user_id)
}

inline const WFCardBlanceRequest* WFCardBlanceRequest::internal_default_instance() {
  return &WFCardBlanceRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WfCardBlanceResponse::kBlanceFieldNumber;
const int WfCardBlanceResponse::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WfCardBlanceResponse::WfCardBlanceResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_bind_2fmsg_5fwfcard_5fbind_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:bind.WfCardBlanceResponse)
}

void WfCardBlanceResponse::InitAsDefaultInstance() {
  error_ = const_cast< ::grpcCommon::GrpcError*>(
      ::grpcCommon::GrpcError::internal_default_instance());
}

WfCardBlanceResponse::WfCardBlanceResponse(const WfCardBlanceResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bind.WfCardBlanceResponse)
}

void WfCardBlanceResponse::SharedCtor() {
  blance_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_ = NULL;
  _cached_size_ = 0;
}

WfCardBlanceResponse::~WfCardBlanceResponse() {
  // @@protoc_insertion_point(destructor:bind.WfCardBlanceResponse)
  SharedDtor();
}

void WfCardBlanceResponse::SharedDtor() {
  blance_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &WfCardBlanceResponse_default_instance_.get()) {
    delete error_;
  }
}

void WfCardBlanceResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WfCardBlanceResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WfCardBlanceResponse_descriptor_;
}

const WfCardBlanceResponse& WfCardBlanceResponse::default_instance() {
  protobuf_InitDefaults_bind_2fmsg_5fwfcard_5fbind_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<WfCardBlanceResponse> WfCardBlanceResponse_default_instance_;

WfCardBlanceResponse* WfCardBlanceResponse::New(::google::protobuf::Arena* arena) const {
  WfCardBlanceResponse* n = new WfCardBlanceResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WfCardBlanceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bind.WfCardBlanceResponse)
  blance_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && error_ != NULL) delete error_;
  error_ = NULL;
}

bool WfCardBlanceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bind.WfCardBlanceResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string blance = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_blance()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->blance().data(), this->blance().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bind.WfCardBlanceResponse.blance"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional .grpcCommon.GrpcError error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bind.WfCardBlanceResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bind.WfCardBlanceResponse)
  return false;
#undef DO_
}

void WfCardBlanceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bind.WfCardBlanceResponse)
  // optional string blance = 1;
  if (this->blance().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->blance().data(), this->blance().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bind.WfCardBlanceResponse.blance");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->blance(), output);
  }

  // optional .grpcCommon.GrpcError error = 2;
  if (this->has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->error_, output);
  }

  // @@protoc_insertion_point(serialize_end:bind.WfCardBlanceResponse)
}

::google::protobuf::uint8* WfCardBlanceResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:bind.WfCardBlanceResponse)
  // optional string blance = 1;
  if (this->blance().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->blance().data(), this->blance().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bind.WfCardBlanceResponse.blance");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->blance(), target);
  }

  // optional .grpcCommon.GrpcError error = 2;
  if (this->has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->error_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:bind.WfCardBlanceResponse)
  return target;
}

size_t WfCardBlanceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bind.WfCardBlanceResponse)
  size_t total_size = 0;

  // optional string blance = 1;
  if (this->blance().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->blance());
  }

  // optional .grpcCommon.GrpcError error = 2;
  if (this->has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->error_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WfCardBlanceResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bind.WfCardBlanceResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const WfCardBlanceResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WfCardBlanceResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bind.WfCardBlanceResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bind.WfCardBlanceResponse)
    UnsafeMergeFrom(*source);
  }
}

void WfCardBlanceResponse::MergeFrom(const WfCardBlanceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bind.WfCardBlanceResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void WfCardBlanceResponse::UnsafeMergeFrom(const WfCardBlanceResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.blance().size() > 0) {

    blance_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.blance_);
  }
  if (from.has_error()) {
    mutable_error()->::grpcCommon::GrpcError::MergeFrom(from.error());
  }
}

void WfCardBlanceResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bind.WfCardBlanceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WfCardBlanceResponse::CopyFrom(const WfCardBlanceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bind.WfCardBlanceResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool WfCardBlanceResponse::IsInitialized() const {

  return true;
}

void WfCardBlanceResponse::Swap(WfCardBlanceResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WfCardBlanceResponse::InternalSwap(WfCardBlanceResponse* other) {
  blance_.Swap(&other->blance_);
  std::swap(error_, other->error_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WfCardBlanceResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WfCardBlanceResponse_descriptor_;
  metadata.reflection = WfCardBlanceResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WfCardBlanceResponse

// optional string blance = 1;
void WfCardBlanceResponse::clear_blance() {
  blance_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& WfCardBlanceResponse::blance() const {
  // @@protoc_insertion_point(field_get:bind.WfCardBlanceResponse.blance)
  return blance_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WfCardBlanceResponse::set_blance(const ::std::string& value) {
  
  blance_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bind.WfCardBlanceResponse.blance)
}
void WfCardBlanceResponse::set_blance(const char* value) {
  
  blance_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bind.WfCardBlanceResponse.blance)
}
void WfCardBlanceResponse::set_blance(const char* value, size_t size) {
  
  blance_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bind.WfCardBlanceResponse.blance)
}
::std::string* WfCardBlanceResponse::mutable_blance() {
  
  // @@protoc_insertion_point(field_mutable:bind.WfCardBlanceResponse.blance)
  return blance_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* WfCardBlanceResponse::release_blance() {
  // @@protoc_insertion_point(field_release:bind.WfCardBlanceResponse.blance)
  
  return blance_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WfCardBlanceResponse::set_allocated_blance(::std::string* blance) {
  if (blance != NULL) {
    
  } else {
    
  }
  blance_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), blance);
  // @@protoc_insertion_point(field_set_allocated:bind.WfCardBlanceResponse.blance)
}

// optional .grpcCommon.GrpcError error = 2;
bool WfCardBlanceResponse::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
void WfCardBlanceResponse::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) delete error_;
  error_ = NULL;
}
const ::grpcCommon::GrpcError& WfCardBlanceResponse::error() const {
  // @@protoc_insertion_point(field_get:bind.WfCardBlanceResponse.error)
  return error_ != NULL ? *error_
                         : *::grpcCommon::GrpcError::internal_default_instance();
}
::grpcCommon::GrpcError* WfCardBlanceResponse::mutable_error() {
  
  if (error_ == NULL) {
    error_ = new ::grpcCommon::GrpcError;
  }
  // @@protoc_insertion_point(field_mutable:bind.WfCardBlanceResponse.error)
  return error_;
}
::grpcCommon::GrpcError* WfCardBlanceResponse::release_error() {
  // @@protoc_insertion_point(field_release:bind.WfCardBlanceResponse.error)
  
  ::grpcCommon::GrpcError* temp = error_;
  error_ = NULL;
  return temp;
}
void WfCardBlanceResponse::set_allocated_error(::grpcCommon::GrpcError* error) {
  delete error_;
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:bind.WfCardBlanceResponse.error)
}

inline const WfCardBlanceResponse* WfCardBlanceResponse::internal_default_instance() {
  return &WfCardBlanceResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace bind

// @@protoc_insertion_point(global_scope)
