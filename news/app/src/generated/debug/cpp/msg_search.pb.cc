// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_search.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "msg_search.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace personal {

namespace {

const ::google::protobuf::Descriptor* HotThemesRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HotThemesRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* HotThemesResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HotThemesResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SearchHistoryRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SearchHistoryRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SearchHistoryResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SearchHistoryResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_msg_5fsearch_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_msg_5fsearch_2eproto() {
  protobuf_AddDesc_msg_5fsearch_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "msg_search.proto");
  GOOGLE_CHECK(file != NULL);
  HotThemesRequest_descriptor_ = file->message_type(0);
  static const int HotThemesRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HotThemesRequest, page_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HotThemesRequest, page_size_),
  };
  HotThemesRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HotThemesRequest_descriptor_,
      HotThemesRequest::internal_default_instance(),
      HotThemesRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(HotThemesRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HotThemesRequest, _internal_metadata_));
  HotThemesResponse_descriptor_ = file->message_type(1);
  static const int HotThemesResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HotThemesResponse, themes_title_),
  };
  HotThemesResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HotThemesResponse_descriptor_,
      HotThemesResponse::internal_default_instance(),
      HotThemesResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(HotThemesResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HotThemesResponse, _internal_metadata_));
  SearchHistoryRequest_descriptor_ = file->message_type(2);
  static const int SearchHistoryRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchHistoryRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchHistoryRequest, page_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchHistoryRequest, page_size_),
  };
  SearchHistoryRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SearchHistoryRequest_descriptor_,
      SearchHistoryRequest::internal_default_instance(),
      SearchHistoryRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(SearchHistoryRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchHistoryRequest, _internal_metadata_));
  SearchHistoryResponse_descriptor_ = file->message_type(3);
  static const int SearchHistoryResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchHistoryResponse, history_title_),
  };
  SearchHistoryResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SearchHistoryResponse_descriptor_,
      SearchHistoryResponse::internal_default_instance(),
      SearchHistoryResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(SearchHistoryResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchHistoryResponse, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_msg_5fsearch_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HotThemesRequest_descriptor_, HotThemesRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HotThemesResponse_descriptor_, HotThemesResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SearchHistoryRequest_descriptor_, SearchHistoryRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SearchHistoryResponse_descriptor_, SearchHistoryResponse::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_msg_5fsearch_2eproto() {
  HotThemesRequest_default_instance_.Shutdown();
  delete HotThemesRequest_reflection_;
  HotThemesResponse_default_instance_.Shutdown();
  delete HotThemesResponse_reflection_;
  SearchHistoryRequest_default_instance_.Shutdown();
  delete SearchHistoryRequest_reflection_;
  SearchHistoryResponse_default_instance_.Shutdown();
  delete SearchHistoryResponse_reflection_;
}

void protobuf_InitDefaults_msg_5fsearch_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::personal::protobuf_InitDefaults_any_2eproto();
  HotThemesRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  HotThemesResponse_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  SearchHistoryRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  SearchHistoryResponse_default_instance_.DefaultConstruct();
  HotThemesRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  HotThemesResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  SearchHistoryRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  SearchHistoryResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_msg_5fsearch_2eproto_once_);
void protobuf_InitDefaults_msg_5fsearch_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_msg_5fsearch_2eproto_once_,
                 &protobuf_InitDefaults_msg_5fsearch_2eproto_impl);
}
void protobuf_AddDesc_msg_5fsearch_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_msg_5fsearch_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020msg_search.proto\022\010personal\032\tany.proto\""
    ":\n\020HotThemesRequest\022\023\n\013page_number\030\001 \001(\005"
    "\022\021\n\tpage_size\030\002 \001(\005\")\n\021HotThemesResponse"
    "\022\024\n\014themes_title\030\001 \003(\t\"O\n\024SearchHistoryR"
    "equest\022\017\n\007user_id\030\001 \001(\t\022\023\n\013page_number\030\002"
    " \001(\005\022\021\n\tpage_size\030\003 \001(\005\".\n\025SearchHistory"
    "Response\022\025\n\rhistory_title\030\001 \003(\tB\037\n\024com.w"
    "anfang.personalP\001\242\002\004WFPRb\006proto3", 312);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "msg_search.proto", &protobuf_RegisterTypes);
  ::personal::protobuf_AddDesc_any_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_msg_5fsearch_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_msg_5fsearch_2eproto_once_);
void protobuf_AddDesc_msg_5fsearch_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_msg_5fsearch_2eproto_once_,
                 &protobuf_AddDesc_msg_5fsearch_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_msg_5fsearch_2eproto {
  StaticDescriptorInitializer_msg_5fsearch_2eproto() {
    protobuf_AddDesc_msg_5fsearch_2eproto();
  }
} static_descriptor_initializer_msg_5fsearch_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HotThemesRequest::kPageNumberFieldNumber;
const int HotThemesRequest::kPageSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HotThemesRequest::HotThemesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_msg_5fsearch_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:personal.HotThemesRequest)
}

void HotThemesRequest::InitAsDefaultInstance() {
}

HotThemesRequest::HotThemesRequest(const HotThemesRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:personal.HotThemesRequest)
}

void HotThemesRequest::SharedCtor() {
  ::memset(&page_number_, 0, reinterpret_cast<char*>(&page_size_) -
    reinterpret_cast<char*>(&page_number_) + sizeof(page_size_));
  _cached_size_ = 0;
}

HotThemesRequest::~HotThemesRequest() {
  // @@protoc_insertion_point(destructor:personal.HotThemesRequest)
  SharedDtor();
}

void HotThemesRequest::SharedDtor() {
}

void HotThemesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HotThemesRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HotThemesRequest_descriptor_;
}

const HotThemesRequest& HotThemesRequest::default_instance() {
  protobuf_InitDefaults_msg_5fsearch_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<HotThemesRequest> HotThemesRequest_default_instance_;

HotThemesRequest* HotThemesRequest::New(::google::protobuf::Arena* arena) const {
  HotThemesRequest* n = new HotThemesRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HotThemesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:personal.HotThemesRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(HotThemesRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<HotThemesRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(page_number_, page_size_);

#undef ZR_HELPER_
#undef ZR_

}

bool HotThemesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:personal.HotThemesRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 page_number = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_number_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_page_size;
        break;
      }

      // optional int32 page_size = 2;
      case 2: {
        if (tag == 16) {
         parse_page_size:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_size_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:personal.HotThemesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:personal.HotThemesRequest)
  return false;
#undef DO_
}

void HotThemesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:personal.HotThemesRequest)
  // optional int32 page_number = 1;
  if (this->page_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->page_number(), output);
  }

  // optional int32 page_size = 2;
  if (this->page_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->page_size(), output);
  }

  // @@protoc_insertion_point(serialize_end:personal.HotThemesRequest)
}

::google::protobuf::uint8* HotThemesRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:personal.HotThemesRequest)
  // optional int32 page_number = 1;
  if (this->page_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->page_number(), target);
  }

  // optional int32 page_size = 2;
  if (this->page_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->page_size(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:personal.HotThemesRequest)
  return target;
}

size_t HotThemesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:personal.HotThemesRequest)
  size_t total_size = 0;

  // optional int32 page_number = 1;
  if (this->page_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->page_number());
  }

  // optional int32 page_size = 2;
  if (this->page_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->page_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HotThemesRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:personal.HotThemesRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const HotThemesRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HotThemesRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:personal.HotThemesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:personal.HotThemesRequest)
    UnsafeMergeFrom(*source);
  }
}

void HotThemesRequest::MergeFrom(const HotThemesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:personal.HotThemesRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void HotThemesRequest::UnsafeMergeFrom(const HotThemesRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.page_number() != 0) {
    set_page_number(from.page_number());
  }
  if (from.page_size() != 0) {
    set_page_size(from.page_size());
  }
}

void HotThemesRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:personal.HotThemesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HotThemesRequest::CopyFrom(const HotThemesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:personal.HotThemesRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool HotThemesRequest::IsInitialized() const {

  return true;
}

void HotThemesRequest::Swap(HotThemesRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HotThemesRequest::InternalSwap(HotThemesRequest* other) {
  std::swap(page_number_, other->page_number_);
  std::swap(page_size_, other->page_size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HotThemesRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HotThemesRequest_descriptor_;
  metadata.reflection = HotThemesRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HotThemesRequest

// optional int32 page_number = 1;
void HotThemesRequest::clear_page_number() {
  page_number_ = 0;
}
::google::protobuf::int32 HotThemesRequest::page_number() const {
  // @@protoc_insertion_point(field_get:personal.HotThemesRequest.page_number)
  return page_number_;
}
void HotThemesRequest::set_page_number(::google::protobuf::int32 value) {
  
  page_number_ = value;
  // @@protoc_insertion_point(field_set:personal.HotThemesRequest.page_number)
}

// optional int32 page_size = 2;
void HotThemesRequest::clear_page_size() {
  page_size_ = 0;
}
::google::protobuf::int32 HotThemesRequest::page_size() const {
  // @@protoc_insertion_point(field_get:personal.HotThemesRequest.page_size)
  return page_size_;
}
void HotThemesRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:personal.HotThemesRequest.page_size)
}

inline const HotThemesRequest* HotThemesRequest::internal_default_instance() {
  return &HotThemesRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HotThemesResponse::kThemesTitleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HotThemesResponse::HotThemesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_msg_5fsearch_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:personal.HotThemesResponse)
}

void HotThemesResponse::InitAsDefaultInstance() {
}

HotThemesResponse::HotThemesResponse(const HotThemesResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:personal.HotThemesResponse)
}

void HotThemesResponse::SharedCtor() {
  _cached_size_ = 0;
}

HotThemesResponse::~HotThemesResponse() {
  // @@protoc_insertion_point(destructor:personal.HotThemesResponse)
  SharedDtor();
}

void HotThemesResponse::SharedDtor() {
}

void HotThemesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HotThemesResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HotThemesResponse_descriptor_;
}

const HotThemesResponse& HotThemesResponse::default_instance() {
  protobuf_InitDefaults_msg_5fsearch_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<HotThemesResponse> HotThemesResponse_default_instance_;

HotThemesResponse* HotThemesResponse::New(::google::protobuf::Arena* arena) const {
  HotThemesResponse* n = new HotThemesResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HotThemesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:personal.HotThemesResponse)
  themes_title_.Clear();
}

bool HotThemesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:personal.HotThemesResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string themes_title = 1;
      case 1: {
        if (tag == 10) {
         parse_themes_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_themes_title()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->themes_title(this->themes_title_size() - 1).data(),
            this->themes_title(this->themes_title_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "personal.HotThemesResponse.themes_title"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_themes_title;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:personal.HotThemesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:personal.HotThemesResponse)
  return false;
#undef DO_
}

void HotThemesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:personal.HotThemesResponse)
  // repeated string themes_title = 1;
  for (int i = 0; i < this->themes_title_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->themes_title(i).data(), this->themes_title(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "personal.HotThemesResponse.themes_title");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->themes_title(i), output);
  }

  // @@protoc_insertion_point(serialize_end:personal.HotThemesResponse)
}

::google::protobuf::uint8* HotThemesResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:personal.HotThemesResponse)
  // repeated string themes_title = 1;
  for (int i = 0; i < this->themes_title_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->themes_title(i).data(), this->themes_title(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "personal.HotThemesResponse.themes_title");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->themes_title(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:personal.HotThemesResponse)
  return target;
}

size_t HotThemesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:personal.HotThemesResponse)
  size_t total_size = 0;

  // repeated string themes_title = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->themes_title_size());
  for (int i = 0; i < this->themes_title_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->themes_title(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HotThemesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:personal.HotThemesResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const HotThemesResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HotThemesResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:personal.HotThemesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:personal.HotThemesResponse)
    UnsafeMergeFrom(*source);
  }
}

void HotThemesResponse::MergeFrom(const HotThemesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:personal.HotThemesResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void HotThemesResponse::UnsafeMergeFrom(const HotThemesResponse& from) {
  GOOGLE_DCHECK(&from != this);
  themes_title_.UnsafeMergeFrom(from.themes_title_);
}

void HotThemesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:personal.HotThemesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HotThemesResponse::CopyFrom(const HotThemesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:personal.HotThemesResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool HotThemesResponse::IsInitialized() const {

  return true;
}

void HotThemesResponse::Swap(HotThemesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HotThemesResponse::InternalSwap(HotThemesResponse* other) {
  themes_title_.UnsafeArenaSwap(&other->themes_title_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HotThemesResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HotThemesResponse_descriptor_;
  metadata.reflection = HotThemesResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HotThemesResponse

// repeated string themes_title = 1;
int HotThemesResponse::themes_title_size() const {
  return themes_title_.size();
}
void HotThemesResponse::clear_themes_title() {
  themes_title_.Clear();
}
const ::std::string& HotThemesResponse::themes_title(int index) const {
  // @@protoc_insertion_point(field_get:personal.HotThemesResponse.themes_title)
  return themes_title_.Get(index);
}
::std::string* HotThemesResponse::mutable_themes_title(int index) {
  // @@protoc_insertion_point(field_mutable:personal.HotThemesResponse.themes_title)
  return themes_title_.Mutable(index);
}
void HotThemesResponse::set_themes_title(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:personal.HotThemesResponse.themes_title)
  themes_title_.Mutable(index)->assign(value);
}
void HotThemesResponse::set_themes_title(int index, const char* value) {
  themes_title_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:personal.HotThemesResponse.themes_title)
}
void HotThemesResponse::set_themes_title(int index, const char* value, size_t size) {
  themes_title_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:personal.HotThemesResponse.themes_title)
}
::std::string* HotThemesResponse::add_themes_title() {
  // @@protoc_insertion_point(field_add_mutable:personal.HotThemesResponse.themes_title)
  return themes_title_.Add();
}
void HotThemesResponse::add_themes_title(const ::std::string& value) {
  themes_title_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:personal.HotThemesResponse.themes_title)
}
void HotThemesResponse::add_themes_title(const char* value) {
  themes_title_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:personal.HotThemesResponse.themes_title)
}
void HotThemesResponse::add_themes_title(const char* value, size_t size) {
  themes_title_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:personal.HotThemesResponse.themes_title)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
HotThemesResponse::themes_title() const {
  // @@protoc_insertion_point(field_list:personal.HotThemesResponse.themes_title)
  return themes_title_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
HotThemesResponse::mutable_themes_title() {
  // @@protoc_insertion_point(field_mutable_list:personal.HotThemesResponse.themes_title)
  return &themes_title_;
}

inline const HotThemesResponse* HotThemesResponse::internal_default_instance() {
  return &HotThemesResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SearchHistoryRequest::kUserIdFieldNumber;
const int SearchHistoryRequest::kPageNumberFieldNumber;
const int SearchHistoryRequest::kPageSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SearchHistoryRequest::SearchHistoryRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_msg_5fsearch_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:personal.SearchHistoryRequest)
}

void SearchHistoryRequest::InitAsDefaultInstance() {
}

SearchHistoryRequest::SearchHistoryRequest(const SearchHistoryRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:personal.SearchHistoryRequest)
}

void SearchHistoryRequest::SharedCtor() {
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&page_number_, 0, reinterpret_cast<char*>(&page_size_) -
    reinterpret_cast<char*>(&page_number_) + sizeof(page_size_));
  _cached_size_ = 0;
}

SearchHistoryRequest::~SearchHistoryRequest() {
  // @@protoc_insertion_point(destructor:personal.SearchHistoryRequest)
  SharedDtor();
}

void SearchHistoryRequest::SharedDtor() {
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SearchHistoryRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchHistoryRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchHistoryRequest_descriptor_;
}

const SearchHistoryRequest& SearchHistoryRequest::default_instance() {
  protobuf_InitDefaults_msg_5fsearch_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SearchHistoryRequest> SearchHistoryRequest_default_instance_;

SearchHistoryRequest* SearchHistoryRequest::New(::google::protobuf::Arena* arena) const {
  SearchHistoryRequest* n = new SearchHistoryRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SearchHistoryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:personal.SearchHistoryRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SearchHistoryRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SearchHistoryRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(page_number_, page_size_);
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool SearchHistoryRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:personal.SearchHistoryRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string user_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "personal.SearchHistoryRequest.user_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_page_number;
        break;
      }

      // optional int32 page_number = 2;
      case 2: {
        if (tag == 16) {
         parse_page_number:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_number_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_page_size;
        break;
      }

      // optional int32 page_size = 3;
      case 3: {
        if (tag == 24) {
         parse_page_size:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_size_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:personal.SearchHistoryRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:personal.SearchHistoryRequest)
  return false;
#undef DO_
}

void SearchHistoryRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:personal.SearchHistoryRequest)
  // optional string user_id = 1;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "personal.SearchHistoryRequest.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user_id(), output);
  }

  // optional int32 page_number = 2;
  if (this->page_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->page_number(), output);
  }

  // optional int32 page_size = 3;
  if (this->page_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->page_size(), output);
  }

  // @@protoc_insertion_point(serialize_end:personal.SearchHistoryRequest)
}

::google::protobuf::uint8* SearchHistoryRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:personal.SearchHistoryRequest)
  // optional string user_id = 1;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "personal.SearchHistoryRequest.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_id(), target);
  }

  // optional int32 page_number = 2;
  if (this->page_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->page_number(), target);
  }

  // optional int32 page_size = 3;
  if (this->page_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->page_size(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:personal.SearchHistoryRequest)
  return target;
}

size_t SearchHistoryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:personal.SearchHistoryRequest)
  size_t total_size = 0;

  // optional string user_id = 1;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  // optional int32 page_number = 2;
  if (this->page_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->page_number());
  }

  // optional int32 page_size = 3;
  if (this->page_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->page_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchHistoryRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:personal.SearchHistoryRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SearchHistoryRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SearchHistoryRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:personal.SearchHistoryRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:personal.SearchHistoryRequest)
    UnsafeMergeFrom(*source);
  }
}

void SearchHistoryRequest::MergeFrom(const SearchHistoryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:personal.SearchHistoryRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SearchHistoryRequest::UnsafeMergeFrom(const SearchHistoryRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.user_id().size() > 0) {

    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  if (from.page_number() != 0) {
    set_page_number(from.page_number());
  }
  if (from.page_size() != 0) {
    set_page_size(from.page_size());
  }
}

void SearchHistoryRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:personal.SearchHistoryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchHistoryRequest::CopyFrom(const SearchHistoryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:personal.SearchHistoryRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SearchHistoryRequest::IsInitialized() const {

  return true;
}

void SearchHistoryRequest::Swap(SearchHistoryRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SearchHistoryRequest::InternalSwap(SearchHistoryRequest* other) {
  user_id_.Swap(&other->user_id_);
  std::swap(page_number_, other->page_number_);
  std::swap(page_size_, other->page_size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SearchHistoryRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SearchHistoryRequest_descriptor_;
  metadata.reflection = SearchHistoryRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SearchHistoryRequest

// optional string user_id = 1;
void SearchHistoryRequest::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SearchHistoryRequest::user_id() const {
  // @@protoc_insertion_point(field_get:personal.SearchHistoryRequest.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SearchHistoryRequest::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:personal.SearchHistoryRequest.user_id)
}
void SearchHistoryRequest::set_user_id(const char* value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:personal.SearchHistoryRequest.user_id)
}
void SearchHistoryRequest::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:personal.SearchHistoryRequest.user_id)
}
::std::string* SearchHistoryRequest::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:personal.SearchHistoryRequest.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SearchHistoryRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:personal.SearchHistoryRequest.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SearchHistoryRequest::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:personal.SearchHistoryRequest.user_id)
}

// optional int32 page_number = 2;
void SearchHistoryRequest::clear_page_number() {
  page_number_ = 0;
}
::google::protobuf::int32 SearchHistoryRequest::page_number() const {
  // @@protoc_insertion_point(field_get:personal.SearchHistoryRequest.page_number)
  return page_number_;
}
void SearchHistoryRequest::set_page_number(::google::protobuf::int32 value) {
  
  page_number_ = value;
  // @@protoc_insertion_point(field_set:personal.SearchHistoryRequest.page_number)
}

// optional int32 page_size = 3;
void SearchHistoryRequest::clear_page_size() {
  page_size_ = 0;
}
::google::protobuf::int32 SearchHistoryRequest::page_size() const {
  // @@protoc_insertion_point(field_get:personal.SearchHistoryRequest.page_size)
  return page_size_;
}
void SearchHistoryRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:personal.SearchHistoryRequest.page_size)
}

inline const SearchHistoryRequest* SearchHistoryRequest::internal_default_instance() {
  return &SearchHistoryRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SearchHistoryResponse::kHistoryTitleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SearchHistoryResponse::SearchHistoryResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_msg_5fsearch_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:personal.SearchHistoryResponse)
}

void SearchHistoryResponse::InitAsDefaultInstance() {
}

SearchHistoryResponse::SearchHistoryResponse(const SearchHistoryResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:personal.SearchHistoryResponse)
}

void SearchHistoryResponse::SharedCtor() {
  _cached_size_ = 0;
}

SearchHistoryResponse::~SearchHistoryResponse() {
  // @@protoc_insertion_point(destructor:personal.SearchHistoryResponse)
  SharedDtor();
}

void SearchHistoryResponse::SharedDtor() {
}

void SearchHistoryResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchHistoryResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchHistoryResponse_descriptor_;
}

const SearchHistoryResponse& SearchHistoryResponse::default_instance() {
  protobuf_InitDefaults_msg_5fsearch_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SearchHistoryResponse> SearchHistoryResponse_default_instance_;

SearchHistoryResponse* SearchHistoryResponse::New(::google::protobuf::Arena* arena) const {
  SearchHistoryResponse* n = new SearchHistoryResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SearchHistoryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:personal.SearchHistoryResponse)
  history_title_.Clear();
}

bool SearchHistoryResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:personal.SearchHistoryResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string history_title = 1;
      case 1: {
        if (tag == 10) {
         parse_history_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_history_title()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->history_title(this->history_title_size() - 1).data(),
            this->history_title(this->history_title_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "personal.SearchHistoryResponse.history_title"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_history_title;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:personal.SearchHistoryResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:personal.SearchHistoryResponse)
  return false;
#undef DO_
}

void SearchHistoryResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:personal.SearchHistoryResponse)
  // repeated string history_title = 1;
  for (int i = 0; i < this->history_title_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->history_title(i).data(), this->history_title(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "personal.SearchHistoryResponse.history_title");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->history_title(i), output);
  }

  // @@protoc_insertion_point(serialize_end:personal.SearchHistoryResponse)
}

::google::protobuf::uint8* SearchHistoryResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:personal.SearchHistoryResponse)
  // repeated string history_title = 1;
  for (int i = 0; i < this->history_title_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->history_title(i).data(), this->history_title(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "personal.SearchHistoryResponse.history_title");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->history_title(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:personal.SearchHistoryResponse)
  return target;
}

size_t SearchHistoryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:personal.SearchHistoryResponse)
  size_t total_size = 0;

  // repeated string history_title = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->history_title_size());
  for (int i = 0; i < this->history_title_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->history_title(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchHistoryResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:personal.SearchHistoryResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SearchHistoryResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SearchHistoryResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:personal.SearchHistoryResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:personal.SearchHistoryResponse)
    UnsafeMergeFrom(*source);
  }
}

void SearchHistoryResponse::MergeFrom(const SearchHistoryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:personal.SearchHistoryResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SearchHistoryResponse::UnsafeMergeFrom(const SearchHistoryResponse& from) {
  GOOGLE_DCHECK(&from != this);
  history_title_.UnsafeMergeFrom(from.history_title_);
}

void SearchHistoryResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:personal.SearchHistoryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchHistoryResponse::CopyFrom(const SearchHistoryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:personal.SearchHistoryResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SearchHistoryResponse::IsInitialized() const {

  return true;
}

void SearchHistoryResponse::Swap(SearchHistoryResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SearchHistoryResponse::InternalSwap(SearchHistoryResponse* other) {
  history_title_.UnsafeArenaSwap(&other->history_title_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SearchHistoryResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SearchHistoryResponse_descriptor_;
  metadata.reflection = SearchHistoryResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SearchHistoryResponse

// repeated string history_title = 1;
int SearchHistoryResponse::history_title_size() const {
  return history_title_.size();
}
void SearchHistoryResponse::clear_history_title() {
  history_title_.Clear();
}
const ::std::string& SearchHistoryResponse::history_title(int index) const {
  // @@protoc_insertion_point(field_get:personal.SearchHistoryResponse.history_title)
  return history_title_.Get(index);
}
::std::string* SearchHistoryResponse::mutable_history_title(int index) {
  // @@protoc_insertion_point(field_mutable:personal.SearchHistoryResponse.history_title)
  return history_title_.Mutable(index);
}
void SearchHistoryResponse::set_history_title(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:personal.SearchHistoryResponse.history_title)
  history_title_.Mutable(index)->assign(value);
}
void SearchHistoryResponse::set_history_title(int index, const char* value) {
  history_title_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:personal.SearchHistoryResponse.history_title)
}
void SearchHistoryResponse::set_history_title(int index, const char* value, size_t size) {
  history_title_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:personal.SearchHistoryResponse.history_title)
}
::std::string* SearchHistoryResponse::add_history_title() {
  // @@protoc_insertion_point(field_add_mutable:personal.SearchHistoryResponse.history_title)
  return history_title_.Add();
}
void SearchHistoryResponse::add_history_title(const ::std::string& value) {
  history_title_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:personal.SearchHistoryResponse.history_title)
}
void SearchHistoryResponse::add_history_title(const char* value) {
  history_title_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:personal.SearchHistoryResponse.history_title)
}
void SearchHistoryResponse::add_history_title(const char* value, size_t size) {
  history_title_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:personal.SearchHistoryResponse.history_title)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
SearchHistoryResponse::history_title() const {
  // @@protoc_insertion_point(field_list:personal.SearchHistoryResponse.history_title)
  return history_title_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
SearchHistoryResponse::mutable_history_title() {
  // @@protoc_insertion_point(field_mutable_list:personal.SearchHistoryResponse.history_title)
  return &history_title_;
}

inline const SearchHistoryResponse* SearchHistoryResponse::internal_default_instance() {
  return &SearchHistoryResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace personal

// @@protoc_insertion_point(global_scope)
