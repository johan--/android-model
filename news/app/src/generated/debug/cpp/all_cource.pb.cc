// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: all_cource.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "all_cource.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace main {

namespace {

const ::google::protobuf::Descriptor* AlCourseRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AlCourseRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AlCourseReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AlCourseReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* Course_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Course_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_all_5fcource_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_all_5fcource_2eproto() {
  protobuf_AddDesc_all_5fcource_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "all_cource.proto");
  GOOGLE_CHECK(file != NULL);
  AlCourseRequest_descriptor_ = file->message_type(0);
  static const int AlCourseRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlCourseRequest, page_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlCourseRequest, page_size_),
  };
  AlCourseRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AlCourseRequest_descriptor_,
      AlCourseRequest::internal_default_instance(),
      AlCourseRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(AlCourseRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlCourseRequest, _internal_metadata_));
  AlCourseReply_descriptor_ = file->message_type(1);
  static const int AlCourseReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlCourseReply, course_),
  };
  AlCourseReply_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AlCourseReply_descriptor_,
      AlCourseReply::internal_default_instance(),
      AlCourseReply_offsets_,
      -1,
      -1,
      -1,
      sizeof(AlCourseReply),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlCourseReply, _internal_metadata_));
  Course_descriptor_ = file->message_type(2);
  static const int Course_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Course, course_cover_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Course, course_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Course, course_title_),
  };
  Course_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Course_descriptor_,
      Course::internal_default_instance(),
      Course_offsets_,
      -1,
      -1,
      -1,
      sizeof(Course),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Course, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_all_5fcource_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AlCourseRequest_descriptor_, AlCourseRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AlCourseReply_descriptor_, AlCourseReply::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Course_descriptor_, Course::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_all_5fcource_2eproto() {
  AlCourseRequest_default_instance_.Shutdown();
  delete AlCourseRequest_reflection_;
  AlCourseReply_default_instance_.Shutdown();
  delete AlCourseReply_reflection_;
  Course_default_instance_.Shutdown();
  delete Course_reflection_;
}

void protobuf_InitDefaults_all_5fcource_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  AlCourseRequest_default_instance_.DefaultConstruct();
  AlCourseReply_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Course_default_instance_.DefaultConstruct();
  AlCourseRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  AlCourseReply_default_instance_.get_mutable()->InitAsDefaultInstance();
  Course_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_all_5fcource_2eproto_once_);
void protobuf_InitDefaults_all_5fcource_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_all_5fcource_2eproto_once_,
                 &protobuf_InitDefaults_all_5fcource_2eproto_impl);
}
void protobuf_AddDesc_all_5fcource_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_all_5fcource_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020all_cource.proto\022\004main\"9\n\017AlCourseRequ"
    "est\022\023\n\013page_number\030\001 \001(\t\022\021\n\tpage_size\030\002 "
    "\001(\t\"-\n\rAlCourseReply\022\034\n\006course\030\001 \003(\0132\014.m"
    "ain.Course\"G\n\006Course\022\024\n\014course_cover\030\001 \001"
    "(\t\022\021\n\tcourse_id\030\002 \001(\t\022\024\n\014course_title\030\003 "
    "\001(\tB\022\n\020com.wanfang.mainb\006proto3", 231);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "all_cource.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_all_5fcource_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_all_5fcource_2eproto_once_);
void protobuf_AddDesc_all_5fcource_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_all_5fcource_2eproto_once_,
                 &protobuf_AddDesc_all_5fcource_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_all_5fcource_2eproto {
  StaticDescriptorInitializer_all_5fcource_2eproto() {
    protobuf_AddDesc_all_5fcource_2eproto();
  }
} static_descriptor_initializer_all_5fcource_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AlCourseRequest::kPageNumberFieldNumber;
const int AlCourseRequest::kPageSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AlCourseRequest::AlCourseRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_all_5fcource_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.AlCourseRequest)
}

void AlCourseRequest::InitAsDefaultInstance() {
}

AlCourseRequest::AlCourseRequest(const AlCourseRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.AlCourseRequest)
}

void AlCourseRequest::SharedCtor() {
  page_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_size_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

AlCourseRequest::~AlCourseRequest() {
  // @@protoc_insertion_point(destructor:main.AlCourseRequest)
  SharedDtor();
}

void AlCourseRequest::SharedDtor() {
  page_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_size_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AlCourseRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AlCourseRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AlCourseRequest_descriptor_;
}

const AlCourseRequest& AlCourseRequest::default_instance() {
  protobuf_InitDefaults_all_5fcource_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AlCourseRequest> AlCourseRequest_default_instance_;

AlCourseRequest* AlCourseRequest::New(::google::protobuf::Arena* arena) const {
  AlCourseRequest* n = new AlCourseRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AlCourseRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:main.AlCourseRequest)
  page_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_size_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AlCourseRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:main.AlCourseRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string page_number = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_number()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->page_number().data(), this->page_number().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "main.AlCourseRequest.page_number"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_page_size;
        break;
      }

      // optional string page_size = 2;
      case 2: {
        if (tag == 18) {
         parse_page_size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_size()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->page_size().data(), this->page_size().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "main.AlCourseRequest.page_size"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.AlCourseRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.AlCourseRequest)
  return false;
#undef DO_
}

void AlCourseRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.AlCourseRequest)
  // optional string page_number = 1;
  if (this->page_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_number().data(), this->page_number().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "main.AlCourseRequest.page_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->page_number(), output);
  }

  // optional string page_size = 2;
  if (this->page_size().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_size().data(), this->page_size().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "main.AlCourseRequest.page_size");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->page_size(), output);
  }

  // @@protoc_insertion_point(serialize_end:main.AlCourseRequest)
}

::google::protobuf::uint8* AlCourseRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:main.AlCourseRequest)
  // optional string page_number = 1;
  if (this->page_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_number().data(), this->page_number().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "main.AlCourseRequest.page_number");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->page_number(), target);
  }

  // optional string page_size = 2;
  if (this->page_size().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_size().data(), this->page_size().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "main.AlCourseRequest.page_size");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->page_size(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:main.AlCourseRequest)
  return target;
}

size_t AlCourseRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:main.AlCourseRequest)
  size_t total_size = 0;

  // optional string page_number = 1;
  if (this->page_number().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->page_number());
  }

  // optional string page_size = 2;
  if (this->page_size().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->page_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AlCourseRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:main.AlCourseRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AlCourseRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AlCourseRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:main.AlCourseRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:main.AlCourseRequest)
    UnsafeMergeFrom(*source);
  }
}

void AlCourseRequest::MergeFrom(const AlCourseRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:main.AlCourseRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AlCourseRequest::UnsafeMergeFrom(const AlCourseRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.page_number().size() > 0) {

    page_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_number_);
  }
  if (from.page_size().size() > 0) {

    page_size_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_size_);
  }
}

void AlCourseRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:main.AlCourseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlCourseRequest::CopyFrom(const AlCourseRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:main.AlCourseRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AlCourseRequest::IsInitialized() const {

  return true;
}

void AlCourseRequest::Swap(AlCourseRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AlCourseRequest::InternalSwap(AlCourseRequest* other) {
  page_number_.Swap(&other->page_number_);
  page_size_.Swap(&other->page_size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AlCourseRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AlCourseRequest_descriptor_;
  metadata.reflection = AlCourseRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AlCourseRequest

// optional string page_number = 1;
void AlCourseRequest::clear_page_number() {
  page_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AlCourseRequest::page_number() const {
  // @@protoc_insertion_point(field_get:main.AlCourseRequest.page_number)
  return page_number_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AlCourseRequest::set_page_number(const ::std::string& value) {
  
  page_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:main.AlCourseRequest.page_number)
}
void AlCourseRequest::set_page_number(const char* value) {
  
  page_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:main.AlCourseRequest.page_number)
}
void AlCourseRequest::set_page_number(const char* value, size_t size) {
  
  page_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:main.AlCourseRequest.page_number)
}
::std::string* AlCourseRequest::mutable_page_number() {
  
  // @@protoc_insertion_point(field_mutable:main.AlCourseRequest.page_number)
  return page_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AlCourseRequest::release_page_number() {
  // @@protoc_insertion_point(field_release:main.AlCourseRequest.page_number)
  
  return page_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AlCourseRequest::set_allocated_page_number(::std::string* page_number) {
  if (page_number != NULL) {
    
  } else {
    
  }
  page_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_number);
  // @@protoc_insertion_point(field_set_allocated:main.AlCourseRequest.page_number)
}

// optional string page_size = 2;
void AlCourseRequest::clear_page_size() {
  page_size_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AlCourseRequest::page_size() const {
  // @@protoc_insertion_point(field_get:main.AlCourseRequest.page_size)
  return page_size_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AlCourseRequest::set_page_size(const ::std::string& value) {
  
  page_size_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:main.AlCourseRequest.page_size)
}
void AlCourseRequest::set_page_size(const char* value) {
  
  page_size_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:main.AlCourseRequest.page_size)
}
void AlCourseRequest::set_page_size(const char* value, size_t size) {
  
  page_size_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:main.AlCourseRequest.page_size)
}
::std::string* AlCourseRequest::mutable_page_size() {
  
  // @@protoc_insertion_point(field_mutable:main.AlCourseRequest.page_size)
  return page_size_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AlCourseRequest::release_page_size() {
  // @@protoc_insertion_point(field_release:main.AlCourseRequest.page_size)
  
  return page_size_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AlCourseRequest::set_allocated_page_size(::std::string* page_size) {
  if (page_size != NULL) {
    
  } else {
    
  }
  page_size_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_size);
  // @@protoc_insertion_point(field_set_allocated:main.AlCourseRequest.page_size)
}

inline const AlCourseRequest* AlCourseRequest::internal_default_instance() {
  return &AlCourseRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AlCourseReply::kCourseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AlCourseReply::AlCourseReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_all_5fcource_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.AlCourseReply)
}

void AlCourseReply::InitAsDefaultInstance() {
}

AlCourseReply::AlCourseReply(const AlCourseReply& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.AlCourseReply)
}

void AlCourseReply::SharedCtor() {
  _cached_size_ = 0;
}

AlCourseReply::~AlCourseReply() {
  // @@protoc_insertion_point(destructor:main.AlCourseReply)
  SharedDtor();
}

void AlCourseReply::SharedDtor() {
}

void AlCourseReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AlCourseReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AlCourseReply_descriptor_;
}

const AlCourseReply& AlCourseReply::default_instance() {
  protobuf_InitDefaults_all_5fcource_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AlCourseReply> AlCourseReply_default_instance_;

AlCourseReply* AlCourseReply::New(::google::protobuf::Arena* arena) const {
  AlCourseReply* n = new AlCourseReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AlCourseReply::Clear() {
// @@protoc_insertion_point(message_clear_start:main.AlCourseReply)
  course_.Clear();
}

bool AlCourseReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:main.AlCourseReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .main.Course course = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_course:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_course()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_course;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.AlCourseReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.AlCourseReply)
  return false;
#undef DO_
}

void AlCourseReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.AlCourseReply)
  // repeated .main.Course course = 1;
  for (unsigned int i = 0, n = this->course_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->course(i), output);
  }

  // @@protoc_insertion_point(serialize_end:main.AlCourseReply)
}

::google::protobuf::uint8* AlCourseReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:main.AlCourseReply)
  // repeated .main.Course course = 1;
  for (unsigned int i = 0, n = this->course_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->course(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:main.AlCourseReply)
  return target;
}

size_t AlCourseReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:main.AlCourseReply)
  size_t total_size = 0;

  // repeated .main.Course course = 1;
  {
    unsigned int count = this->course_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->course(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AlCourseReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:main.AlCourseReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AlCourseReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AlCourseReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:main.AlCourseReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:main.AlCourseReply)
    UnsafeMergeFrom(*source);
  }
}

void AlCourseReply::MergeFrom(const AlCourseReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:main.AlCourseReply)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AlCourseReply::UnsafeMergeFrom(const AlCourseReply& from) {
  GOOGLE_DCHECK(&from != this);
  course_.MergeFrom(from.course_);
}

void AlCourseReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:main.AlCourseReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlCourseReply::CopyFrom(const AlCourseReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:main.AlCourseReply)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AlCourseReply::IsInitialized() const {

  return true;
}

void AlCourseReply::Swap(AlCourseReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AlCourseReply::InternalSwap(AlCourseReply* other) {
  course_.UnsafeArenaSwap(&other->course_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AlCourseReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AlCourseReply_descriptor_;
  metadata.reflection = AlCourseReply_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AlCourseReply

// repeated .main.Course course = 1;
int AlCourseReply::course_size() const {
  return course_.size();
}
void AlCourseReply::clear_course() {
  course_.Clear();
}
const ::main::Course& AlCourseReply::course(int index) const {
  // @@protoc_insertion_point(field_get:main.AlCourseReply.course)
  return course_.Get(index);
}
::main::Course* AlCourseReply::mutable_course(int index) {
  // @@protoc_insertion_point(field_mutable:main.AlCourseReply.course)
  return course_.Mutable(index);
}
::main::Course* AlCourseReply::add_course() {
  // @@protoc_insertion_point(field_add:main.AlCourseReply.course)
  return course_.Add();
}
::google::protobuf::RepeatedPtrField< ::main::Course >*
AlCourseReply::mutable_course() {
  // @@protoc_insertion_point(field_mutable_list:main.AlCourseReply.course)
  return &course_;
}
const ::google::protobuf::RepeatedPtrField< ::main::Course >&
AlCourseReply::course() const {
  // @@protoc_insertion_point(field_list:main.AlCourseReply.course)
  return course_;
}

inline const AlCourseReply* AlCourseReply::internal_default_instance() {
  return &AlCourseReply_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Course::kCourseCoverFieldNumber;
const int Course::kCourseIdFieldNumber;
const int Course::kCourseTitleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Course::Course()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_all_5fcource_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.Course)
}

void Course::InitAsDefaultInstance() {
}

Course::Course(const Course& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.Course)
}

void Course::SharedCtor() {
  course_cover_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  course_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  course_title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

Course::~Course() {
  // @@protoc_insertion_point(destructor:main.Course)
  SharedDtor();
}

void Course::SharedDtor() {
  course_cover_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  course_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  course_title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Course::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Course::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Course_descriptor_;
}

const Course& Course::default_instance() {
  protobuf_InitDefaults_all_5fcource_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Course> Course_default_instance_;

Course* Course::New(::google::protobuf::Arena* arena) const {
  Course* n = new Course;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Course::Clear() {
// @@protoc_insertion_point(message_clear_start:main.Course)
  course_cover_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  course_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  course_title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Course::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:main.Course)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string course_cover = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_course_cover()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->course_cover().data(), this->course_cover().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "main.Course.course_cover"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_course_id;
        break;
      }

      // optional string course_id = 2;
      case 2: {
        if (tag == 18) {
         parse_course_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_course_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->course_id().data(), this->course_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "main.Course.course_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_course_title;
        break;
      }

      // optional string course_title = 3;
      case 3: {
        if (tag == 26) {
         parse_course_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_course_title()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->course_title().data(), this->course_title().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "main.Course.course_title"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.Course)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.Course)
  return false;
#undef DO_
}

void Course::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.Course)
  // optional string course_cover = 1;
  if (this->course_cover().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->course_cover().data(), this->course_cover().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "main.Course.course_cover");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->course_cover(), output);
  }

  // optional string course_id = 2;
  if (this->course_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->course_id().data(), this->course_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "main.Course.course_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->course_id(), output);
  }

  // optional string course_title = 3;
  if (this->course_title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->course_title().data(), this->course_title().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "main.Course.course_title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->course_title(), output);
  }

  // @@protoc_insertion_point(serialize_end:main.Course)
}

::google::protobuf::uint8* Course::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:main.Course)
  // optional string course_cover = 1;
  if (this->course_cover().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->course_cover().data(), this->course_cover().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "main.Course.course_cover");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->course_cover(), target);
  }

  // optional string course_id = 2;
  if (this->course_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->course_id().data(), this->course_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "main.Course.course_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->course_id(), target);
  }

  // optional string course_title = 3;
  if (this->course_title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->course_title().data(), this->course_title().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "main.Course.course_title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->course_title(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:main.Course)
  return target;
}

size_t Course::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:main.Course)
  size_t total_size = 0;

  // optional string course_cover = 1;
  if (this->course_cover().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->course_cover());
  }

  // optional string course_id = 2;
  if (this->course_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->course_id());
  }

  // optional string course_title = 3;
  if (this->course_title().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->course_title());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Course::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:main.Course)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Course* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Course>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:main.Course)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:main.Course)
    UnsafeMergeFrom(*source);
  }
}

void Course::MergeFrom(const Course& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:main.Course)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Course::UnsafeMergeFrom(const Course& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.course_cover().size() > 0) {

    course_cover_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.course_cover_);
  }
  if (from.course_id().size() > 0) {

    course_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.course_id_);
  }
  if (from.course_title().size() > 0) {

    course_title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.course_title_);
  }
}

void Course::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:main.Course)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Course::CopyFrom(const Course& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:main.Course)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Course::IsInitialized() const {

  return true;
}

void Course::Swap(Course* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Course::InternalSwap(Course* other) {
  course_cover_.Swap(&other->course_cover_);
  course_id_.Swap(&other->course_id_);
  course_title_.Swap(&other->course_title_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Course::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Course_descriptor_;
  metadata.reflection = Course_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Course

// optional string course_cover = 1;
void Course::clear_course_cover() {
  course_cover_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Course::course_cover() const {
  // @@protoc_insertion_point(field_get:main.Course.course_cover)
  return course_cover_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Course::set_course_cover(const ::std::string& value) {
  
  course_cover_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:main.Course.course_cover)
}
void Course::set_course_cover(const char* value) {
  
  course_cover_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:main.Course.course_cover)
}
void Course::set_course_cover(const char* value, size_t size) {
  
  course_cover_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:main.Course.course_cover)
}
::std::string* Course::mutable_course_cover() {
  
  // @@protoc_insertion_point(field_mutable:main.Course.course_cover)
  return course_cover_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Course::release_course_cover() {
  // @@protoc_insertion_point(field_release:main.Course.course_cover)
  
  return course_cover_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Course::set_allocated_course_cover(::std::string* course_cover) {
  if (course_cover != NULL) {
    
  } else {
    
  }
  course_cover_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), course_cover);
  // @@protoc_insertion_point(field_set_allocated:main.Course.course_cover)
}

// optional string course_id = 2;
void Course::clear_course_id() {
  course_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Course::course_id() const {
  // @@protoc_insertion_point(field_get:main.Course.course_id)
  return course_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Course::set_course_id(const ::std::string& value) {
  
  course_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:main.Course.course_id)
}
void Course::set_course_id(const char* value) {
  
  course_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:main.Course.course_id)
}
void Course::set_course_id(const char* value, size_t size) {
  
  course_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:main.Course.course_id)
}
::std::string* Course::mutable_course_id() {
  
  // @@protoc_insertion_point(field_mutable:main.Course.course_id)
  return course_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Course::release_course_id() {
  // @@protoc_insertion_point(field_release:main.Course.course_id)
  
  return course_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Course::set_allocated_course_id(::std::string* course_id) {
  if (course_id != NULL) {
    
  } else {
    
  }
  course_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), course_id);
  // @@protoc_insertion_point(field_set_allocated:main.Course.course_id)
}

// optional string course_title = 3;
void Course::clear_course_title() {
  course_title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Course::course_title() const {
  // @@protoc_insertion_point(field_get:main.Course.course_title)
  return course_title_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Course::set_course_title(const ::std::string& value) {
  
  course_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:main.Course.course_title)
}
void Course::set_course_title(const char* value) {
  
  course_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:main.Course.course_title)
}
void Course::set_course_title(const char* value, size_t size) {
  
  course_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:main.Course.course_title)
}
::std::string* Course::mutable_course_title() {
  
  // @@protoc_insertion_point(field_mutable:main.Course.course_title)
  return course_title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Course::release_course_title() {
  // @@protoc_insertion_point(field_release:main.Course.course_title)
  
  return course_title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Course::set_allocated_course_title(::std::string* course_title) {
  if (course_title != NULL) {
    
  } else {
    
  }
  course_title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), course_title);
  // @@protoc_insertion_point(field_set_allocated:main.Course.course_title)
}

inline const Course* Course::internal_default_instance() {
  return &Course_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace main

// @@protoc_insertion_point(global_scope)
