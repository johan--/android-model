// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_my_collect.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "msg_my_collect.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace personal {

namespace {

const ::google::protobuf::Descriptor* MyCollectRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MyCollectRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MyCollectResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MyCollectResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CollectBody_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CollectBody_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_msg_5fmy_5fcollect_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_msg_5fmy_5fcollect_2eproto() {
  protobuf_AddDesc_msg_5fmy_5fcollect_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "msg_my_collect.proto");
  GOOGLE_CHECK(file != NULL);
  MyCollectRequest_descriptor_ = file->message_type(0);
  static const int MyCollectRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyCollectRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyCollectRequest, page_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyCollectRequest, page_size_),
  };
  MyCollectRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MyCollectRequest_descriptor_,
      MyCollectRequest::internal_default_instance(),
      MyCollectRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(MyCollectRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyCollectRequest, _internal_metadata_));
  MyCollectResponse_descriptor_ = file->message_type(1);
  static const int MyCollectResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyCollectResponse, results_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyCollectResponse, has_more_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyCollectResponse, total_count_),
  };
  MyCollectResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MyCollectResponse_descriptor_,
      MyCollectResponse::internal_default_instance(),
      MyCollectResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(MyCollectResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyCollectResponse, _internal_metadata_));
  CollectBody_descriptor_ = file->message_type(2);
  static const int CollectBody_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectBody, docu_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectBody, docu_title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectBody, add_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectBody, star_level_),
  };
  CollectBody_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CollectBody_descriptor_,
      CollectBody::internal_default_instance(),
      CollectBody_offsets_,
      -1,
      -1,
      -1,
      sizeof(CollectBody),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectBody, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_msg_5fmy_5fcollect_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MyCollectRequest_descriptor_, MyCollectRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MyCollectResponse_descriptor_, MyCollectResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CollectBody_descriptor_, CollectBody::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_msg_5fmy_5fcollect_2eproto() {
  MyCollectRequest_default_instance_.Shutdown();
  delete MyCollectRequest_reflection_;
  MyCollectResponse_default_instance_.Shutdown();
  delete MyCollectResponse_reflection_;
  CollectBody_default_instance_.Shutdown();
  delete CollectBody_reflection_;
}

void protobuf_InitDefaults_msg_5fmy_5fcollect_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::personal::protobuf_InitDefaults_any_2eproto();
  ::google::protobuf::internal::GetEmptyString();
  MyCollectRequest_default_instance_.DefaultConstruct();
  MyCollectResponse_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  CollectBody_default_instance_.DefaultConstruct();
  MyCollectRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  MyCollectResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  CollectBody_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_msg_5fmy_5fcollect_2eproto_once_);
void protobuf_InitDefaults_msg_5fmy_5fcollect_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_msg_5fmy_5fcollect_2eproto_once_,
                 &protobuf_InitDefaults_msg_5fmy_5fcollect_2eproto_impl);
}
void protobuf_AddDesc_msg_5fmy_5fcollect_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_msg_5fmy_5fcollect_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024msg_my_collect.proto\022\010personal\032\tany.pr"
    "oto\"K\n\020MyCollectRequest\022\017\n\007user_id\030\001 \001(\t"
    "\022\023\n\013page_number\030\002 \001(\005\022\021\n\tpage_size\030\003 \001(\005"
    "\"Z\n\021MyCollectResponse\022\036\n\007results\030\001 \003(\0132\r"
    ".personal.Any\022\020\n\010has_more\030\002 \001(\010\022\023\n\013total"
    "_count\030\003 \001(\005\"X\n\013CollectBody\022\017\n\007docu_id\030\001"
    " \001(\t\022\022\n\ndocu_title\030\002 \001(\t\022\020\n\010add_time\030\003 \001"
    "(\t\022\022\n\nstar_level\030\004 \001(\005B\037\n\024com.wanfang.pe"
    "rsonalP\001\242\002\004WFPRb\006proto3", 343);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "msg_my_collect.proto", &protobuf_RegisterTypes);
  ::personal::protobuf_AddDesc_any_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_msg_5fmy_5fcollect_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_msg_5fmy_5fcollect_2eproto_once_);
void protobuf_AddDesc_msg_5fmy_5fcollect_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_msg_5fmy_5fcollect_2eproto_once_,
                 &protobuf_AddDesc_msg_5fmy_5fcollect_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_msg_5fmy_5fcollect_2eproto {
  StaticDescriptorInitializer_msg_5fmy_5fcollect_2eproto() {
    protobuf_AddDesc_msg_5fmy_5fcollect_2eproto();
  }
} static_descriptor_initializer_msg_5fmy_5fcollect_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MyCollectRequest::kUserIdFieldNumber;
const int MyCollectRequest::kPageNumberFieldNumber;
const int MyCollectRequest::kPageSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MyCollectRequest::MyCollectRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_msg_5fmy_5fcollect_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:personal.MyCollectRequest)
}

void MyCollectRequest::InitAsDefaultInstance() {
}

MyCollectRequest::MyCollectRequest(const MyCollectRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:personal.MyCollectRequest)
}

void MyCollectRequest::SharedCtor() {
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&page_number_, 0, reinterpret_cast<char*>(&page_size_) -
    reinterpret_cast<char*>(&page_number_) + sizeof(page_size_));
  _cached_size_ = 0;
}

MyCollectRequest::~MyCollectRequest() {
  // @@protoc_insertion_point(destructor:personal.MyCollectRequest)
  SharedDtor();
}

void MyCollectRequest::SharedDtor() {
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MyCollectRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MyCollectRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MyCollectRequest_descriptor_;
}

const MyCollectRequest& MyCollectRequest::default_instance() {
  protobuf_InitDefaults_msg_5fmy_5fcollect_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<MyCollectRequest> MyCollectRequest_default_instance_;

MyCollectRequest* MyCollectRequest::New(::google::protobuf::Arena* arena) const {
  MyCollectRequest* n = new MyCollectRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MyCollectRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:personal.MyCollectRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MyCollectRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MyCollectRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(page_number_, page_size_);
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool MyCollectRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:personal.MyCollectRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string user_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "personal.MyCollectRequest.user_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_page_number;
        break;
      }

      // optional int32 page_number = 2;
      case 2: {
        if (tag == 16) {
         parse_page_number:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_number_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_page_size;
        break;
      }

      // optional int32 page_size = 3;
      case 3: {
        if (tag == 24) {
         parse_page_size:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_size_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:personal.MyCollectRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:personal.MyCollectRequest)
  return false;
#undef DO_
}

void MyCollectRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:personal.MyCollectRequest)
  // optional string user_id = 1;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "personal.MyCollectRequest.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user_id(), output);
  }

  // optional int32 page_number = 2;
  if (this->page_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->page_number(), output);
  }

  // optional int32 page_size = 3;
  if (this->page_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->page_size(), output);
  }

  // @@protoc_insertion_point(serialize_end:personal.MyCollectRequest)
}

::google::protobuf::uint8* MyCollectRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:personal.MyCollectRequest)
  // optional string user_id = 1;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "personal.MyCollectRequest.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_id(), target);
  }

  // optional int32 page_number = 2;
  if (this->page_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->page_number(), target);
  }

  // optional int32 page_size = 3;
  if (this->page_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->page_size(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:personal.MyCollectRequest)
  return target;
}

size_t MyCollectRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:personal.MyCollectRequest)
  size_t total_size = 0;

  // optional string user_id = 1;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  // optional int32 page_number = 2;
  if (this->page_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->page_number());
  }

  // optional int32 page_size = 3;
  if (this->page_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->page_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MyCollectRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:personal.MyCollectRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MyCollectRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MyCollectRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:personal.MyCollectRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:personal.MyCollectRequest)
    UnsafeMergeFrom(*source);
  }
}

void MyCollectRequest::MergeFrom(const MyCollectRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:personal.MyCollectRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void MyCollectRequest::UnsafeMergeFrom(const MyCollectRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.user_id().size() > 0) {

    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  if (from.page_number() != 0) {
    set_page_number(from.page_number());
  }
  if (from.page_size() != 0) {
    set_page_size(from.page_size());
  }
}

void MyCollectRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:personal.MyCollectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MyCollectRequest::CopyFrom(const MyCollectRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:personal.MyCollectRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool MyCollectRequest::IsInitialized() const {

  return true;
}

void MyCollectRequest::Swap(MyCollectRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MyCollectRequest::InternalSwap(MyCollectRequest* other) {
  user_id_.Swap(&other->user_id_);
  std::swap(page_number_, other->page_number_);
  std::swap(page_size_, other->page_size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MyCollectRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MyCollectRequest_descriptor_;
  metadata.reflection = MyCollectRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MyCollectRequest

// optional string user_id = 1;
void MyCollectRequest::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MyCollectRequest::user_id() const {
  // @@protoc_insertion_point(field_get:personal.MyCollectRequest.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MyCollectRequest::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:personal.MyCollectRequest.user_id)
}
void MyCollectRequest::set_user_id(const char* value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:personal.MyCollectRequest.user_id)
}
void MyCollectRequest::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:personal.MyCollectRequest.user_id)
}
::std::string* MyCollectRequest::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:personal.MyCollectRequest.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MyCollectRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:personal.MyCollectRequest.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MyCollectRequest::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:personal.MyCollectRequest.user_id)
}

// optional int32 page_number = 2;
void MyCollectRequest::clear_page_number() {
  page_number_ = 0;
}
::google::protobuf::int32 MyCollectRequest::page_number() const {
  // @@protoc_insertion_point(field_get:personal.MyCollectRequest.page_number)
  return page_number_;
}
void MyCollectRequest::set_page_number(::google::protobuf::int32 value) {
  
  page_number_ = value;
  // @@protoc_insertion_point(field_set:personal.MyCollectRequest.page_number)
}

// optional int32 page_size = 3;
void MyCollectRequest::clear_page_size() {
  page_size_ = 0;
}
::google::protobuf::int32 MyCollectRequest::page_size() const {
  // @@protoc_insertion_point(field_get:personal.MyCollectRequest.page_size)
  return page_size_;
}
void MyCollectRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:personal.MyCollectRequest.page_size)
}

inline const MyCollectRequest* MyCollectRequest::internal_default_instance() {
  return &MyCollectRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MyCollectResponse::kResultsFieldNumber;
const int MyCollectResponse::kHasMoreFieldNumber;
const int MyCollectResponse::kTotalCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MyCollectResponse::MyCollectResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_msg_5fmy_5fcollect_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:personal.MyCollectResponse)
}

void MyCollectResponse::InitAsDefaultInstance() {
}

MyCollectResponse::MyCollectResponse(const MyCollectResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:personal.MyCollectResponse)
}

void MyCollectResponse::SharedCtor() {
  ::memset(&has_more_, 0, reinterpret_cast<char*>(&total_count_) -
    reinterpret_cast<char*>(&has_more_) + sizeof(total_count_));
  _cached_size_ = 0;
}

MyCollectResponse::~MyCollectResponse() {
  // @@protoc_insertion_point(destructor:personal.MyCollectResponse)
  SharedDtor();
}

void MyCollectResponse::SharedDtor() {
}

void MyCollectResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MyCollectResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MyCollectResponse_descriptor_;
}

const MyCollectResponse& MyCollectResponse::default_instance() {
  protobuf_InitDefaults_msg_5fmy_5fcollect_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<MyCollectResponse> MyCollectResponse_default_instance_;

MyCollectResponse* MyCollectResponse::New(::google::protobuf::Arena* arena) const {
  MyCollectResponse* n = new MyCollectResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MyCollectResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:personal.MyCollectResponse)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MyCollectResponse, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MyCollectResponse*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(has_more_, total_count_);

#undef ZR_HELPER_
#undef ZR_

  results_.Clear();
}

bool MyCollectResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:personal.MyCollectResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .personal.Any results = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_results:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_results()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_results;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(16)) goto parse_has_more;
        break;
      }

      // optional bool has_more = 2;
      case 2: {
        if (tag == 16) {
         parse_has_more:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_more_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_total_count;
        break;
      }

      // optional int32 total_count = 3;
      case 3: {
        if (tag == 24) {
         parse_total_count:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_count_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:personal.MyCollectResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:personal.MyCollectResponse)
  return false;
#undef DO_
}

void MyCollectResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:personal.MyCollectResponse)
  // repeated .personal.Any results = 1;
  for (unsigned int i = 0, n = this->results_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->results(i), output);
  }

  // optional bool has_more = 2;
  if (this->has_more() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->has_more(), output);
  }

  // optional int32 total_count = 3;
  if (this->total_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->total_count(), output);
  }

  // @@protoc_insertion_point(serialize_end:personal.MyCollectResponse)
}

::google::protobuf::uint8* MyCollectResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:personal.MyCollectResponse)
  // repeated .personal.Any results = 1;
  for (unsigned int i = 0, n = this->results_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->results(i), false, target);
  }

  // optional bool has_more = 2;
  if (this->has_more() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->has_more(), target);
  }

  // optional int32 total_count = 3;
  if (this->total_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->total_count(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:personal.MyCollectResponse)
  return target;
}

size_t MyCollectResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:personal.MyCollectResponse)
  size_t total_size = 0;

  // optional bool has_more = 2;
  if (this->has_more() != 0) {
    total_size += 1 + 1;
  }

  // optional int32 total_count = 3;
  if (this->total_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->total_count());
  }

  // repeated .personal.Any results = 1;
  {
    unsigned int count = this->results_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->results(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MyCollectResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:personal.MyCollectResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MyCollectResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MyCollectResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:personal.MyCollectResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:personal.MyCollectResponse)
    UnsafeMergeFrom(*source);
  }
}

void MyCollectResponse::MergeFrom(const MyCollectResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:personal.MyCollectResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void MyCollectResponse::UnsafeMergeFrom(const MyCollectResponse& from) {
  GOOGLE_DCHECK(&from != this);
  results_.MergeFrom(from.results_);
  if (from.has_more() != 0) {
    set_has_more(from.has_more());
  }
  if (from.total_count() != 0) {
    set_total_count(from.total_count());
  }
}

void MyCollectResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:personal.MyCollectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MyCollectResponse::CopyFrom(const MyCollectResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:personal.MyCollectResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool MyCollectResponse::IsInitialized() const {

  return true;
}

void MyCollectResponse::Swap(MyCollectResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MyCollectResponse::InternalSwap(MyCollectResponse* other) {
  results_.UnsafeArenaSwap(&other->results_);
  std::swap(has_more_, other->has_more_);
  std::swap(total_count_, other->total_count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MyCollectResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MyCollectResponse_descriptor_;
  metadata.reflection = MyCollectResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MyCollectResponse

// repeated .personal.Any results = 1;
int MyCollectResponse::results_size() const {
  return results_.size();
}
void MyCollectResponse::clear_results() {
  results_.Clear();
}
const ::personal::Any& MyCollectResponse::results(int index) const {
  // @@protoc_insertion_point(field_get:personal.MyCollectResponse.results)
  return results_.Get(index);
}
::personal::Any* MyCollectResponse::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:personal.MyCollectResponse.results)
  return results_.Mutable(index);
}
::personal::Any* MyCollectResponse::add_results() {
  // @@protoc_insertion_point(field_add:personal.MyCollectResponse.results)
  return results_.Add();
}
::google::protobuf::RepeatedPtrField< ::personal::Any >*
MyCollectResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:personal.MyCollectResponse.results)
  return &results_;
}
const ::google::protobuf::RepeatedPtrField< ::personal::Any >&
MyCollectResponse::results() const {
  // @@protoc_insertion_point(field_list:personal.MyCollectResponse.results)
  return results_;
}

// optional bool has_more = 2;
void MyCollectResponse::clear_has_more() {
  has_more_ = false;
}
bool MyCollectResponse::has_more() const {
  // @@protoc_insertion_point(field_get:personal.MyCollectResponse.has_more)
  return has_more_;
}
void MyCollectResponse::set_has_more(bool value) {
  
  has_more_ = value;
  // @@protoc_insertion_point(field_set:personal.MyCollectResponse.has_more)
}

// optional int32 total_count = 3;
void MyCollectResponse::clear_total_count() {
  total_count_ = 0;
}
::google::protobuf::int32 MyCollectResponse::total_count() const {
  // @@protoc_insertion_point(field_get:personal.MyCollectResponse.total_count)
  return total_count_;
}
void MyCollectResponse::set_total_count(::google::protobuf::int32 value) {
  
  total_count_ = value;
  // @@protoc_insertion_point(field_set:personal.MyCollectResponse.total_count)
}

inline const MyCollectResponse* MyCollectResponse::internal_default_instance() {
  return &MyCollectResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CollectBody::kDocuIdFieldNumber;
const int CollectBody::kDocuTitleFieldNumber;
const int CollectBody::kAddTimeFieldNumber;
const int CollectBody::kStarLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CollectBody::CollectBody()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_msg_5fmy_5fcollect_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:personal.CollectBody)
}

void CollectBody::InitAsDefaultInstance() {
}

CollectBody::CollectBody(const CollectBody& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:personal.CollectBody)
}

void CollectBody::SharedCtor() {
  docu_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  docu_title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  add_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  star_level_ = 0;
  _cached_size_ = 0;
}

CollectBody::~CollectBody() {
  // @@protoc_insertion_point(destructor:personal.CollectBody)
  SharedDtor();
}

void CollectBody::SharedDtor() {
  docu_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  docu_title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  add_time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CollectBody::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CollectBody::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CollectBody_descriptor_;
}

const CollectBody& CollectBody::default_instance() {
  protobuf_InitDefaults_msg_5fmy_5fcollect_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CollectBody> CollectBody_default_instance_;

CollectBody* CollectBody::New(::google::protobuf::Arena* arena) const {
  CollectBody* n = new CollectBody;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CollectBody::Clear() {
// @@protoc_insertion_point(message_clear_start:personal.CollectBody)
  docu_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  docu_title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  add_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  star_level_ = 0;
}

bool CollectBody::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:personal.CollectBody)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string docu_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_docu_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->docu_id().data(), this->docu_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "personal.CollectBody.docu_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_docu_title;
        break;
      }

      // optional string docu_title = 2;
      case 2: {
        if (tag == 18) {
         parse_docu_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_docu_title()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->docu_title().data(), this->docu_title().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "personal.CollectBody.docu_title"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_add_time;
        break;
      }

      // optional string add_time = 3;
      case 3: {
        if (tag == 26) {
         parse_add_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_add_time()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->add_time().data(), this->add_time().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "personal.CollectBody.add_time"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_star_level;
        break;
      }

      // optional int32 star_level = 4;
      case 4: {
        if (tag == 32) {
         parse_star_level:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_level_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:personal.CollectBody)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:personal.CollectBody)
  return false;
#undef DO_
}

void CollectBody::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:personal.CollectBody)
  // optional string docu_id = 1;
  if (this->docu_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->docu_id().data(), this->docu_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "personal.CollectBody.docu_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->docu_id(), output);
  }

  // optional string docu_title = 2;
  if (this->docu_title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->docu_title().data(), this->docu_title().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "personal.CollectBody.docu_title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->docu_title(), output);
  }

  // optional string add_time = 3;
  if (this->add_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->add_time().data(), this->add_time().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "personal.CollectBody.add_time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->add_time(), output);
  }

  // optional int32 star_level = 4;
  if (this->star_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->star_level(), output);
  }

  // @@protoc_insertion_point(serialize_end:personal.CollectBody)
}

::google::protobuf::uint8* CollectBody::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:personal.CollectBody)
  // optional string docu_id = 1;
  if (this->docu_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->docu_id().data(), this->docu_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "personal.CollectBody.docu_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->docu_id(), target);
  }

  // optional string docu_title = 2;
  if (this->docu_title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->docu_title().data(), this->docu_title().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "personal.CollectBody.docu_title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->docu_title(), target);
  }

  // optional string add_time = 3;
  if (this->add_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->add_time().data(), this->add_time().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "personal.CollectBody.add_time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->add_time(), target);
  }

  // optional int32 star_level = 4;
  if (this->star_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->star_level(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:personal.CollectBody)
  return target;
}

size_t CollectBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:personal.CollectBody)
  size_t total_size = 0;

  // optional string docu_id = 1;
  if (this->docu_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->docu_id());
  }

  // optional string docu_title = 2;
  if (this->docu_title().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->docu_title());
  }

  // optional string add_time = 3;
  if (this->add_time().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->add_time());
  }

  // optional int32 star_level = 4;
  if (this->star_level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->star_level());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CollectBody::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:personal.CollectBody)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CollectBody* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CollectBody>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:personal.CollectBody)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:personal.CollectBody)
    UnsafeMergeFrom(*source);
  }
}

void CollectBody::MergeFrom(const CollectBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:personal.CollectBody)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CollectBody::UnsafeMergeFrom(const CollectBody& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.docu_id().size() > 0) {

    docu_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.docu_id_);
  }
  if (from.docu_title().size() > 0) {

    docu_title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.docu_title_);
  }
  if (from.add_time().size() > 0) {

    add_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.add_time_);
  }
  if (from.star_level() != 0) {
    set_star_level(from.star_level());
  }
}

void CollectBody::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:personal.CollectBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CollectBody::CopyFrom(const CollectBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:personal.CollectBody)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CollectBody::IsInitialized() const {

  return true;
}

void CollectBody::Swap(CollectBody* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CollectBody::InternalSwap(CollectBody* other) {
  docu_id_.Swap(&other->docu_id_);
  docu_title_.Swap(&other->docu_title_);
  add_time_.Swap(&other->add_time_);
  std::swap(star_level_, other->star_level_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CollectBody::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CollectBody_descriptor_;
  metadata.reflection = CollectBody_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CollectBody

// optional string docu_id = 1;
void CollectBody::clear_docu_id() {
  docu_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CollectBody::docu_id() const {
  // @@protoc_insertion_point(field_get:personal.CollectBody.docu_id)
  return docu_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CollectBody::set_docu_id(const ::std::string& value) {
  
  docu_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:personal.CollectBody.docu_id)
}
void CollectBody::set_docu_id(const char* value) {
  
  docu_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:personal.CollectBody.docu_id)
}
void CollectBody::set_docu_id(const char* value, size_t size) {
  
  docu_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:personal.CollectBody.docu_id)
}
::std::string* CollectBody::mutable_docu_id() {
  
  // @@protoc_insertion_point(field_mutable:personal.CollectBody.docu_id)
  return docu_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CollectBody::release_docu_id() {
  // @@protoc_insertion_point(field_release:personal.CollectBody.docu_id)
  
  return docu_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CollectBody::set_allocated_docu_id(::std::string* docu_id) {
  if (docu_id != NULL) {
    
  } else {
    
  }
  docu_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), docu_id);
  // @@protoc_insertion_point(field_set_allocated:personal.CollectBody.docu_id)
}

// optional string docu_title = 2;
void CollectBody::clear_docu_title() {
  docu_title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CollectBody::docu_title() const {
  // @@protoc_insertion_point(field_get:personal.CollectBody.docu_title)
  return docu_title_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CollectBody::set_docu_title(const ::std::string& value) {
  
  docu_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:personal.CollectBody.docu_title)
}
void CollectBody::set_docu_title(const char* value) {
  
  docu_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:personal.CollectBody.docu_title)
}
void CollectBody::set_docu_title(const char* value, size_t size) {
  
  docu_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:personal.CollectBody.docu_title)
}
::std::string* CollectBody::mutable_docu_title() {
  
  // @@protoc_insertion_point(field_mutable:personal.CollectBody.docu_title)
  return docu_title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CollectBody::release_docu_title() {
  // @@protoc_insertion_point(field_release:personal.CollectBody.docu_title)
  
  return docu_title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CollectBody::set_allocated_docu_title(::std::string* docu_title) {
  if (docu_title != NULL) {
    
  } else {
    
  }
  docu_title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), docu_title);
  // @@protoc_insertion_point(field_set_allocated:personal.CollectBody.docu_title)
}

// optional string add_time = 3;
void CollectBody::clear_add_time() {
  add_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CollectBody::add_time() const {
  // @@protoc_insertion_point(field_get:personal.CollectBody.add_time)
  return add_time_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CollectBody::set_add_time(const ::std::string& value) {
  
  add_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:personal.CollectBody.add_time)
}
void CollectBody::set_add_time(const char* value) {
  
  add_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:personal.CollectBody.add_time)
}
void CollectBody::set_add_time(const char* value, size_t size) {
  
  add_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:personal.CollectBody.add_time)
}
::std::string* CollectBody::mutable_add_time() {
  
  // @@protoc_insertion_point(field_mutable:personal.CollectBody.add_time)
  return add_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CollectBody::release_add_time() {
  // @@protoc_insertion_point(field_release:personal.CollectBody.add_time)
  
  return add_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CollectBody::set_allocated_add_time(::std::string* add_time) {
  if (add_time != NULL) {
    
  } else {
    
  }
  add_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), add_time);
  // @@protoc_insertion_point(field_set_allocated:personal.CollectBody.add_time)
}

// optional int32 star_level = 4;
void CollectBody::clear_star_level() {
  star_level_ = 0;
}
::google::protobuf::int32 CollectBody::star_level() const {
  // @@protoc_insertion_point(field_get:personal.CollectBody.star_level)
  return star_level_;
}
void CollectBody::set_star_level(::google::protobuf::int32 value) {
  
  star_level_ = value;
  // @@protoc_insertion_point(field_set:personal.CollectBody.star_level)
}

inline const CollectBody* CollectBody::internal_default_instance() {
  return &CollectBody_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace personal

// @@protoc_insertion_point(global_scope)
