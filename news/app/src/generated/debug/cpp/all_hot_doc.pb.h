// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: all_hot_doc.proto

#ifndef PROTOBUF_all_5fhot_5fdoc_2eproto__INCLUDED
#define PROTOBUF_all_5fhot_5fdoc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace main {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_all_5fhot_5fdoc_2eproto();
void protobuf_InitDefaults_all_5fhot_5fdoc_2eproto();
void protobuf_AssignDesc_all_5fhot_5fdoc_2eproto();
void protobuf_ShutdownFile_all_5fhot_5fdoc_2eproto();

class HotDoc;
class HotDocReply;
class HotDocRequest;

// ===================================================================

class HotDocRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:main.HotDocRequest) */ {
 public:
  HotDocRequest();
  virtual ~HotDocRequest();

  HotDocRequest(const HotDocRequest& from);

  inline HotDocRequest& operator=(const HotDocRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HotDocRequest& default_instance();

  static const HotDocRequest* internal_default_instance();

  void Swap(HotDocRequest* other);

  // implements Message ----------------------------------------------

  inline HotDocRequest* New() const { return New(NULL); }

  HotDocRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HotDocRequest& from);
  void MergeFrom(const HotDocRequest& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HotDocRequest* other);
  void UnsafeMergeFrom(const HotDocRequest& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string page_number = 1;
  void clear_page_number();
  static const int kPageNumberFieldNumber = 1;
  const ::std::string& page_number() const;
  void set_page_number(const ::std::string& value);
  void set_page_number(const char* value);
  void set_page_number(const char* value, size_t size);
  ::std::string* mutable_page_number();
  ::std::string* release_page_number();
  void set_allocated_page_number(::std::string* page_number);

  // optional string page_size = 2;
  void clear_page_size();
  static const int kPageSizeFieldNumber = 2;
  const ::std::string& page_size() const;
  void set_page_size(const ::std::string& value);
  void set_page_size(const char* value);
  void set_page_size(const char* value, size_t size);
  ::std::string* mutable_page_size();
  ::std::string* release_page_size();
  void set_allocated_page_size(::std::string* page_size);

  // @@protoc_insertion_point(class_scope:main.HotDocRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr page_number_;
  ::google::protobuf::internal::ArenaStringPtr page_size_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_all_5fhot_5fdoc_2eproto_impl();
  friend void  protobuf_AddDesc_all_5fhot_5fdoc_2eproto_impl();
  friend void protobuf_AssignDesc_all_5fhot_5fdoc_2eproto();
  friend void protobuf_ShutdownFile_all_5fhot_5fdoc_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<HotDocRequest> HotDocRequest_default_instance_;

// -------------------------------------------------------------------

class HotDocReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:main.HotDocReply) */ {
 public:
  HotDocReply();
  virtual ~HotDocReply();

  HotDocReply(const HotDocReply& from);

  inline HotDocReply& operator=(const HotDocReply& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HotDocReply& default_instance();

  static const HotDocReply* internal_default_instance();

  void Swap(HotDocReply* other);

  // implements Message ----------------------------------------------

  inline HotDocReply* New() const { return New(NULL); }

  HotDocReply* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HotDocReply& from);
  void MergeFrom(const HotDocReply& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HotDocReply* other);
  void UnsafeMergeFrom(const HotDocReply& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .main.HotDoc hot_doc = 1;
  int hot_doc_size() const;
  void clear_hot_doc();
  static const int kHotDocFieldNumber = 1;
  const ::main::HotDoc& hot_doc(int index) const;
  ::main::HotDoc* mutable_hot_doc(int index);
  ::main::HotDoc* add_hot_doc();
  ::google::protobuf::RepeatedPtrField< ::main::HotDoc >*
      mutable_hot_doc();
  const ::google::protobuf::RepeatedPtrField< ::main::HotDoc >&
      hot_doc() const;

  // @@protoc_insertion_point(class_scope:main.HotDocReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::main::HotDoc > hot_doc_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_all_5fhot_5fdoc_2eproto_impl();
  friend void  protobuf_AddDesc_all_5fhot_5fdoc_2eproto_impl();
  friend void protobuf_AssignDesc_all_5fhot_5fdoc_2eproto();
  friend void protobuf_ShutdownFile_all_5fhot_5fdoc_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<HotDocReply> HotDocReply_default_instance_;

// -------------------------------------------------------------------

class HotDoc : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:main.HotDoc) */ {
 public:
  HotDoc();
  virtual ~HotDoc();

  HotDoc(const HotDoc& from);

  inline HotDoc& operator=(const HotDoc& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HotDoc& default_instance();

  static const HotDoc* internal_default_instance();

  void Swap(HotDoc* other);

  // implements Message ----------------------------------------------

  inline HotDoc* New() const { return New(NULL); }

  HotDoc* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HotDoc& from);
  void MergeFrom(const HotDoc& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HotDoc* other);
  void UnsafeMergeFrom(const HotDoc& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string docu_id = 1;
  void clear_docu_id();
  static const int kDocuIdFieldNumber = 1;
  const ::std::string& docu_id() const;
  void set_docu_id(const ::std::string& value);
  void set_docu_id(const char* value);
  void set_docu_id(const char* value, size_t size);
  ::std::string* mutable_docu_id();
  ::std::string* release_docu_id();
  void set_allocated_docu_id(::std::string* docu_id);

  // optional string docu_title = 2;
  void clear_docu_title();
  static const int kDocuTitleFieldNumber = 2;
  const ::std::string& docu_title() const;
  void set_docu_title(const ::std::string& value);
  void set_docu_title(const char* value);
  void set_docu_title(const char* value, size_t size);
  ::std::string* mutable_docu_title();
  ::std::string* release_docu_title();
  void set_allocated_docu_title(::std::string* docu_title);

  // @@protoc_insertion_point(class_scope:main.HotDoc)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr docu_id_;
  ::google::protobuf::internal::ArenaStringPtr docu_title_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_all_5fhot_5fdoc_2eproto_impl();
  friend void  protobuf_AddDesc_all_5fhot_5fdoc_2eproto_impl();
  friend void protobuf_AssignDesc_all_5fhot_5fdoc_2eproto();
  friend void protobuf_ShutdownFile_all_5fhot_5fdoc_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<HotDoc> HotDoc_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// HotDocRequest

// optional string page_number = 1;
inline void HotDocRequest::clear_page_number() {
  page_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HotDocRequest::page_number() const {
  // @@protoc_insertion_point(field_get:main.HotDocRequest.page_number)
  return page_number_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HotDocRequest::set_page_number(const ::std::string& value) {
  
  page_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:main.HotDocRequest.page_number)
}
inline void HotDocRequest::set_page_number(const char* value) {
  
  page_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:main.HotDocRequest.page_number)
}
inline void HotDocRequest::set_page_number(const char* value, size_t size) {
  
  page_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:main.HotDocRequest.page_number)
}
inline ::std::string* HotDocRequest::mutable_page_number() {
  
  // @@protoc_insertion_point(field_mutable:main.HotDocRequest.page_number)
  return page_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HotDocRequest::release_page_number() {
  // @@protoc_insertion_point(field_release:main.HotDocRequest.page_number)
  
  return page_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HotDocRequest::set_allocated_page_number(::std::string* page_number) {
  if (page_number != NULL) {
    
  } else {
    
  }
  page_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_number);
  // @@protoc_insertion_point(field_set_allocated:main.HotDocRequest.page_number)
}

// optional string page_size = 2;
inline void HotDocRequest::clear_page_size() {
  page_size_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HotDocRequest::page_size() const {
  // @@protoc_insertion_point(field_get:main.HotDocRequest.page_size)
  return page_size_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HotDocRequest::set_page_size(const ::std::string& value) {
  
  page_size_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:main.HotDocRequest.page_size)
}
inline void HotDocRequest::set_page_size(const char* value) {
  
  page_size_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:main.HotDocRequest.page_size)
}
inline void HotDocRequest::set_page_size(const char* value, size_t size) {
  
  page_size_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:main.HotDocRequest.page_size)
}
inline ::std::string* HotDocRequest::mutable_page_size() {
  
  // @@protoc_insertion_point(field_mutable:main.HotDocRequest.page_size)
  return page_size_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HotDocRequest::release_page_size() {
  // @@protoc_insertion_point(field_release:main.HotDocRequest.page_size)
  
  return page_size_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HotDocRequest::set_allocated_page_size(::std::string* page_size) {
  if (page_size != NULL) {
    
  } else {
    
  }
  page_size_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_size);
  // @@protoc_insertion_point(field_set_allocated:main.HotDocRequest.page_size)
}

inline const HotDocRequest* HotDocRequest::internal_default_instance() {
  return &HotDocRequest_default_instance_.get();
}
// -------------------------------------------------------------------

// HotDocReply

// repeated .main.HotDoc hot_doc = 1;
inline int HotDocReply::hot_doc_size() const {
  return hot_doc_.size();
}
inline void HotDocReply::clear_hot_doc() {
  hot_doc_.Clear();
}
inline const ::main::HotDoc& HotDocReply::hot_doc(int index) const {
  // @@protoc_insertion_point(field_get:main.HotDocReply.hot_doc)
  return hot_doc_.Get(index);
}
inline ::main::HotDoc* HotDocReply::mutable_hot_doc(int index) {
  // @@protoc_insertion_point(field_mutable:main.HotDocReply.hot_doc)
  return hot_doc_.Mutable(index);
}
inline ::main::HotDoc* HotDocReply::add_hot_doc() {
  // @@protoc_insertion_point(field_add:main.HotDocReply.hot_doc)
  return hot_doc_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::main::HotDoc >*
HotDocReply::mutable_hot_doc() {
  // @@protoc_insertion_point(field_mutable_list:main.HotDocReply.hot_doc)
  return &hot_doc_;
}
inline const ::google::protobuf::RepeatedPtrField< ::main::HotDoc >&
HotDocReply::hot_doc() const {
  // @@protoc_insertion_point(field_list:main.HotDocReply.hot_doc)
  return hot_doc_;
}

inline const HotDocReply* HotDocReply::internal_default_instance() {
  return &HotDocReply_default_instance_.get();
}
// -------------------------------------------------------------------

// HotDoc

// optional string docu_id = 1;
inline void HotDoc::clear_docu_id() {
  docu_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HotDoc::docu_id() const {
  // @@protoc_insertion_point(field_get:main.HotDoc.docu_id)
  return docu_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HotDoc::set_docu_id(const ::std::string& value) {
  
  docu_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:main.HotDoc.docu_id)
}
inline void HotDoc::set_docu_id(const char* value) {
  
  docu_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:main.HotDoc.docu_id)
}
inline void HotDoc::set_docu_id(const char* value, size_t size) {
  
  docu_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:main.HotDoc.docu_id)
}
inline ::std::string* HotDoc::mutable_docu_id() {
  
  // @@protoc_insertion_point(field_mutable:main.HotDoc.docu_id)
  return docu_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HotDoc::release_docu_id() {
  // @@protoc_insertion_point(field_release:main.HotDoc.docu_id)
  
  return docu_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HotDoc::set_allocated_docu_id(::std::string* docu_id) {
  if (docu_id != NULL) {
    
  } else {
    
  }
  docu_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), docu_id);
  // @@protoc_insertion_point(field_set_allocated:main.HotDoc.docu_id)
}

// optional string docu_title = 2;
inline void HotDoc::clear_docu_title() {
  docu_title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HotDoc::docu_title() const {
  // @@protoc_insertion_point(field_get:main.HotDoc.docu_title)
  return docu_title_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HotDoc::set_docu_title(const ::std::string& value) {
  
  docu_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:main.HotDoc.docu_title)
}
inline void HotDoc::set_docu_title(const char* value) {
  
  docu_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:main.HotDoc.docu_title)
}
inline void HotDoc::set_docu_title(const char* value, size_t size) {
  
  docu_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:main.HotDoc.docu_title)
}
inline ::std::string* HotDoc::mutable_docu_title() {
  
  // @@protoc_insertion_point(field_mutable:main.HotDoc.docu_title)
  return docu_title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HotDoc::release_docu_title() {
  // @@protoc_insertion_point(field_release:main.HotDoc.docu_title)
  
  return docu_title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HotDoc::set_allocated_docu_title(::std::string* docu_title) {
  if (docu_title != NULL) {
    
  } else {
    
  }
  docu_title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), docu_title);
  // @@protoc_insertion_point(field_set_allocated:main.HotDoc.docu_title)
}

inline const HotDoc* HotDoc::internal_default_instance() {
  return &HotDoc_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace main

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_all_5fhot_5fdoc_2eproto__INCLUDED
