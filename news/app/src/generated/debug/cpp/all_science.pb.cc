// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: all_science.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "all_science.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace main {

namespace {

const ::google::protobuf::Descriptor* AllScienceRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllScienceRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllScienceReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllScienceReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* Science_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Science_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_all_5fscience_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_all_5fscience_2eproto() {
  protobuf_AddDesc_all_5fscience_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "all_science.proto");
  GOOGLE_CHECK(file != NULL);
  AllScienceRequest_descriptor_ = file->message_type(0);
  static const int AllScienceRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllScienceRequest, page_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllScienceRequest, page_size_),
  };
  AllScienceRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AllScienceRequest_descriptor_,
      AllScienceRequest::internal_default_instance(),
      AllScienceRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(AllScienceRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllScienceRequest, _internal_metadata_));
  AllScienceReply_descriptor_ = file->message_type(1);
  static const int AllScienceReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllScienceReply, science_),
  };
  AllScienceReply_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AllScienceReply_descriptor_,
      AllScienceReply::internal_default_instance(),
      AllScienceReply_offsets_,
      -1,
      -1,
      -1,
      sizeof(AllScienceReply),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllScienceReply, _internal_metadata_));
  Science_descriptor_ = file->message_type(2);
  static const int Science_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Science, science_link_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Science, science_title_),
  };
  Science_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Science_descriptor_,
      Science::internal_default_instance(),
      Science_offsets_,
      -1,
      -1,
      -1,
      sizeof(Science),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Science, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_all_5fscience_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AllScienceRequest_descriptor_, AllScienceRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AllScienceReply_descriptor_, AllScienceReply::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Science_descriptor_, Science::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_all_5fscience_2eproto() {
  AllScienceRequest_default_instance_.Shutdown();
  delete AllScienceRequest_reflection_;
  AllScienceReply_default_instance_.Shutdown();
  delete AllScienceReply_reflection_;
  Science_default_instance_.Shutdown();
  delete Science_reflection_;
}

void protobuf_InitDefaults_all_5fscience_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  AllScienceRequest_default_instance_.DefaultConstruct();
  AllScienceReply_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Science_default_instance_.DefaultConstruct();
  AllScienceRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  AllScienceReply_default_instance_.get_mutable()->InitAsDefaultInstance();
  Science_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_all_5fscience_2eproto_once_);
void protobuf_InitDefaults_all_5fscience_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_all_5fscience_2eproto_once_,
                 &protobuf_InitDefaults_all_5fscience_2eproto_impl);
}
void protobuf_AddDesc_all_5fscience_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_all_5fscience_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021all_science.proto\022\004main\";\n\021AllScienceR"
    "equest\022\023\n\013page_number\030\001 \001(\t\022\021\n\tpage_size"
    "\030\002 \001(\t\"1\n\017AllScienceReply\022\036\n\007science\030\001 \003"
    "(\0132\r.main.Science\"6\n\007Science\022\024\n\014science_"
    "link\030\001 \001(\t\022\025\n\rscience_title\030\002 \001(\tB\022\n\020com"
    ".wanfang.mainb\006proto3", 221);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "all_science.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_all_5fscience_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_all_5fscience_2eproto_once_);
void protobuf_AddDesc_all_5fscience_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_all_5fscience_2eproto_once_,
                 &protobuf_AddDesc_all_5fscience_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_all_5fscience_2eproto {
  StaticDescriptorInitializer_all_5fscience_2eproto() {
    protobuf_AddDesc_all_5fscience_2eproto();
  }
} static_descriptor_initializer_all_5fscience_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AllScienceRequest::kPageNumberFieldNumber;
const int AllScienceRequest::kPageSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AllScienceRequest::AllScienceRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_all_5fscience_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.AllScienceRequest)
}

void AllScienceRequest::InitAsDefaultInstance() {
}

AllScienceRequest::AllScienceRequest(const AllScienceRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.AllScienceRequest)
}

void AllScienceRequest::SharedCtor() {
  page_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_size_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

AllScienceRequest::~AllScienceRequest() {
  // @@protoc_insertion_point(destructor:main.AllScienceRequest)
  SharedDtor();
}

void AllScienceRequest::SharedDtor() {
  page_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_size_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AllScienceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllScienceRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllScienceRequest_descriptor_;
}

const AllScienceRequest& AllScienceRequest::default_instance() {
  protobuf_InitDefaults_all_5fscience_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AllScienceRequest> AllScienceRequest_default_instance_;

AllScienceRequest* AllScienceRequest::New(::google::protobuf::Arena* arena) const {
  AllScienceRequest* n = new AllScienceRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AllScienceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:main.AllScienceRequest)
  page_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_size_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AllScienceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:main.AllScienceRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string page_number = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_number()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->page_number().data(), this->page_number().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "main.AllScienceRequest.page_number"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_page_size;
        break;
      }

      // optional string page_size = 2;
      case 2: {
        if (tag == 18) {
         parse_page_size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_size()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->page_size().data(), this->page_size().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "main.AllScienceRequest.page_size"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.AllScienceRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.AllScienceRequest)
  return false;
#undef DO_
}

void AllScienceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.AllScienceRequest)
  // optional string page_number = 1;
  if (this->page_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_number().data(), this->page_number().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "main.AllScienceRequest.page_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->page_number(), output);
  }

  // optional string page_size = 2;
  if (this->page_size().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_size().data(), this->page_size().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "main.AllScienceRequest.page_size");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->page_size(), output);
  }

  // @@protoc_insertion_point(serialize_end:main.AllScienceRequest)
}

::google::protobuf::uint8* AllScienceRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:main.AllScienceRequest)
  // optional string page_number = 1;
  if (this->page_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_number().data(), this->page_number().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "main.AllScienceRequest.page_number");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->page_number(), target);
  }

  // optional string page_size = 2;
  if (this->page_size().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_size().data(), this->page_size().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "main.AllScienceRequest.page_size");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->page_size(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:main.AllScienceRequest)
  return target;
}

size_t AllScienceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:main.AllScienceRequest)
  size_t total_size = 0;

  // optional string page_number = 1;
  if (this->page_number().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->page_number());
  }

  // optional string page_size = 2;
  if (this->page_size().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->page_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllScienceRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:main.AllScienceRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AllScienceRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AllScienceRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:main.AllScienceRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:main.AllScienceRequest)
    UnsafeMergeFrom(*source);
  }
}

void AllScienceRequest::MergeFrom(const AllScienceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:main.AllScienceRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AllScienceRequest::UnsafeMergeFrom(const AllScienceRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.page_number().size() > 0) {

    page_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_number_);
  }
  if (from.page_size().size() > 0) {

    page_size_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_size_);
  }
}

void AllScienceRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:main.AllScienceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllScienceRequest::CopyFrom(const AllScienceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:main.AllScienceRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AllScienceRequest::IsInitialized() const {

  return true;
}

void AllScienceRequest::Swap(AllScienceRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AllScienceRequest::InternalSwap(AllScienceRequest* other) {
  page_number_.Swap(&other->page_number_);
  page_size_.Swap(&other->page_size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AllScienceRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllScienceRequest_descriptor_;
  metadata.reflection = AllScienceRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AllScienceRequest

// optional string page_number = 1;
void AllScienceRequest::clear_page_number() {
  page_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AllScienceRequest::page_number() const {
  // @@protoc_insertion_point(field_get:main.AllScienceRequest.page_number)
  return page_number_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AllScienceRequest::set_page_number(const ::std::string& value) {
  
  page_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:main.AllScienceRequest.page_number)
}
void AllScienceRequest::set_page_number(const char* value) {
  
  page_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:main.AllScienceRequest.page_number)
}
void AllScienceRequest::set_page_number(const char* value, size_t size) {
  
  page_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:main.AllScienceRequest.page_number)
}
::std::string* AllScienceRequest::mutable_page_number() {
  
  // @@protoc_insertion_point(field_mutable:main.AllScienceRequest.page_number)
  return page_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AllScienceRequest::release_page_number() {
  // @@protoc_insertion_point(field_release:main.AllScienceRequest.page_number)
  
  return page_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AllScienceRequest::set_allocated_page_number(::std::string* page_number) {
  if (page_number != NULL) {
    
  } else {
    
  }
  page_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_number);
  // @@protoc_insertion_point(field_set_allocated:main.AllScienceRequest.page_number)
}

// optional string page_size = 2;
void AllScienceRequest::clear_page_size() {
  page_size_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AllScienceRequest::page_size() const {
  // @@protoc_insertion_point(field_get:main.AllScienceRequest.page_size)
  return page_size_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AllScienceRequest::set_page_size(const ::std::string& value) {
  
  page_size_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:main.AllScienceRequest.page_size)
}
void AllScienceRequest::set_page_size(const char* value) {
  
  page_size_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:main.AllScienceRequest.page_size)
}
void AllScienceRequest::set_page_size(const char* value, size_t size) {
  
  page_size_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:main.AllScienceRequest.page_size)
}
::std::string* AllScienceRequest::mutable_page_size() {
  
  // @@protoc_insertion_point(field_mutable:main.AllScienceRequest.page_size)
  return page_size_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AllScienceRequest::release_page_size() {
  // @@protoc_insertion_point(field_release:main.AllScienceRequest.page_size)
  
  return page_size_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AllScienceRequest::set_allocated_page_size(::std::string* page_size) {
  if (page_size != NULL) {
    
  } else {
    
  }
  page_size_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_size);
  // @@protoc_insertion_point(field_set_allocated:main.AllScienceRequest.page_size)
}

inline const AllScienceRequest* AllScienceRequest::internal_default_instance() {
  return &AllScienceRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AllScienceReply::kScienceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AllScienceReply::AllScienceReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_all_5fscience_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.AllScienceReply)
}

void AllScienceReply::InitAsDefaultInstance() {
}

AllScienceReply::AllScienceReply(const AllScienceReply& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.AllScienceReply)
}

void AllScienceReply::SharedCtor() {
  _cached_size_ = 0;
}

AllScienceReply::~AllScienceReply() {
  // @@protoc_insertion_point(destructor:main.AllScienceReply)
  SharedDtor();
}

void AllScienceReply::SharedDtor() {
}

void AllScienceReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllScienceReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllScienceReply_descriptor_;
}

const AllScienceReply& AllScienceReply::default_instance() {
  protobuf_InitDefaults_all_5fscience_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AllScienceReply> AllScienceReply_default_instance_;

AllScienceReply* AllScienceReply::New(::google::protobuf::Arena* arena) const {
  AllScienceReply* n = new AllScienceReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AllScienceReply::Clear() {
// @@protoc_insertion_point(message_clear_start:main.AllScienceReply)
  science_.Clear();
}

bool AllScienceReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:main.AllScienceReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .main.Science science = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_science:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_science()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_science;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.AllScienceReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.AllScienceReply)
  return false;
#undef DO_
}

void AllScienceReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.AllScienceReply)
  // repeated .main.Science science = 1;
  for (unsigned int i = 0, n = this->science_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->science(i), output);
  }

  // @@protoc_insertion_point(serialize_end:main.AllScienceReply)
}

::google::protobuf::uint8* AllScienceReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:main.AllScienceReply)
  // repeated .main.Science science = 1;
  for (unsigned int i = 0, n = this->science_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->science(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:main.AllScienceReply)
  return target;
}

size_t AllScienceReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:main.AllScienceReply)
  size_t total_size = 0;

  // repeated .main.Science science = 1;
  {
    unsigned int count = this->science_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->science(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllScienceReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:main.AllScienceReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AllScienceReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AllScienceReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:main.AllScienceReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:main.AllScienceReply)
    UnsafeMergeFrom(*source);
  }
}

void AllScienceReply::MergeFrom(const AllScienceReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:main.AllScienceReply)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AllScienceReply::UnsafeMergeFrom(const AllScienceReply& from) {
  GOOGLE_DCHECK(&from != this);
  science_.MergeFrom(from.science_);
}

void AllScienceReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:main.AllScienceReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllScienceReply::CopyFrom(const AllScienceReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:main.AllScienceReply)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AllScienceReply::IsInitialized() const {

  return true;
}

void AllScienceReply::Swap(AllScienceReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AllScienceReply::InternalSwap(AllScienceReply* other) {
  science_.UnsafeArenaSwap(&other->science_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AllScienceReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllScienceReply_descriptor_;
  metadata.reflection = AllScienceReply_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AllScienceReply

// repeated .main.Science science = 1;
int AllScienceReply::science_size() const {
  return science_.size();
}
void AllScienceReply::clear_science() {
  science_.Clear();
}
const ::main::Science& AllScienceReply::science(int index) const {
  // @@protoc_insertion_point(field_get:main.AllScienceReply.science)
  return science_.Get(index);
}
::main::Science* AllScienceReply::mutable_science(int index) {
  // @@protoc_insertion_point(field_mutable:main.AllScienceReply.science)
  return science_.Mutable(index);
}
::main::Science* AllScienceReply::add_science() {
  // @@protoc_insertion_point(field_add:main.AllScienceReply.science)
  return science_.Add();
}
::google::protobuf::RepeatedPtrField< ::main::Science >*
AllScienceReply::mutable_science() {
  // @@protoc_insertion_point(field_mutable_list:main.AllScienceReply.science)
  return &science_;
}
const ::google::protobuf::RepeatedPtrField< ::main::Science >&
AllScienceReply::science() const {
  // @@protoc_insertion_point(field_list:main.AllScienceReply.science)
  return science_;
}

inline const AllScienceReply* AllScienceReply::internal_default_instance() {
  return &AllScienceReply_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Science::kScienceLinkFieldNumber;
const int Science::kScienceTitleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Science::Science()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_all_5fscience_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.Science)
}

void Science::InitAsDefaultInstance() {
}

Science::Science(const Science& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.Science)
}

void Science::SharedCtor() {
  science_link_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  science_title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

Science::~Science() {
  // @@protoc_insertion_point(destructor:main.Science)
  SharedDtor();
}

void Science::SharedDtor() {
  science_link_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  science_title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Science::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Science::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Science_descriptor_;
}

const Science& Science::default_instance() {
  protobuf_InitDefaults_all_5fscience_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Science> Science_default_instance_;

Science* Science::New(::google::protobuf::Arena* arena) const {
  Science* n = new Science;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Science::Clear() {
// @@protoc_insertion_point(message_clear_start:main.Science)
  science_link_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  science_title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Science::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:main.Science)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string science_link = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_science_link()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->science_link().data(), this->science_link().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "main.Science.science_link"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_science_title;
        break;
      }

      // optional string science_title = 2;
      case 2: {
        if (tag == 18) {
         parse_science_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_science_title()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->science_title().data(), this->science_title().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "main.Science.science_title"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.Science)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.Science)
  return false;
#undef DO_
}

void Science::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.Science)
  // optional string science_link = 1;
  if (this->science_link().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->science_link().data(), this->science_link().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "main.Science.science_link");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->science_link(), output);
  }

  // optional string science_title = 2;
  if (this->science_title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->science_title().data(), this->science_title().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "main.Science.science_title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->science_title(), output);
  }

  // @@protoc_insertion_point(serialize_end:main.Science)
}

::google::protobuf::uint8* Science::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:main.Science)
  // optional string science_link = 1;
  if (this->science_link().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->science_link().data(), this->science_link().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "main.Science.science_link");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->science_link(), target);
  }

  // optional string science_title = 2;
  if (this->science_title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->science_title().data(), this->science_title().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "main.Science.science_title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->science_title(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:main.Science)
  return target;
}

size_t Science::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:main.Science)
  size_t total_size = 0;

  // optional string science_link = 1;
  if (this->science_link().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->science_link());
  }

  // optional string science_title = 2;
  if (this->science_title().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->science_title());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Science::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:main.Science)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Science* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Science>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:main.Science)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:main.Science)
    UnsafeMergeFrom(*source);
  }
}

void Science::MergeFrom(const Science& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:main.Science)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Science::UnsafeMergeFrom(const Science& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.science_link().size() > 0) {

    science_link_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.science_link_);
  }
  if (from.science_title().size() > 0) {

    science_title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.science_title_);
  }
}

void Science::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:main.Science)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Science::CopyFrom(const Science& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:main.Science)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Science::IsInitialized() const {

  return true;
}

void Science::Swap(Science* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Science::InternalSwap(Science* other) {
  science_link_.Swap(&other->science_link_);
  science_title_.Swap(&other->science_title_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Science::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Science_descriptor_;
  metadata.reflection = Science_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Science

// optional string science_link = 1;
void Science::clear_science_link() {
  science_link_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Science::science_link() const {
  // @@protoc_insertion_point(field_get:main.Science.science_link)
  return science_link_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Science::set_science_link(const ::std::string& value) {
  
  science_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:main.Science.science_link)
}
void Science::set_science_link(const char* value) {
  
  science_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:main.Science.science_link)
}
void Science::set_science_link(const char* value, size_t size) {
  
  science_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:main.Science.science_link)
}
::std::string* Science::mutable_science_link() {
  
  // @@protoc_insertion_point(field_mutable:main.Science.science_link)
  return science_link_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Science::release_science_link() {
  // @@protoc_insertion_point(field_release:main.Science.science_link)
  
  return science_link_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Science::set_allocated_science_link(::std::string* science_link) {
  if (science_link != NULL) {
    
  } else {
    
  }
  science_link_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), science_link);
  // @@protoc_insertion_point(field_set_allocated:main.Science.science_link)
}

// optional string science_title = 2;
void Science::clear_science_title() {
  science_title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Science::science_title() const {
  // @@protoc_insertion_point(field_get:main.Science.science_title)
  return science_title_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Science::set_science_title(const ::std::string& value) {
  
  science_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:main.Science.science_title)
}
void Science::set_science_title(const char* value) {
  
  science_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:main.Science.science_title)
}
void Science::set_science_title(const char* value, size_t size) {
  
  science_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:main.Science.science_title)
}
::std::string* Science::mutable_science_title() {
  
  // @@protoc_insertion_point(field_mutable:main.Science.science_title)
  return science_title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Science::release_science_title() {
  // @@protoc_insertion_point(field_release:main.Science.science_title)
  
  return science_title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Science::set_allocated_science_title(::std::string* science_title) {
  if (science_title != NULL) {
    
  } else {
    
  }
  science_title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), science_title);
  // @@protoc_insertion_point(field_set_allocated:main.Science.science_title)
}

inline const Science* Science::internal_default_instance() {
  return &Science_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace main

// @@protoc_insertion_point(global_scope)
