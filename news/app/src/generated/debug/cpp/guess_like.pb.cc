// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: guess_like.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "guess_like.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace main {

namespace {

const ::google::protobuf::Descriptor* GuessLikeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuessLikeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuessLikeReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuessLikeReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuessLike_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuessLike_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_guess_5flike_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_guess_5flike_2eproto() {
  protobuf_AddDesc_guess_5flike_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "guess_like.proto");
  GOOGLE_CHECK(file != NULL);
  GuessLikeRequest_descriptor_ = file->message_type(0);
  static const int GuessLikeRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuessLikeRequest, page_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuessLikeRequest, page_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuessLikeRequest, user_id_),
  };
  GuessLikeRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GuessLikeRequest_descriptor_,
      GuessLikeRequest::internal_default_instance(),
      GuessLikeRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(GuessLikeRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuessLikeRequest, _internal_metadata_));
  GuessLikeReply_descriptor_ = file->message_type(1);
  static const int GuessLikeReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuessLikeReply, guess_like_),
  };
  GuessLikeReply_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GuessLikeReply_descriptor_,
      GuessLikeReply::internal_default_instance(),
      GuessLikeReply_offsets_,
      -1,
      -1,
      -1,
      sizeof(GuessLikeReply),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuessLikeReply, _internal_metadata_));
  GuessLike_descriptor_ = file->message_type(2);
  static const int GuessLike_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuessLike, like_cover_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuessLike, like_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuessLike, like_title_),
  };
  GuessLike_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GuessLike_descriptor_,
      GuessLike::internal_default_instance(),
      GuessLike_offsets_,
      -1,
      -1,
      -1,
      sizeof(GuessLike),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuessLike, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_guess_5flike_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GuessLikeRequest_descriptor_, GuessLikeRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GuessLikeReply_descriptor_, GuessLikeReply::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GuessLike_descriptor_, GuessLike::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_guess_5flike_2eproto() {
  GuessLikeRequest_default_instance_.Shutdown();
  delete GuessLikeRequest_reflection_;
  GuessLikeReply_default_instance_.Shutdown();
  delete GuessLikeReply_reflection_;
  GuessLike_default_instance_.Shutdown();
  delete GuessLike_reflection_;
}

void protobuf_InitDefaults_guess_5flike_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  GuessLikeRequest_default_instance_.DefaultConstruct();
  GuessLikeReply_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  GuessLike_default_instance_.DefaultConstruct();
  GuessLikeRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  GuessLikeReply_default_instance_.get_mutable()->InitAsDefaultInstance();
  GuessLike_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_guess_5flike_2eproto_once_);
void protobuf_InitDefaults_guess_5flike_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_guess_5flike_2eproto_once_,
                 &protobuf_InitDefaults_guess_5flike_2eproto_impl);
}
void protobuf_AddDesc_guess_5flike_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_guess_5flike_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020guess_like.proto\022\004main\"K\n\020GuessLikeReq"
    "uest\022\023\n\013page_number\030\001 \001(\t\022\021\n\tpage_size\030\002"
    " \001(\t\022\017\n\007user_id\030\003 \001(\t\"5\n\016GuessLikeReply\022"
    "#\n\nguess_like\030\001 \003(\0132\017.main.GuessLike\"D\n\t"
    "GuessLike\022\022\n\nlike_cover\030\001 \001(\t\022\017\n\007like_id"
    "\030\002 \001(\t\022\022\n\nlike_title\030\003 \001(\tB\022\n\020com.wanfan"
    "g.mainb\006proto3", 254);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "guess_like.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_guess_5flike_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_guess_5flike_2eproto_once_);
void protobuf_AddDesc_guess_5flike_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_guess_5flike_2eproto_once_,
                 &protobuf_AddDesc_guess_5flike_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_guess_5flike_2eproto {
  StaticDescriptorInitializer_guess_5flike_2eproto() {
    protobuf_AddDesc_guess_5flike_2eproto();
  }
} static_descriptor_initializer_guess_5flike_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GuessLikeRequest::kPageNumberFieldNumber;
const int GuessLikeRequest::kPageSizeFieldNumber;
const int GuessLikeRequest::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GuessLikeRequest::GuessLikeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_guess_5flike_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.GuessLikeRequest)
}

void GuessLikeRequest::InitAsDefaultInstance() {
}

GuessLikeRequest::GuessLikeRequest(const GuessLikeRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.GuessLikeRequest)
}

void GuessLikeRequest::SharedCtor() {
  page_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_size_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

GuessLikeRequest::~GuessLikeRequest() {
  // @@protoc_insertion_point(destructor:main.GuessLikeRequest)
  SharedDtor();
}

void GuessLikeRequest::SharedDtor() {
  page_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_size_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GuessLikeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuessLikeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuessLikeRequest_descriptor_;
}

const GuessLikeRequest& GuessLikeRequest::default_instance() {
  protobuf_InitDefaults_guess_5flike_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<GuessLikeRequest> GuessLikeRequest_default_instance_;

GuessLikeRequest* GuessLikeRequest::New(::google::protobuf::Arena* arena) const {
  GuessLikeRequest* n = new GuessLikeRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GuessLikeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:main.GuessLikeRequest)
  page_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_size_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GuessLikeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:main.GuessLikeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string page_number = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_number()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->page_number().data(), this->page_number().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "main.GuessLikeRequest.page_number"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_page_size;
        break;
      }

      // optional string page_size = 2;
      case 2: {
        if (tag == 18) {
         parse_page_size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_size()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->page_size().data(), this->page_size().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "main.GuessLikeRequest.page_size"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_user_id;
        break;
      }

      // optional string user_id = 3;
      case 3: {
        if (tag == 26) {
         parse_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "main.GuessLikeRequest.user_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.GuessLikeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.GuessLikeRequest)
  return false;
#undef DO_
}

void GuessLikeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.GuessLikeRequest)
  // optional string page_number = 1;
  if (this->page_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_number().data(), this->page_number().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "main.GuessLikeRequest.page_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->page_number(), output);
  }

  // optional string page_size = 2;
  if (this->page_size().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_size().data(), this->page_size().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "main.GuessLikeRequest.page_size");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->page_size(), output);
  }

  // optional string user_id = 3;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "main.GuessLikeRequest.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->user_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:main.GuessLikeRequest)
}

::google::protobuf::uint8* GuessLikeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:main.GuessLikeRequest)
  // optional string page_number = 1;
  if (this->page_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_number().data(), this->page_number().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "main.GuessLikeRequest.page_number");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->page_number(), target);
  }

  // optional string page_size = 2;
  if (this->page_size().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_size().data(), this->page_size().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "main.GuessLikeRequest.page_size");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->page_size(), target);
  }

  // optional string user_id = 3;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "main.GuessLikeRequest.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:main.GuessLikeRequest)
  return target;
}

size_t GuessLikeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:main.GuessLikeRequest)
  size_t total_size = 0;

  // optional string page_number = 1;
  if (this->page_number().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->page_number());
  }

  // optional string page_size = 2;
  if (this->page_size().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->page_size());
  }

  // optional string user_id = 3;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuessLikeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:main.GuessLikeRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GuessLikeRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GuessLikeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:main.GuessLikeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:main.GuessLikeRequest)
    UnsafeMergeFrom(*source);
  }
}

void GuessLikeRequest::MergeFrom(const GuessLikeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:main.GuessLikeRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void GuessLikeRequest::UnsafeMergeFrom(const GuessLikeRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.page_number().size() > 0) {

    page_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_number_);
  }
  if (from.page_size().size() > 0) {

    page_size_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_size_);
  }
  if (from.user_id().size() > 0) {

    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
}

void GuessLikeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:main.GuessLikeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuessLikeRequest::CopyFrom(const GuessLikeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:main.GuessLikeRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool GuessLikeRequest::IsInitialized() const {

  return true;
}

void GuessLikeRequest::Swap(GuessLikeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GuessLikeRequest::InternalSwap(GuessLikeRequest* other) {
  page_number_.Swap(&other->page_number_);
  page_size_.Swap(&other->page_size_);
  user_id_.Swap(&other->user_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GuessLikeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuessLikeRequest_descriptor_;
  metadata.reflection = GuessLikeRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GuessLikeRequest

// optional string page_number = 1;
void GuessLikeRequest::clear_page_number() {
  page_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GuessLikeRequest::page_number() const {
  // @@protoc_insertion_point(field_get:main.GuessLikeRequest.page_number)
  return page_number_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GuessLikeRequest::set_page_number(const ::std::string& value) {
  
  page_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:main.GuessLikeRequest.page_number)
}
void GuessLikeRequest::set_page_number(const char* value) {
  
  page_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:main.GuessLikeRequest.page_number)
}
void GuessLikeRequest::set_page_number(const char* value, size_t size) {
  
  page_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:main.GuessLikeRequest.page_number)
}
::std::string* GuessLikeRequest::mutable_page_number() {
  
  // @@protoc_insertion_point(field_mutable:main.GuessLikeRequest.page_number)
  return page_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GuessLikeRequest::release_page_number() {
  // @@protoc_insertion_point(field_release:main.GuessLikeRequest.page_number)
  
  return page_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GuessLikeRequest::set_allocated_page_number(::std::string* page_number) {
  if (page_number != NULL) {
    
  } else {
    
  }
  page_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_number);
  // @@protoc_insertion_point(field_set_allocated:main.GuessLikeRequest.page_number)
}

// optional string page_size = 2;
void GuessLikeRequest::clear_page_size() {
  page_size_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GuessLikeRequest::page_size() const {
  // @@protoc_insertion_point(field_get:main.GuessLikeRequest.page_size)
  return page_size_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GuessLikeRequest::set_page_size(const ::std::string& value) {
  
  page_size_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:main.GuessLikeRequest.page_size)
}
void GuessLikeRequest::set_page_size(const char* value) {
  
  page_size_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:main.GuessLikeRequest.page_size)
}
void GuessLikeRequest::set_page_size(const char* value, size_t size) {
  
  page_size_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:main.GuessLikeRequest.page_size)
}
::std::string* GuessLikeRequest::mutable_page_size() {
  
  // @@protoc_insertion_point(field_mutable:main.GuessLikeRequest.page_size)
  return page_size_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GuessLikeRequest::release_page_size() {
  // @@protoc_insertion_point(field_release:main.GuessLikeRequest.page_size)
  
  return page_size_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GuessLikeRequest::set_allocated_page_size(::std::string* page_size) {
  if (page_size != NULL) {
    
  } else {
    
  }
  page_size_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_size);
  // @@protoc_insertion_point(field_set_allocated:main.GuessLikeRequest.page_size)
}

// optional string user_id = 3;
void GuessLikeRequest::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GuessLikeRequest::user_id() const {
  // @@protoc_insertion_point(field_get:main.GuessLikeRequest.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GuessLikeRequest::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:main.GuessLikeRequest.user_id)
}
void GuessLikeRequest::set_user_id(const char* value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:main.GuessLikeRequest.user_id)
}
void GuessLikeRequest::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:main.GuessLikeRequest.user_id)
}
::std::string* GuessLikeRequest::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:main.GuessLikeRequest.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GuessLikeRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:main.GuessLikeRequest.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GuessLikeRequest::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:main.GuessLikeRequest.user_id)
}

inline const GuessLikeRequest* GuessLikeRequest::internal_default_instance() {
  return &GuessLikeRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GuessLikeReply::kGuessLikeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GuessLikeReply::GuessLikeReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_guess_5flike_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.GuessLikeReply)
}

void GuessLikeReply::InitAsDefaultInstance() {
}

GuessLikeReply::GuessLikeReply(const GuessLikeReply& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.GuessLikeReply)
}

void GuessLikeReply::SharedCtor() {
  _cached_size_ = 0;
}

GuessLikeReply::~GuessLikeReply() {
  // @@protoc_insertion_point(destructor:main.GuessLikeReply)
  SharedDtor();
}

void GuessLikeReply::SharedDtor() {
}

void GuessLikeReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuessLikeReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuessLikeReply_descriptor_;
}

const GuessLikeReply& GuessLikeReply::default_instance() {
  protobuf_InitDefaults_guess_5flike_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<GuessLikeReply> GuessLikeReply_default_instance_;

GuessLikeReply* GuessLikeReply::New(::google::protobuf::Arena* arena) const {
  GuessLikeReply* n = new GuessLikeReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GuessLikeReply::Clear() {
// @@protoc_insertion_point(message_clear_start:main.GuessLikeReply)
  guess_like_.Clear();
}

bool GuessLikeReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:main.GuessLikeReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .main.GuessLike guess_like = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_guess_like:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_guess_like()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_guess_like;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.GuessLikeReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.GuessLikeReply)
  return false;
#undef DO_
}

void GuessLikeReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.GuessLikeReply)
  // repeated .main.GuessLike guess_like = 1;
  for (unsigned int i = 0, n = this->guess_like_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->guess_like(i), output);
  }

  // @@protoc_insertion_point(serialize_end:main.GuessLikeReply)
}

::google::protobuf::uint8* GuessLikeReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:main.GuessLikeReply)
  // repeated .main.GuessLike guess_like = 1;
  for (unsigned int i = 0, n = this->guess_like_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->guess_like(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:main.GuessLikeReply)
  return target;
}

size_t GuessLikeReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:main.GuessLikeReply)
  size_t total_size = 0;

  // repeated .main.GuessLike guess_like = 1;
  {
    unsigned int count = this->guess_like_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->guess_like(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuessLikeReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:main.GuessLikeReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GuessLikeReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GuessLikeReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:main.GuessLikeReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:main.GuessLikeReply)
    UnsafeMergeFrom(*source);
  }
}

void GuessLikeReply::MergeFrom(const GuessLikeReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:main.GuessLikeReply)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void GuessLikeReply::UnsafeMergeFrom(const GuessLikeReply& from) {
  GOOGLE_DCHECK(&from != this);
  guess_like_.MergeFrom(from.guess_like_);
}

void GuessLikeReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:main.GuessLikeReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuessLikeReply::CopyFrom(const GuessLikeReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:main.GuessLikeReply)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool GuessLikeReply::IsInitialized() const {

  return true;
}

void GuessLikeReply::Swap(GuessLikeReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GuessLikeReply::InternalSwap(GuessLikeReply* other) {
  guess_like_.UnsafeArenaSwap(&other->guess_like_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GuessLikeReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuessLikeReply_descriptor_;
  metadata.reflection = GuessLikeReply_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GuessLikeReply

// repeated .main.GuessLike guess_like = 1;
int GuessLikeReply::guess_like_size() const {
  return guess_like_.size();
}
void GuessLikeReply::clear_guess_like() {
  guess_like_.Clear();
}
const ::main::GuessLike& GuessLikeReply::guess_like(int index) const {
  // @@protoc_insertion_point(field_get:main.GuessLikeReply.guess_like)
  return guess_like_.Get(index);
}
::main::GuessLike* GuessLikeReply::mutable_guess_like(int index) {
  // @@protoc_insertion_point(field_mutable:main.GuessLikeReply.guess_like)
  return guess_like_.Mutable(index);
}
::main::GuessLike* GuessLikeReply::add_guess_like() {
  // @@protoc_insertion_point(field_add:main.GuessLikeReply.guess_like)
  return guess_like_.Add();
}
::google::protobuf::RepeatedPtrField< ::main::GuessLike >*
GuessLikeReply::mutable_guess_like() {
  // @@protoc_insertion_point(field_mutable_list:main.GuessLikeReply.guess_like)
  return &guess_like_;
}
const ::google::protobuf::RepeatedPtrField< ::main::GuessLike >&
GuessLikeReply::guess_like() const {
  // @@protoc_insertion_point(field_list:main.GuessLikeReply.guess_like)
  return guess_like_;
}

inline const GuessLikeReply* GuessLikeReply::internal_default_instance() {
  return &GuessLikeReply_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GuessLike::kLikeCoverFieldNumber;
const int GuessLike::kLikeIdFieldNumber;
const int GuessLike::kLikeTitleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GuessLike::GuessLike()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_guess_5flike_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.GuessLike)
}

void GuessLike::InitAsDefaultInstance() {
}

GuessLike::GuessLike(const GuessLike& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.GuessLike)
}

void GuessLike::SharedCtor() {
  like_cover_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  like_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  like_title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

GuessLike::~GuessLike() {
  // @@protoc_insertion_point(destructor:main.GuessLike)
  SharedDtor();
}

void GuessLike::SharedDtor() {
  like_cover_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  like_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  like_title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GuessLike::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuessLike::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuessLike_descriptor_;
}

const GuessLike& GuessLike::default_instance() {
  protobuf_InitDefaults_guess_5flike_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<GuessLike> GuessLike_default_instance_;

GuessLike* GuessLike::New(::google::protobuf::Arena* arena) const {
  GuessLike* n = new GuessLike;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GuessLike::Clear() {
// @@protoc_insertion_point(message_clear_start:main.GuessLike)
  like_cover_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  like_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  like_title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GuessLike::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:main.GuessLike)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string like_cover = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_like_cover()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->like_cover().data(), this->like_cover().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "main.GuessLike.like_cover"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_like_id;
        break;
      }

      // optional string like_id = 2;
      case 2: {
        if (tag == 18) {
         parse_like_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_like_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->like_id().data(), this->like_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "main.GuessLike.like_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_like_title;
        break;
      }

      // optional string like_title = 3;
      case 3: {
        if (tag == 26) {
         parse_like_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_like_title()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->like_title().data(), this->like_title().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "main.GuessLike.like_title"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.GuessLike)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.GuessLike)
  return false;
#undef DO_
}

void GuessLike::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.GuessLike)
  // optional string like_cover = 1;
  if (this->like_cover().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->like_cover().data(), this->like_cover().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "main.GuessLike.like_cover");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->like_cover(), output);
  }

  // optional string like_id = 2;
  if (this->like_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->like_id().data(), this->like_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "main.GuessLike.like_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->like_id(), output);
  }

  // optional string like_title = 3;
  if (this->like_title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->like_title().data(), this->like_title().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "main.GuessLike.like_title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->like_title(), output);
  }

  // @@protoc_insertion_point(serialize_end:main.GuessLike)
}

::google::protobuf::uint8* GuessLike::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:main.GuessLike)
  // optional string like_cover = 1;
  if (this->like_cover().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->like_cover().data(), this->like_cover().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "main.GuessLike.like_cover");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->like_cover(), target);
  }

  // optional string like_id = 2;
  if (this->like_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->like_id().data(), this->like_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "main.GuessLike.like_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->like_id(), target);
  }

  // optional string like_title = 3;
  if (this->like_title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->like_title().data(), this->like_title().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "main.GuessLike.like_title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->like_title(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:main.GuessLike)
  return target;
}

size_t GuessLike::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:main.GuessLike)
  size_t total_size = 0;

  // optional string like_cover = 1;
  if (this->like_cover().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->like_cover());
  }

  // optional string like_id = 2;
  if (this->like_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->like_id());
  }

  // optional string like_title = 3;
  if (this->like_title().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->like_title());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuessLike::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:main.GuessLike)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GuessLike* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GuessLike>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:main.GuessLike)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:main.GuessLike)
    UnsafeMergeFrom(*source);
  }
}

void GuessLike::MergeFrom(const GuessLike& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:main.GuessLike)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void GuessLike::UnsafeMergeFrom(const GuessLike& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.like_cover().size() > 0) {

    like_cover_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.like_cover_);
  }
  if (from.like_id().size() > 0) {

    like_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.like_id_);
  }
  if (from.like_title().size() > 0) {

    like_title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.like_title_);
  }
}

void GuessLike::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:main.GuessLike)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuessLike::CopyFrom(const GuessLike& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:main.GuessLike)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool GuessLike::IsInitialized() const {

  return true;
}

void GuessLike::Swap(GuessLike* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GuessLike::InternalSwap(GuessLike* other) {
  like_cover_.Swap(&other->like_cover_);
  like_id_.Swap(&other->like_id_);
  like_title_.Swap(&other->like_title_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GuessLike::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuessLike_descriptor_;
  metadata.reflection = GuessLike_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GuessLike

// optional string like_cover = 1;
void GuessLike::clear_like_cover() {
  like_cover_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GuessLike::like_cover() const {
  // @@protoc_insertion_point(field_get:main.GuessLike.like_cover)
  return like_cover_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GuessLike::set_like_cover(const ::std::string& value) {
  
  like_cover_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:main.GuessLike.like_cover)
}
void GuessLike::set_like_cover(const char* value) {
  
  like_cover_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:main.GuessLike.like_cover)
}
void GuessLike::set_like_cover(const char* value, size_t size) {
  
  like_cover_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:main.GuessLike.like_cover)
}
::std::string* GuessLike::mutable_like_cover() {
  
  // @@protoc_insertion_point(field_mutable:main.GuessLike.like_cover)
  return like_cover_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GuessLike::release_like_cover() {
  // @@protoc_insertion_point(field_release:main.GuessLike.like_cover)
  
  return like_cover_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GuessLike::set_allocated_like_cover(::std::string* like_cover) {
  if (like_cover != NULL) {
    
  } else {
    
  }
  like_cover_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), like_cover);
  // @@protoc_insertion_point(field_set_allocated:main.GuessLike.like_cover)
}

// optional string like_id = 2;
void GuessLike::clear_like_id() {
  like_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GuessLike::like_id() const {
  // @@protoc_insertion_point(field_get:main.GuessLike.like_id)
  return like_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GuessLike::set_like_id(const ::std::string& value) {
  
  like_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:main.GuessLike.like_id)
}
void GuessLike::set_like_id(const char* value) {
  
  like_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:main.GuessLike.like_id)
}
void GuessLike::set_like_id(const char* value, size_t size) {
  
  like_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:main.GuessLike.like_id)
}
::std::string* GuessLike::mutable_like_id() {
  
  // @@protoc_insertion_point(field_mutable:main.GuessLike.like_id)
  return like_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GuessLike::release_like_id() {
  // @@protoc_insertion_point(field_release:main.GuessLike.like_id)
  
  return like_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GuessLike::set_allocated_like_id(::std::string* like_id) {
  if (like_id != NULL) {
    
  } else {
    
  }
  like_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), like_id);
  // @@protoc_insertion_point(field_set_allocated:main.GuessLike.like_id)
}

// optional string like_title = 3;
void GuessLike::clear_like_title() {
  like_title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GuessLike::like_title() const {
  // @@protoc_insertion_point(field_get:main.GuessLike.like_title)
  return like_title_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GuessLike::set_like_title(const ::std::string& value) {
  
  like_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:main.GuessLike.like_title)
}
void GuessLike::set_like_title(const char* value) {
  
  like_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:main.GuessLike.like_title)
}
void GuessLike::set_like_title(const char* value, size_t size) {
  
  like_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:main.GuessLike.like_title)
}
::std::string* GuessLike::mutable_like_title() {
  
  // @@protoc_insertion_point(field_mutable:main.GuessLike.like_title)
  return like_title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GuessLike::release_like_title() {
  // @@protoc_insertion_point(field_release:main.GuessLike.like_title)
  
  return like_title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GuessLike::set_allocated_like_title(::std::string* like_title) {
  if (like_title != NULL) {
    
  } else {
    
  }
  like_title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), like_title);
  // @@protoc_insertion_point(field_set_allocated:main.GuessLike.like_title)
}

inline const GuessLike* GuessLike::internal_default_instance() {
  return &GuessLike_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace main

// @@protoc_insertion_point(global_scope)
