// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: banner.proto

#ifndef PROTOBUF_banner_2eproto__INCLUDED
#define PROTOBUF_banner_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace main {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_banner_2eproto();
void protobuf_InitDefaults_banner_2eproto();
void protobuf_AssignDesc_banner_2eproto();
void protobuf_ShutdownFile_banner_2eproto();

class AllBannerReply;
class AllBannerRequest;
class Baner;

// ===================================================================

class AllBannerRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:main.AllBannerRequest) */ {
 public:
  AllBannerRequest();
  virtual ~AllBannerRequest();

  AllBannerRequest(const AllBannerRequest& from);

  inline AllBannerRequest& operator=(const AllBannerRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllBannerRequest& default_instance();

  static const AllBannerRequest* internal_default_instance();

  void Swap(AllBannerRequest* other);

  // implements Message ----------------------------------------------

  inline AllBannerRequest* New() const { return New(NULL); }

  AllBannerRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllBannerRequest& from);
  void MergeFrom(const AllBannerRequest& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AllBannerRequest* other);
  void UnsafeMergeFrom(const AllBannerRequest& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // @@protoc_insertion_point(class_scope:main.AllBannerRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_banner_2eproto_impl();
  friend void  protobuf_AddDesc_banner_2eproto_impl();
  friend void protobuf_AssignDesc_banner_2eproto();
  friend void protobuf_ShutdownFile_banner_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<AllBannerRequest> AllBannerRequest_default_instance_;

// -------------------------------------------------------------------

class AllBannerReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:main.AllBannerReply) */ {
 public:
  AllBannerReply();
  virtual ~AllBannerReply();

  AllBannerReply(const AllBannerReply& from);

  inline AllBannerReply& operator=(const AllBannerReply& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllBannerReply& default_instance();

  static const AllBannerReply* internal_default_instance();

  void Swap(AllBannerReply* other);

  // implements Message ----------------------------------------------

  inline AllBannerReply* New() const { return New(NULL); }

  AllBannerReply* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllBannerReply& from);
  void MergeFrom(const AllBannerReply& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AllBannerReply* other);
  void UnsafeMergeFrom(const AllBannerReply& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .main.Baner baner = 1;
  int baner_size() const;
  void clear_baner();
  static const int kBanerFieldNumber = 1;
  const ::main::Baner& baner(int index) const;
  ::main::Baner* mutable_baner(int index);
  ::main::Baner* add_baner();
  ::google::protobuf::RepeatedPtrField< ::main::Baner >*
      mutable_baner();
  const ::google::protobuf::RepeatedPtrField< ::main::Baner >&
      baner() const;

  // @@protoc_insertion_point(class_scope:main.AllBannerReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::main::Baner > baner_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_banner_2eproto_impl();
  friend void  protobuf_AddDesc_banner_2eproto_impl();
  friend void protobuf_AssignDesc_banner_2eproto();
  friend void protobuf_ShutdownFile_banner_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<AllBannerReply> AllBannerReply_default_instance_;

// -------------------------------------------------------------------

class Baner : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:main.Baner) */ {
 public:
  Baner();
  virtual ~Baner();

  Baner(const Baner& from);

  inline Baner& operator=(const Baner& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Baner& default_instance();

  static const Baner* internal_default_instance();

  void Swap(Baner* other);

  // implements Message ----------------------------------------------

  inline Baner* New() const { return New(NULL); }

  Baner* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Baner& from);
  void MergeFrom(const Baner& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Baner* other);
  void UnsafeMergeFrom(const Baner& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string banner_link = 1;
  void clear_banner_link();
  static const int kBannerLinkFieldNumber = 1;
  const ::std::string& banner_link() const;
  void set_banner_link(const ::std::string& value);
  void set_banner_link(const char* value);
  void set_banner_link(const char* value, size_t size);
  ::std::string* mutable_banner_link();
  ::std::string* release_banner_link();
  void set_allocated_banner_link(::std::string* banner_link);

  // optional string banner_pic = 2;
  void clear_banner_pic();
  static const int kBannerPicFieldNumber = 2;
  const ::std::string& banner_pic() const;
  void set_banner_pic(const ::std::string& value);
  void set_banner_pic(const char* value);
  void set_banner_pic(const char* value, size_t size);
  ::std::string* mutable_banner_pic();
  ::std::string* release_banner_pic();
  void set_allocated_banner_pic(::std::string* banner_pic);

  // @@protoc_insertion_point(class_scope:main.Baner)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr banner_link_;
  ::google::protobuf::internal::ArenaStringPtr banner_pic_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_banner_2eproto_impl();
  friend void  protobuf_AddDesc_banner_2eproto_impl();
  friend void protobuf_AssignDesc_banner_2eproto();
  friend void protobuf_ShutdownFile_banner_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Baner> Baner_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// AllBannerRequest

// optional string user_id = 1;
inline void AllBannerRequest::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AllBannerRequest::user_id() const {
  // @@protoc_insertion_point(field_get:main.AllBannerRequest.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AllBannerRequest::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:main.AllBannerRequest.user_id)
}
inline void AllBannerRequest::set_user_id(const char* value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:main.AllBannerRequest.user_id)
}
inline void AllBannerRequest::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:main.AllBannerRequest.user_id)
}
inline ::std::string* AllBannerRequest::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:main.AllBannerRequest.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AllBannerRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:main.AllBannerRequest.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AllBannerRequest::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:main.AllBannerRequest.user_id)
}

inline const AllBannerRequest* AllBannerRequest::internal_default_instance() {
  return &AllBannerRequest_default_instance_.get();
}
// -------------------------------------------------------------------

// AllBannerReply

// repeated .main.Baner baner = 1;
inline int AllBannerReply::baner_size() const {
  return baner_.size();
}
inline void AllBannerReply::clear_baner() {
  baner_.Clear();
}
inline const ::main::Baner& AllBannerReply::baner(int index) const {
  // @@protoc_insertion_point(field_get:main.AllBannerReply.baner)
  return baner_.Get(index);
}
inline ::main::Baner* AllBannerReply::mutable_baner(int index) {
  // @@protoc_insertion_point(field_mutable:main.AllBannerReply.baner)
  return baner_.Mutable(index);
}
inline ::main::Baner* AllBannerReply::add_baner() {
  // @@protoc_insertion_point(field_add:main.AllBannerReply.baner)
  return baner_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::main::Baner >*
AllBannerReply::mutable_baner() {
  // @@protoc_insertion_point(field_mutable_list:main.AllBannerReply.baner)
  return &baner_;
}
inline const ::google::protobuf::RepeatedPtrField< ::main::Baner >&
AllBannerReply::baner() const {
  // @@protoc_insertion_point(field_list:main.AllBannerReply.baner)
  return baner_;
}

inline const AllBannerReply* AllBannerReply::internal_default_instance() {
  return &AllBannerReply_default_instance_.get();
}
// -------------------------------------------------------------------

// Baner

// optional string banner_link = 1;
inline void Baner::clear_banner_link() {
  banner_link_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Baner::banner_link() const {
  // @@protoc_insertion_point(field_get:main.Baner.banner_link)
  return banner_link_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Baner::set_banner_link(const ::std::string& value) {
  
  banner_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:main.Baner.banner_link)
}
inline void Baner::set_banner_link(const char* value) {
  
  banner_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:main.Baner.banner_link)
}
inline void Baner::set_banner_link(const char* value, size_t size) {
  
  banner_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:main.Baner.banner_link)
}
inline ::std::string* Baner::mutable_banner_link() {
  
  // @@protoc_insertion_point(field_mutable:main.Baner.banner_link)
  return banner_link_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Baner::release_banner_link() {
  // @@protoc_insertion_point(field_release:main.Baner.banner_link)
  
  return banner_link_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Baner::set_allocated_banner_link(::std::string* banner_link) {
  if (banner_link != NULL) {
    
  } else {
    
  }
  banner_link_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), banner_link);
  // @@protoc_insertion_point(field_set_allocated:main.Baner.banner_link)
}

// optional string banner_pic = 2;
inline void Baner::clear_banner_pic() {
  banner_pic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Baner::banner_pic() const {
  // @@protoc_insertion_point(field_get:main.Baner.banner_pic)
  return banner_pic_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Baner::set_banner_pic(const ::std::string& value) {
  
  banner_pic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:main.Baner.banner_pic)
}
inline void Baner::set_banner_pic(const char* value) {
  
  banner_pic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:main.Baner.banner_pic)
}
inline void Baner::set_banner_pic(const char* value, size_t size) {
  
  banner_pic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:main.Baner.banner_pic)
}
inline ::std::string* Baner::mutable_banner_pic() {
  
  // @@protoc_insertion_point(field_mutable:main.Baner.banner_pic)
  return banner_pic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Baner::release_banner_pic() {
  // @@protoc_insertion_point(field_release:main.Baner.banner_pic)
  
  return banner_pic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Baner::set_allocated_banner_pic(::std::string* banner_pic) {
  if (banner_pic != NULL) {
    
  } else {
    
  }
  banner_pic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), banner_pic);
  // @@protoc_insertion_point(field_set_allocated:main.Baner.banner_pic)
}

inline const Baner* Baner::internal_default_instance() {
  return &Baner_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace main

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_banner_2eproto__INCLUDED
