// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: personalCenter/msg_common.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "personalCenter/msg_common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace personal {

namespace {

const ::google::protobuf::Descriptor* PhoneCaptchaRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PhoneCaptchaRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PhoneCaptchaResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PhoneCaptchaResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileMetaData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileMetaData_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileMetaData_LabelsEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* UploadFileRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UploadFileRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UploadFileResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UploadFileResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* UploadFileResponse_UploadUrlsEntry_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_personalCenter_2fmsg_5fcommon_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_personalCenter_2fmsg_5fcommon_2eproto() {
  protobuf_AddDesc_personalCenter_2fmsg_5fcommon_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "personalCenter/msg_common.proto");
  GOOGLE_CHECK(file != NULL);
  PhoneCaptchaRequest_descriptor_ = file->message_type(0);
  static const int PhoneCaptchaRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhoneCaptchaRequest, phone_),
  };
  PhoneCaptchaRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PhoneCaptchaRequest_descriptor_,
      PhoneCaptchaRequest::internal_default_instance(),
      PhoneCaptchaRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(PhoneCaptchaRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhoneCaptchaRequest, _internal_metadata_));
  PhoneCaptchaResponse_descriptor_ = file->message_type(1);
  static const int PhoneCaptchaResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhoneCaptchaResponse, phone_captcha_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhoneCaptchaResponse, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhoneCaptchaResponse, error_),
  };
  PhoneCaptchaResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PhoneCaptchaResponse_descriptor_,
      PhoneCaptchaResponse::internal_default_instance(),
      PhoneCaptchaResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(PhoneCaptchaResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhoneCaptchaResponse, _internal_metadata_));
  FileMetaData_descriptor_ = file->message_type(2);
  static const int FileMetaData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileMetaData, labels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileMetaData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileMetaData, owner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileMetaData, login_token_),
  };
  FileMetaData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FileMetaData_descriptor_,
      FileMetaData::internal_default_instance(),
      FileMetaData_offsets_,
      -1,
      -1,
      -1,
      sizeof(FileMetaData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileMetaData, _internal_metadata_));
  FileMetaData_LabelsEntry_descriptor_ = FileMetaData_descriptor_->nested_type(0);
  UploadFileRequest_descriptor_ = file->message_type(3);
  static const int UploadFileRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadFileRequest, meta_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadFileRequest, file_data_),
  };
  UploadFileRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UploadFileRequest_descriptor_,
      UploadFileRequest::internal_default_instance(),
      UploadFileRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(UploadFileRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadFileRequest, _internal_metadata_));
  UploadFileResponse_descriptor_ = file->message_type(4);
  static const int UploadFileResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadFileResponse, upload_urls_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadFileResponse, error_),
  };
  UploadFileResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UploadFileResponse_descriptor_,
      UploadFileResponse::internal_default_instance(),
      UploadFileResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(UploadFileResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadFileResponse, _internal_metadata_));
  UploadFileResponse_UploadUrlsEntry_descriptor_ = UploadFileResponse_descriptor_->nested_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_personalCenter_2fmsg_5fcommon_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PhoneCaptchaRequest_descriptor_, PhoneCaptchaRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PhoneCaptchaResponse_descriptor_, PhoneCaptchaResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FileMetaData_descriptor_, FileMetaData::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        FileMetaData_LabelsEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::std::string,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            0>::CreateDefaultInstance(
                FileMetaData_LabelsEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UploadFileRequest_descriptor_, UploadFileRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UploadFileResponse_descriptor_, UploadFileResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        UploadFileResponse_UploadUrlsEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::std::string,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            0>::CreateDefaultInstance(
                UploadFileResponse_UploadUrlsEntry_descriptor_));
}

}  // namespace

void protobuf_ShutdownFile_personalCenter_2fmsg_5fcommon_2eproto() {
  PhoneCaptchaRequest_default_instance_.Shutdown();
  delete PhoneCaptchaRequest_reflection_;
  PhoneCaptchaResponse_default_instance_.Shutdown();
  delete PhoneCaptchaResponse_reflection_;
  FileMetaData_default_instance_.Shutdown();
  delete FileMetaData_reflection_;
  UploadFileRequest_default_instance_.Shutdown();
  delete UploadFileRequest_reflection_;
  UploadFileResponse_default_instance_.Shutdown();
  delete UploadFileResponse_reflection_;
}

void protobuf_InitDefaults_personalCenter_2fmsg_5fcommon_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::grpcCommon::protobuf_InitDefaults_grpcCommon_2fmsg_5ferror_2eproto();
  ::google::protobuf::internal::GetEmptyString();
  PhoneCaptchaRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  PhoneCaptchaResponse_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  FileMetaData_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  UploadFileRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  UploadFileResponse_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  PhoneCaptchaRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  PhoneCaptchaResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  FileMetaData_default_instance_.get_mutable()->InitAsDefaultInstance();
  UploadFileRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  UploadFileResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_personalCenter_2fmsg_5fcommon_2eproto_once_);
void protobuf_InitDefaults_personalCenter_2fmsg_5fcommon_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_personalCenter_2fmsg_5fcommon_2eproto_once_,
                 &protobuf_InitDefaults_personalCenter_2fmsg_5fcommon_2eproto_impl);
}
void protobuf_AddDesc_personalCenter_2fmsg_5fcommon_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_personalCenter_2fmsg_5fcommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\037personalCenter/msg_common.proto\022\010perso"
    "nal\032\032grpcCommon/msg_error.proto\"$\n\023Phone"
    "CaptchaRequest\022\r\n\005phone\030\001 \001(\t\"b\n\024PhoneCa"
    "ptchaResponse\022\025\n\rphone_captcha\030\001 \001(\t\022\r\n\005"
    "token\030\002 \001(\t\022$\n\005error\030\003 \001(\0132\025.grpcCommon."
    "GrpcError\"\243\001\n\014FileMetaData\0222\n\006labels\030\001 \003"
    "(\0132\".personal.FileMetaData.LabelsEntry\022\014"
    "\n\004type\030\002 \001(\t\022\r\n\005owner\030\003 \001(\t\022\023\n\013login_tok"
    "en\030\004 \001(\t\032-\n\013LabelsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005"
    "value\030\002 \001(\t:\0028\001\"Q\n\021UploadFileRequest\022)\n\t"
    "meta_data\030\001 \001(\0132\026.personal.FileMetaData\022"
    "\021\n\tfile_data\030\002 \001(\014\"\260\001\n\022UploadFileRespons"
    "e\022A\n\013upload_urls\030\001 \003(\0132,.personal.Upload"
    "FileResponse.UploadUrlsEntry\022$\n\005error\030\002 "
    "\001(\0132\025.grpcCommon.GrpcError\0321\n\017UploadUrls"
    "Entry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001B\037\n"
    "\024com.wanfang.personalP\001\242\002\004WFPRb\006proto3", 678);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "personalCenter/msg_common.proto", &protobuf_RegisterTypes);
  ::grpcCommon::protobuf_AddDesc_grpcCommon_2fmsg_5ferror_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_personalCenter_2fmsg_5fcommon_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_personalCenter_2fmsg_5fcommon_2eproto_once_);
void protobuf_AddDesc_personalCenter_2fmsg_5fcommon_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_personalCenter_2fmsg_5fcommon_2eproto_once_,
                 &protobuf_AddDesc_personalCenter_2fmsg_5fcommon_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_personalCenter_2fmsg_5fcommon_2eproto {
  StaticDescriptorInitializer_personalCenter_2fmsg_5fcommon_2eproto() {
    protobuf_AddDesc_personalCenter_2fmsg_5fcommon_2eproto();
  }
} static_descriptor_initializer_personalCenter_2fmsg_5fcommon_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PhoneCaptchaRequest::kPhoneFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PhoneCaptchaRequest::PhoneCaptchaRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_personalCenter_2fmsg_5fcommon_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:personal.PhoneCaptchaRequest)
}

void PhoneCaptchaRequest::InitAsDefaultInstance() {
}

PhoneCaptchaRequest::PhoneCaptchaRequest(const PhoneCaptchaRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:personal.PhoneCaptchaRequest)
}

void PhoneCaptchaRequest::SharedCtor() {
  phone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

PhoneCaptchaRequest::~PhoneCaptchaRequest() {
  // @@protoc_insertion_point(destructor:personal.PhoneCaptchaRequest)
  SharedDtor();
}

void PhoneCaptchaRequest::SharedDtor() {
  phone_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PhoneCaptchaRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PhoneCaptchaRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PhoneCaptchaRequest_descriptor_;
}

const PhoneCaptchaRequest& PhoneCaptchaRequest::default_instance() {
  protobuf_InitDefaults_personalCenter_2fmsg_5fcommon_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<PhoneCaptchaRequest> PhoneCaptchaRequest_default_instance_;

PhoneCaptchaRequest* PhoneCaptchaRequest::New(::google::protobuf::Arena* arena) const {
  PhoneCaptchaRequest* n = new PhoneCaptchaRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PhoneCaptchaRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:personal.PhoneCaptchaRequest)
  phone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PhoneCaptchaRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:personal.PhoneCaptchaRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string phone = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->phone().data(), this->phone().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "personal.PhoneCaptchaRequest.phone"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:personal.PhoneCaptchaRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:personal.PhoneCaptchaRequest)
  return false;
#undef DO_
}

void PhoneCaptchaRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:personal.PhoneCaptchaRequest)
  // optional string phone = 1;
  if (this->phone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "personal.PhoneCaptchaRequest.phone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->phone(), output);
  }

  // @@protoc_insertion_point(serialize_end:personal.PhoneCaptchaRequest)
}

::google::protobuf::uint8* PhoneCaptchaRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:personal.PhoneCaptchaRequest)
  // optional string phone = 1;
  if (this->phone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "personal.PhoneCaptchaRequest.phone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->phone(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:personal.PhoneCaptchaRequest)
  return target;
}

size_t PhoneCaptchaRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:personal.PhoneCaptchaRequest)
  size_t total_size = 0;

  // optional string phone = 1;
  if (this->phone().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->phone());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PhoneCaptchaRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:personal.PhoneCaptchaRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PhoneCaptchaRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PhoneCaptchaRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:personal.PhoneCaptchaRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:personal.PhoneCaptchaRequest)
    UnsafeMergeFrom(*source);
  }
}

void PhoneCaptchaRequest::MergeFrom(const PhoneCaptchaRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:personal.PhoneCaptchaRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void PhoneCaptchaRequest::UnsafeMergeFrom(const PhoneCaptchaRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.phone().size() > 0) {

    phone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.phone_);
  }
}

void PhoneCaptchaRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:personal.PhoneCaptchaRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PhoneCaptchaRequest::CopyFrom(const PhoneCaptchaRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:personal.PhoneCaptchaRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool PhoneCaptchaRequest::IsInitialized() const {

  return true;
}

void PhoneCaptchaRequest::Swap(PhoneCaptchaRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PhoneCaptchaRequest::InternalSwap(PhoneCaptchaRequest* other) {
  phone_.Swap(&other->phone_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PhoneCaptchaRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PhoneCaptchaRequest_descriptor_;
  metadata.reflection = PhoneCaptchaRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PhoneCaptchaRequest

// optional string phone = 1;
void PhoneCaptchaRequest::clear_phone() {
  phone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PhoneCaptchaRequest::phone() const {
  // @@protoc_insertion_point(field_get:personal.PhoneCaptchaRequest.phone)
  return phone_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PhoneCaptchaRequest::set_phone(const ::std::string& value) {
  
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:personal.PhoneCaptchaRequest.phone)
}
void PhoneCaptchaRequest::set_phone(const char* value) {
  
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:personal.PhoneCaptchaRequest.phone)
}
void PhoneCaptchaRequest::set_phone(const char* value, size_t size) {
  
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:personal.PhoneCaptchaRequest.phone)
}
::std::string* PhoneCaptchaRequest::mutable_phone() {
  
  // @@protoc_insertion_point(field_mutable:personal.PhoneCaptchaRequest.phone)
  return phone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PhoneCaptchaRequest::release_phone() {
  // @@protoc_insertion_point(field_release:personal.PhoneCaptchaRequest.phone)
  
  return phone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PhoneCaptchaRequest::set_allocated_phone(::std::string* phone) {
  if (phone != NULL) {
    
  } else {
    
  }
  phone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phone);
  // @@protoc_insertion_point(field_set_allocated:personal.PhoneCaptchaRequest.phone)
}

inline const PhoneCaptchaRequest* PhoneCaptchaRequest::internal_default_instance() {
  return &PhoneCaptchaRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PhoneCaptchaResponse::kPhoneCaptchaFieldNumber;
const int PhoneCaptchaResponse::kTokenFieldNumber;
const int PhoneCaptchaResponse::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PhoneCaptchaResponse::PhoneCaptchaResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_personalCenter_2fmsg_5fcommon_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:personal.PhoneCaptchaResponse)
}

void PhoneCaptchaResponse::InitAsDefaultInstance() {
  error_ = const_cast< ::grpcCommon::GrpcError*>(
      ::grpcCommon::GrpcError::internal_default_instance());
}

PhoneCaptchaResponse::PhoneCaptchaResponse(const PhoneCaptchaResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:personal.PhoneCaptchaResponse)
}

void PhoneCaptchaResponse::SharedCtor() {
  phone_captcha_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_ = NULL;
  _cached_size_ = 0;
}

PhoneCaptchaResponse::~PhoneCaptchaResponse() {
  // @@protoc_insertion_point(destructor:personal.PhoneCaptchaResponse)
  SharedDtor();
}

void PhoneCaptchaResponse::SharedDtor() {
  phone_captcha_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &PhoneCaptchaResponse_default_instance_.get()) {
    delete error_;
  }
}

void PhoneCaptchaResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PhoneCaptchaResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PhoneCaptchaResponse_descriptor_;
}

const PhoneCaptchaResponse& PhoneCaptchaResponse::default_instance() {
  protobuf_InitDefaults_personalCenter_2fmsg_5fcommon_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<PhoneCaptchaResponse> PhoneCaptchaResponse_default_instance_;

PhoneCaptchaResponse* PhoneCaptchaResponse::New(::google::protobuf::Arena* arena) const {
  PhoneCaptchaResponse* n = new PhoneCaptchaResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PhoneCaptchaResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:personal.PhoneCaptchaResponse)
  phone_captcha_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && error_ != NULL) delete error_;
  error_ = NULL;
}

bool PhoneCaptchaResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:personal.PhoneCaptchaResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string phone_captcha = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone_captcha()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->phone_captcha().data(), this->phone_captcha().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "personal.PhoneCaptchaResponse.phone_captcha"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }

      // optional string token = 2;
      case 2: {
        if (tag == 18) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "personal.PhoneCaptchaResponse.token"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_error;
        break;
      }

      // optional .grpcCommon.GrpcError error = 3;
      case 3: {
        if (tag == 26) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:personal.PhoneCaptchaResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:personal.PhoneCaptchaResponse)
  return false;
#undef DO_
}

void PhoneCaptchaResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:personal.PhoneCaptchaResponse)
  // optional string phone_captcha = 1;
  if (this->phone_captcha().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->phone_captcha().data(), this->phone_captcha().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "personal.PhoneCaptchaResponse.phone_captcha");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->phone_captcha(), output);
  }

  // optional string token = 2;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "personal.PhoneCaptchaResponse.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->token(), output);
  }

  // optional .grpcCommon.GrpcError error = 3;
  if (this->has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->error_, output);
  }

  // @@protoc_insertion_point(serialize_end:personal.PhoneCaptchaResponse)
}

::google::protobuf::uint8* PhoneCaptchaResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:personal.PhoneCaptchaResponse)
  // optional string phone_captcha = 1;
  if (this->phone_captcha().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->phone_captcha().data(), this->phone_captcha().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "personal.PhoneCaptchaResponse.phone_captcha");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->phone_captcha(), target);
  }

  // optional string token = 2;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "personal.PhoneCaptchaResponse.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  // optional .grpcCommon.GrpcError error = 3;
  if (this->has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->error_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:personal.PhoneCaptchaResponse)
  return target;
}

size_t PhoneCaptchaResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:personal.PhoneCaptchaResponse)
  size_t total_size = 0;

  // optional string phone_captcha = 1;
  if (this->phone_captcha().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->phone_captcha());
  }

  // optional string token = 2;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  // optional .grpcCommon.GrpcError error = 3;
  if (this->has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->error_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PhoneCaptchaResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:personal.PhoneCaptchaResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PhoneCaptchaResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PhoneCaptchaResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:personal.PhoneCaptchaResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:personal.PhoneCaptchaResponse)
    UnsafeMergeFrom(*source);
  }
}

void PhoneCaptchaResponse::MergeFrom(const PhoneCaptchaResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:personal.PhoneCaptchaResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void PhoneCaptchaResponse::UnsafeMergeFrom(const PhoneCaptchaResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.phone_captcha().size() > 0) {

    phone_captcha_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.phone_captcha_);
  }
  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.has_error()) {
    mutable_error()->::grpcCommon::GrpcError::MergeFrom(from.error());
  }
}

void PhoneCaptchaResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:personal.PhoneCaptchaResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PhoneCaptchaResponse::CopyFrom(const PhoneCaptchaResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:personal.PhoneCaptchaResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool PhoneCaptchaResponse::IsInitialized() const {

  return true;
}

void PhoneCaptchaResponse::Swap(PhoneCaptchaResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PhoneCaptchaResponse::InternalSwap(PhoneCaptchaResponse* other) {
  phone_captcha_.Swap(&other->phone_captcha_);
  token_.Swap(&other->token_);
  std::swap(error_, other->error_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PhoneCaptchaResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PhoneCaptchaResponse_descriptor_;
  metadata.reflection = PhoneCaptchaResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PhoneCaptchaResponse

// optional string phone_captcha = 1;
void PhoneCaptchaResponse::clear_phone_captcha() {
  phone_captcha_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PhoneCaptchaResponse::phone_captcha() const {
  // @@protoc_insertion_point(field_get:personal.PhoneCaptchaResponse.phone_captcha)
  return phone_captcha_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PhoneCaptchaResponse::set_phone_captcha(const ::std::string& value) {
  
  phone_captcha_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:personal.PhoneCaptchaResponse.phone_captcha)
}
void PhoneCaptchaResponse::set_phone_captcha(const char* value) {
  
  phone_captcha_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:personal.PhoneCaptchaResponse.phone_captcha)
}
void PhoneCaptchaResponse::set_phone_captcha(const char* value, size_t size) {
  
  phone_captcha_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:personal.PhoneCaptchaResponse.phone_captcha)
}
::std::string* PhoneCaptchaResponse::mutable_phone_captcha() {
  
  // @@protoc_insertion_point(field_mutable:personal.PhoneCaptchaResponse.phone_captcha)
  return phone_captcha_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PhoneCaptchaResponse::release_phone_captcha() {
  // @@protoc_insertion_point(field_release:personal.PhoneCaptchaResponse.phone_captcha)
  
  return phone_captcha_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PhoneCaptchaResponse::set_allocated_phone_captcha(::std::string* phone_captcha) {
  if (phone_captcha != NULL) {
    
  } else {
    
  }
  phone_captcha_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phone_captcha);
  // @@protoc_insertion_point(field_set_allocated:personal.PhoneCaptchaResponse.phone_captcha)
}

// optional string token = 2;
void PhoneCaptchaResponse::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PhoneCaptchaResponse::token() const {
  // @@protoc_insertion_point(field_get:personal.PhoneCaptchaResponse.token)
  return token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PhoneCaptchaResponse::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:personal.PhoneCaptchaResponse.token)
}
void PhoneCaptchaResponse::set_token(const char* value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:personal.PhoneCaptchaResponse.token)
}
void PhoneCaptchaResponse::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:personal.PhoneCaptchaResponse.token)
}
::std::string* PhoneCaptchaResponse::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:personal.PhoneCaptchaResponse.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PhoneCaptchaResponse::release_token() {
  // @@protoc_insertion_point(field_release:personal.PhoneCaptchaResponse.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PhoneCaptchaResponse::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:personal.PhoneCaptchaResponse.token)
}

// optional .grpcCommon.GrpcError error = 3;
bool PhoneCaptchaResponse::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
void PhoneCaptchaResponse::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) delete error_;
  error_ = NULL;
}
const ::grpcCommon::GrpcError& PhoneCaptchaResponse::error() const {
  // @@protoc_insertion_point(field_get:personal.PhoneCaptchaResponse.error)
  return error_ != NULL ? *error_
                         : *::grpcCommon::GrpcError::internal_default_instance();
}
::grpcCommon::GrpcError* PhoneCaptchaResponse::mutable_error() {
  
  if (error_ == NULL) {
    error_ = new ::grpcCommon::GrpcError;
  }
  // @@protoc_insertion_point(field_mutable:personal.PhoneCaptchaResponse.error)
  return error_;
}
::grpcCommon::GrpcError* PhoneCaptchaResponse::release_error() {
  // @@protoc_insertion_point(field_release:personal.PhoneCaptchaResponse.error)
  
  ::grpcCommon::GrpcError* temp = error_;
  error_ = NULL;
  return temp;
}
void PhoneCaptchaResponse::set_allocated_error(::grpcCommon::GrpcError* error) {
  delete error_;
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:personal.PhoneCaptchaResponse.error)
}

inline const PhoneCaptchaResponse* PhoneCaptchaResponse::internal_default_instance() {
  return &PhoneCaptchaResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileMetaData::kLabelsFieldNumber;
const int FileMetaData::kTypeFieldNumber;
const int FileMetaData::kOwnerFieldNumber;
const int FileMetaData::kLoginTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileMetaData::FileMetaData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_personalCenter_2fmsg_5fcommon_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:personal.FileMetaData)
}

void FileMetaData::InitAsDefaultInstance() {
}

FileMetaData::FileMetaData(const FileMetaData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:personal.FileMetaData)
}

void FileMetaData::SharedCtor() {
  labels_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  labels_.SetEntryDescriptor(
      &::personal::FileMetaData_LabelsEntry_descriptor_);
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  owner_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  login_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

FileMetaData::~FileMetaData() {
  // @@protoc_insertion_point(destructor:personal.FileMetaData)
  SharedDtor();
}

void FileMetaData::SharedDtor() {
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  owner_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  login_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FileMetaData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileMetaData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileMetaData_descriptor_;
}

const FileMetaData& FileMetaData::default_instance() {
  protobuf_InitDefaults_personalCenter_2fmsg_5fcommon_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<FileMetaData> FileMetaData_default_instance_;

FileMetaData* FileMetaData::New(::google::protobuf::Arena* arena) const {
  FileMetaData* n = new FileMetaData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FileMetaData::Clear() {
// @@protoc_insertion_point(message_clear_start:personal.FileMetaData)
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  owner_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  login_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  labels_.Clear();
}

bool FileMetaData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:personal.FileMetaData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, string> labels = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_labels:
          FileMetaData_LabelsEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&labels_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "personal.FileMetaData.LabelsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), parser.value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "personal.FileMetaData.LabelsEntry.value"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_labels;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }

      // optional string type = 2;
      case 2: {
        if (tag == 18) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "personal.FileMetaData.type"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_owner;
        break;
      }

      // optional string owner = 3;
      case 3: {
        if (tag == 26) {
         parse_owner:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_owner()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->owner().data(), this->owner().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "personal.FileMetaData.owner"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_login_token;
        break;
      }

      // optional string login_token = 4;
      case 4: {
        if (tag == 34) {
         parse_login_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_login_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->login_token().data(), this->login_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "personal.FileMetaData.login_token"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:personal.FileMetaData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:personal.FileMetaData)
  return false;
#undef DO_
}

void FileMetaData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:personal.FileMetaData)
  // map<string, string> labels = 1;
  if (!this->labels().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "personal.FileMetaData.LabelsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "personal.FileMetaData.LabelsEntry.value");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->labels().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->labels().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<FileMetaData_LabelsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(labels_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<FileMetaData_LabelsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it) {
        entry.reset(labels_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // optional string type = 2;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "personal.FileMetaData.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->type(), output);
  }

  // optional string owner = 3;
  if (this->owner().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->owner().data(), this->owner().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "personal.FileMetaData.owner");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->owner(), output);
  }

  // optional string login_token = 4;
  if (this->login_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->login_token().data(), this->login_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "personal.FileMetaData.login_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->login_token(), output);
  }

  // @@protoc_insertion_point(serialize_end:personal.FileMetaData)
}

::google::protobuf::uint8* FileMetaData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:personal.FileMetaData)
  // map<string, string> labels = 1;
  if (!this->labels().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "personal.FileMetaData.LabelsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "personal.FileMetaData.LabelsEntry.value");
      }
    };

    if (deterministic &&
        this->labels().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->labels().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<FileMetaData_LabelsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(labels_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<FileMetaData_LabelsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it) {
        entry.reset(labels_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // optional string type = 2;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "personal.FileMetaData.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // optional string owner = 3;
  if (this->owner().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->owner().data(), this->owner().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "personal.FileMetaData.owner");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->owner(), target);
  }

  // optional string login_token = 4;
  if (this->login_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->login_token().data(), this->login_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "personal.FileMetaData.login_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->login_token(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:personal.FileMetaData)
  return target;
}

size_t FileMetaData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:personal.FileMetaData)
  size_t total_size = 0;

  // optional string type = 2;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  // optional string owner = 3;
  if (this->owner().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->owner());
  }

  // optional string login_token = 4;
  if (this->login_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->login_token());
  }

  // map<string, string> labels = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->labels_size());
  {
    ::google::protobuf::scoped_ptr<FileMetaData_LabelsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->labels().begin();
        it != this->labels().end(); ++it) {
      entry.reset(labels_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileMetaData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:personal.FileMetaData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const FileMetaData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FileMetaData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:personal.FileMetaData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:personal.FileMetaData)
    UnsafeMergeFrom(*source);
  }
}

void FileMetaData::MergeFrom(const FileMetaData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:personal.FileMetaData)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void FileMetaData::UnsafeMergeFrom(const FileMetaData& from) {
  GOOGLE_DCHECK(&from != this);
  labels_.MergeFrom(from.labels_);
  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.owner().size() > 0) {

    owner_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.owner_);
  }
  if (from.login_token().size() > 0) {

    login_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.login_token_);
  }
}

void FileMetaData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:personal.FileMetaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileMetaData::CopyFrom(const FileMetaData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:personal.FileMetaData)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool FileMetaData::IsInitialized() const {

  return true;
}

void FileMetaData::Swap(FileMetaData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileMetaData::InternalSwap(FileMetaData* other) {
  labels_.Swap(&other->labels_);
  type_.Swap(&other->type_);
  owner_.Swap(&other->owner_);
  login_token_.Swap(&other->login_token_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FileMetaData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileMetaData_descriptor_;
  metadata.reflection = FileMetaData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FileMetaData

// map<string, string> labels = 1;
int FileMetaData::labels_size() const {
  return labels_.size();
}
void FileMetaData::clear_labels() {
  labels_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
FileMetaData::labels() const {
  // @@protoc_insertion_point(field_map:personal.FileMetaData.labels)
  return labels_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
FileMetaData::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:personal.FileMetaData.labels)
  return labels_.MutableMap();
}

// optional string type = 2;
void FileMetaData::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& FileMetaData::type() const {
  // @@protoc_insertion_point(field_get:personal.FileMetaData.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FileMetaData::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:personal.FileMetaData.type)
}
void FileMetaData::set_type(const char* value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:personal.FileMetaData.type)
}
void FileMetaData::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:personal.FileMetaData.type)
}
::std::string* FileMetaData::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:personal.FileMetaData.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FileMetaData::release_type() {
  // @@protoc_insertion_point(field_release:personal.FileMetaData.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FileMetaData::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:personal.FileMetaData.type)
}

// optional string owner = 3;
void FileMetaData::clear_owner() {
  owner_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& FileMetaData::owner() const {
  // @@protoc_insertion_point(field_get:personal.FileMetaData.owner)
  return owner_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FileMetaData::set_owner(const ::std::string& value) {
  
  owner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:personal.FileMetaData.owner)
}
void FileMetaData::set_owner(const char* value) {
  
  owner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:personal.FileMetaData.owner)
}
void FileMetaData::set_owner(const char* value, size_t size) {
  
  owner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:personal.FileMetaData.owner)
}
::std::string* FileMetaData::mutable_owner() {
  
  // @@protoc_insertion_point(field_mutable:personal.FileMetaData.owner)
  return owner_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FileMetaData::release_owner() {
  // @@protoc_insertion_point(field_release:personal.FileMetaData.owner)
  
  return owner_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FileMetaData::set_allocated_owner(::std::string* owner) {
  if (owner != NULL) {
    
  } else {
    
  }
  owner_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), owner);
  // @@protoc_insertion_point(field_set_allocated:personal.FileMetaData.owner)
}

// optional string login_token = 4;
void FileMetaData::clear_login_token() {
  login_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& FileMetaData::login_token() const {
  // @@protoc_insertion_point(field_get:personal.FileMetaData.login_token)
  return login_token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FileMetaData::set_login_token(const ::std::string& value) {
  
  login_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:personal.FileMetaData.login_token)
}
void FileMetaData::set_login_token(const char* value) {
  
  login_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:personal.FileMetaData.login_token)
}
void FileMetaData::set_login_token(const char* value, size_t size) {
  
  login_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:personal.FileMetaData.login_token)
}
::std::string* FileMetaData::mutable_login_token() {
  
  // @@protoc_insertion_point(field_mutable:personal.FileMetaData.login_token)
  return login_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FileMetaData::release_login_token() {
  // @@protoc_insertion_point(field_release:personal.FileMetaData.login_token)
  
  return login_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FileMetaData::set_allocated_login_token(::std::string* login_token) {
  if (login_token != NULL) {
    
  } else {
    
  }
  login_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), login_token);
  // @@protoc_insertion_point(field_set_allocated:personal.FileMetaData.login_token)
}

inline const FileMetaData* FileMetaData::internal_default_instance() {
  return &FileMetaData_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UploadFileRequest::kMetaDataFieldNumber;
const int UploadFileRequest::kFileDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UploadFileRequest::UploadFileRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_personalCenter_2fmsg_5fcommon_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:personal.UploadFileRequest)
}

void UploadFileRequest::InitAsDefaultInstance() {
  meta_data_ = const_cast< ::personal::FileMetaData*>(
      ::personal::FileMetaData::internal_default_instance());
}

UploadFileRequest::UploadFileRequest(const UploadFileRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:personal.UploadFileRequest)
}

void UploadFileRequest::SharedCtor() {
  file_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  meta_data_ = NULL;
  _cached_size_ = 0;
}

UploadFileRequest::~UploadFileRequest() {
  // @@protoc_insertion_point(destructor:personal.UploadFileRequest)
  SharedDtor();
}

void UploadFileRequest::SharedDtor() {
  file_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &UploadFileRequest_default_instance_.get()) {
    delete meta_data_;
  }
}

void UploadFileRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UploadFileRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UploadFileRequest_descriptor_;
}

const UploadFileRequest& UploadFileRequest::default_instance() {
  protobuf_InitDefaults_personalCenter_2fmsg_5fcommon_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<UploadFileRequest> UploadFileRequest_default_instance_;

UploadFileRequest* UploadFileRequest::New(::google::protobuf::Arena* arena) const {
  UploadFileRequest* n = new UploadFileRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UploadFileRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:personal.UploadFileRequest)
  if (GetArenaNoVirtual() == NULL && meta_data_ != NULL) delete meta_data_;
  meta_data_ = NULL;
  file_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool UploadFileRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:personal.UploadFileRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .personal.FileMetaData meta_data = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_meta_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_file_data;
        break;
      }

      // optional bytes file_data = 2;
      case 2: {
        if (tag == 18) {
         parse_file_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_file_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:personal.UploadFileRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:personal.UploadFileRequest)
  return false;
#undef DO_
}

void UploadFileRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:personal.UploadFileRequest)
  // optional .personal.FileMetaData meta_data = 1;
  if (this->has_meta_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->meta_data_, output);
  }

  // optional bytes file_data = 2;
  if (this->file_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->file_data(), output);
  }

  // @@protoc_insertion_point(serialize_end:personal.UploadFileRequest)
}

::google::protobuf::uint8* UploadFileRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:personal.UploadFileRequest)
  // optional .personal.FileMetaData meta_data = 1;
  if (this->has_meta_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->meta_data_, false, target);
  }

  // optional bytes file_data = 2;
  if (this->file_data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->file_data(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:personal.UploadFileRequest)
  return target;
}

size_t UploadFileRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:personal.UploadFileRequest)
  size_t total_size = 0;

  // optional .personal.FileMetaData meta_data = 1;
  if (this->has_meta_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->meta_data_);
  }

  // optional bytes file_data = 2;
  if (this->file_data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->file_data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UploadFileRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:personal.UploadFileRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UploadFileRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UploadFileRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:personal.UploadFileRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:personal.UploadFileRequest)
    UnsafeMergeFrom(*source);
  }
}

void UploadFileRequest::MergeFrom(const UploadFileRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:personal.UploadFileRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void UploadFileRequest::UnsafeMergeFrom(const UploadFileRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_meta_data()) {
    mutable_meta_data()->::personal::FileMetaData::MergeFrom(from.meta_data());
  }
  if (from.file_data().size() > 0) {

    file_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_data_);
  }
}

void UploadFileRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:personal.UploadFileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UploadFileRequest::CopyFrom(const UploadFileRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:personal.UploadFileRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool UploadFileRequest::IsInitialized() const {

  return true;
}

void UploadFileRequest::Swap(UploadFileRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UploadFileRequest::InternalSwap(UploadFileRequest* other) {
  std::swap(meta_data_, other->meta_data_);
  file_data_.Swap(&other->file_data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UploadFileRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UploadFileRequest_descriptor_;
  metadata.reflection = UploadFileRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UploadFileRequest

// optional .personal.FileMetaData meta_data = 1;
bool UploadFileRequest::has_meta_data() const {
  return this != internal_default_instance() && meta_data_ != NULL;
}
void UploadFileRequest::clear_meta_data() {
  if (GetArenaNoVirtual() == NULL && meta_data_ != NULL) delete meta_data_;
  meta_data_ = NULL;
}
const ::personal::FileMetaData& UploadFileRequest::meta_data() const {
  // @@protoc_insertion_point(field_get:personal.UploadFileRequest.meta_data)
  return meta_data_ != NULL ? *meta_data_
                         : *::personal::FileMetaData::internal_default_instance();
}
::personal::FileMetaData* UploadFileRequest::mutable_meta_data() {
  
  if (meta_data_ == NULL) {
    meta_data_ = new ::personal::FileMetaData;
  }
  // @@protoc_insertion_point(field_mutable:personal.UploadFileRequest.meta_data)
  return meta_data_;
}
::personal::FileMetaData* UploadFileRequest::release_meta_data() {
  // @@protoc_insertion_point(field_release:personal.UploadFileRequest.meta_data)
  
  ::personal::FileMetaData* temp = meta_data_;
  meta_data_ = NULL;
  return temp;
}
void UploadFileRequest::set_allocated_meta_data(::personal::FileMetaData* meta_data) {
  delete meta_data_;
  meta_data_ = meta_data;
  if (meta_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:personal.UploadFileRequest.meta_data)
}

// optional bytes file_data = 2;
void UploadFileRequest::clear_file_data() {
  file_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UploadFileRequest::file_data() const {
  // @@protoc_insertion_point(field_get:personal.UploadFileRequest.file_data)
  return file_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UploadFileRequest::set_file_data(const ::std::string& value) {
  
  file_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:personal.UploadFileRequest.file_data)
}
void UploadFileRequest::set_file_data(const char* value) {
  
  file_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:personal.UploadFileRequest.file_data)
}
void UploadFileRequest::set_file_data(const void* value, size_t size) {
  
  file_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:personal.UploadFileRequest.file_data)
}
::std::string* UploadFileRequest::mutable_file_data() {
  
  // @@protoc_insertion_point(field_mutable:personal.UploadFileRequest.file_data)
  return file_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UploadFileRequest::release_file_data() {
  // @@protoc_insertion_point(field_release:personal.UploadFileRequest.file_data)
  
  return file_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UploadFileRequest::set_allocated_file_data(::std::string* file_data) {
  if (file_data != NULL) {
    
  } else {
    
  }
  file_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_data);
  // @@protoc_insertion_point(field_set_allocated:personal.UploadFileRequest.file_data)
}

inline const UploadFileRequest* UploadFileRequest::internal_default_instance() {
  return &UploadFileRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UploadFileResponse::kUploadUrlsFieldNumber;
const int UploadFileResponse::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UploadFileResponse::UploadFileResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_personalCenter_2fmsg_5fcommon_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:personal.UploadFileResponse)
}

void UploadFileResponse::InitAsDefaultInstance() {
  error_ = const_cast< ::grpcCommon::GrpcError*>(
      ::grpcCommon::GrpcError::internal_default_instance());
}

UploadFileResponse::UploadFileResponse(const UploadFileResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:personal.UploadFileResponse)
}

void UploadFileResponse::SharedCtor() {
  upload_urls_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  upload_urls_.SetEntryDescriptor(
      &::personal::UploadFileResponse_UploadUrlsEntry_descriptor_);
  error_ = NULL;
  _cached_size_ = 0;
}

UploadFileResponse::~UploadFileResponse() {
  // @@protoc_insertion_point(destructor:personal.UploadFileResponse)
  SharedDtor();
}

void UploadFileResponse::SharedDtor() {
  if (this != &UploadFileResponse_default_instance_.get()) {
    delete error_;
  }
}

void UploadFileResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UploadFileResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UploadFileResponse_descriptor_;
}

const UploadFileResponse& UploadFileResponse::default_instance() {
  protobuf_InitDefaults_personalCenter_2fmsg_5fcommon_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<UploadFileResponse> UploadFileResponse_default_instance_;

UploadFileResponse* UploadFileResponse::New(::google::protobuf::Arena* arena) const {
  UploadFileResponse* n = new UploadFileResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UploadFileResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:personal.UploadFileResponse)
  if (GetArenaNoVirtual() == NULL && error_ != NULL) delete error_;
  error_ = NULL;
  upload_urls_.Clear();
}

bool UploadFileResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:personal.UploadFileResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, string> upload_urls = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_upload_urls:
          UploadFileResponse_UploadUrlsEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&upload_urls_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "personal.UploadFileResponse.UploadUrlsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), parser.value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "personal.UploadFileResponse.UploadUrlsEntry.value"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_upload_urls;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional .grpcCommon.GrpcError error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:personal.UploadFileResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:personal.UploadFileResponse)
  return false;
#undef DO_
}

void UploadFileResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:personal.UploadFileResponse)
  // map<string, string> upload_urls = 1;
  if (!this->upload_urls().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "personal.UploadFileResponse.UploadUrlsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "personal.UploadFileResponse.UploadUrlsEntry.value");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->upload_urls().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->upload_urls().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->upload_urls().begin();
          it != this->upload_urls().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<UploadFileResponse_UploadUrlsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(upload_urls_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<UploadFileResponse_UploadUrlsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->upload_urls().begin();
          it != this->upload_urls().end(); ++it) {
        entry.reset(upload_urls_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // optional .grpcCommon.GrpcError error = 2;
  if (this->has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->error_, output);
  }

  // @@protoc_insertion_point(serialize_end:personal.UploadFileResponse)
}

::google::protobuf::uint8* UploadFileResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:personal.UploadFileResponse)
  // map<string, string> upload_urls = 1;
  if (!this->upload_urls().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "personal.UploadFileResponse.UploadUrlsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "personal.UploadFileResponse.UploadUrlsEntry.value");
      }
    };

    if (deterministic &&
        this->upload_urls().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->upload_urls().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->upload_urls().begin();
          it != this->upload_urls().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<UploadFileResponse_UploadUrlsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(upload_urls_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<UploadFileResponse_UploadUrlsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->upload_urls().begin();
          it != this->upload_urls().end(); ++it) {
        entry.reset(upload_urls_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // optional .grpcCommon.GrpcError error = 2;
  if (this->has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->error_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:personal.UploadFileResponse)
  return target;
}

size_t UploadFileResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:personal.UploadFileResponse)
  size_t total_size = 0;

  // optional .grpcCommon.GrpcError error = 2;
  if (this->has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->error_);
  }

  // map<string, string> upload_urls = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->upload_urls_size());
  {
    ::google::protobuf::scoped_ptr<UploadFileResponse_UploadUrlsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->upload_urls().begin();
        it != this->upload_urls().end(); ++it) {
      entry.reset(upload_urls_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UploadFileResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:personal.UploadFileResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UploadFileResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UploadFileResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:personal.UploadFileResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:personal.UploadFileResponse)
    UnsafeMergeFrom(*source);
  }
}

void UploadFileResponse::MergeFrom(const UploadFileResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:personal.UploadFileResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void UploadFileResponse::UnsafeMergeFrom(const UploadFileResponse& from) {
  GOOGLE_DCHECK(&from != this);
  upload_urls_.MergeFrom(from.upload_urls_);
  if (from.has_error()) {
    mutable_error()->::grpcCommon::GrpcError::MergeFrom(from.error());
  }
}

void UploadFileResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:personal.UploadFileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UploadFileResponse::CopyFrom(const UploadFileResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:personal.UploadFileResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool UploadFileResponse::IsInitialized() const {

  return true;
}

void UploadFileResponse::Swap(UploadFileResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UploadFileResponse::InternalSwap(UploadFileResponse* other) {
  upload_urls_.Swap(&other->upload_urls_);
  std::swap(error_, other->error_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UploadFileResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UploadFileResponse_descriptor_;
  metadata.reflection = UploadFileResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UploadFileResponse

// map<string, string> upload_urls = 1;
int UploadFileResponse::upload_urls_size() const {
  return upload_urls_.size();
}
void UploadFileResponse::clear_upload_urls() {
  upload_urls_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
UploadFileResponse::upload_urls() const {
  // @@protoc_insertion_point(field_map:personal.UploadFileResponse.upload_urls)
  return upload_urls_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
UploadFileResponse::mutable_upload_urls() {
  // @@protoc_insertion_point(field_mutable_map:personal.UploadFileResponse.upload_urls)
  return upload_urls_.MutableMap();
}

// optional .grpcCommon.GrpcError error = 2;
bool UploadFileResponse::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
void UploadFileResponse::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) delete error_;
  error_ = NULL;
}
const ::grpcCommon::GrpcError& UploadFileResponse::error() const {
  // @@protoc_insertion_point(field_get:personal.UploadFileResponse.error)
  return error_ != NULL ? *error_
                         : *::grpcCommon::GrpcError::internal_default_instance();
}
::grpcCommon::GrpcError* UploadFileResponse::mutable_error() {
  
  if (error_ == NULL) {
    error_ = new ::grpcCommon::GrpcError;
  }
  // @@protoc_insertion_point(field_mutable:personal.UploadFileResponse.error)
  return error_;
}
::grpcCommon::GrpcError* UploadFileResponse::release_error() {
  // @@protoc_insertion_point(field_release:personal.UploadFileResponse.error)
  
  ::grpcCommon::GrpcError* temp = error_;
  error_ = NULL;
  return temp;
}
void UploadFileResponse::set_allocated_error(::grpcCommon::GrpcError* error) {
  delete error_;
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:personal.UploadFileResponse.error)
}

inline const UploadFileResponse* UploadFileResponse::internal_default_instance() {
  return &UploadFileResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace personal

// @@protoc_insertion_point(global_scope)
