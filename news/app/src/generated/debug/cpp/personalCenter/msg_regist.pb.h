// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: personalCenter/msg_regist.proto

#ifndef PROTOBUF_personalCenter_2fmsg_5fregist_2eproto__INCLUDED
#define PROTOBUF_personalCenter_2fmsg_5fregist_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "grpcCommon/msg_error.pb.h"
// @@protoc_insertion_point(includes)

namespace personal {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_personalCenter_2fmsg_5fregist_2eproto();
void protobuf_InitDefaults_personalCenter_2fmsg_5fregist_2eproto();
void protobuf_AssignDesc_personalCenter_2fmsg_5fregist_2eproto();
void protobuf_ShutdownFile_personalCenter_2fmsg_5fregist_2eproto();

class CheckUserNameIsExistRequest;
class CheckUserNameIsExistResponse;
class RegistRequest;
class RegistResponse;
class UpdateRegistInfoRequest;
class UpdateRegistInfoResponse;

// ===================================================================

class CheckUserNameIsExistRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:personal.CheckUserNameIsExistRequest) */ {
 public:
  CheckUserNameIsExistRequest();
  virtual ~CheckUserNameIsExistRequest();

  CheckUserNameIsExistRequest(const CheckUserNameIsExistRequest& from);

  inline CheckUserNameIsExistRequest& operator=(const CheckUserNameIsExistRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CheckUserNameIsExistRequest& default_instance();

  static const CheckUserNameIsExistRequest* internal_default_instance();

  void Swap(CheckUserNameIsExistRequest* other);

  // implements Message ----------------------------------------------

  inline CheckUserNameIsExistRequest* New() const { return New(NULL); }

  CheckUserNameIsExistRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CheckUserNameIsExistRequest& from);
  void MergeFrom(const CheckUserNameIsExistRequest& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CheckUserNameIsExistRequest* other);
  void UnsafeMergeFrom(const CheckUserNameIsExistRequest& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string user_name = 1;
  void clear_user_name();
  static const int kUserNameFieldNumber = 1;
  const ::std::string& user_name() const;
  void set_user_name(const ::std::string& value);
  void set_user_name(const char* value);
  void set_user_name(const char* value, size_t size);
  ::std::string* mutable_user_name();
  ::std::string* release_user_name();
  void set_allocated_user_name(::std::string* user_name);

  // @@protoc_insertion_point(class_scope:personal.CheckUserNameIsExistRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr user_name_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_personalCenter_2fmsg_5fregist_2eproto_impl();
  friend void  protobuf_AddDesc_personalCenter_2fmsg_5fregist_2eproto_impl();
  friend void protobuf_AssignDesc_personalCenter_2fmsg_5fregist_2eproto();
  friend void protobuf_ShutdownFile_personalCenter_2fmsg_5fregist_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<CheckUserNameIsExistRequest> CheckUserNameIsExistRequest_default_instance_;

// -------------------------------------------------------------------

class CheckUserNameIsExistResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:personal.CheckUserNameIsExistResponse) */ {
 public:
  CheckUserNameIsExistResponse();
  virtual ~CheckUserNameIsExistResponse();

  CheckUserNameIsExistResponse(const CheckUserNameIsExistResponse& from);

  inline CheckUserNameIsExistResponse& operator=(const CheckUserNameIsExistResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CheckUserNameIsExistResponse& default_instance();

  static const CheckUserNameIsExistResponse* internal_default_instance();

  void Swap(CheckUserNameIsExistResponse* other);

  // implements Message ----------------------------------------------

  inline CheckUserNameIsExistResponse* New() const { return New(NULL); }

  CheckUserNameIsExistResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CheckUserNameIsExistResponse& from);
  void MergeFrom(const CheckUserNameIsExistResponse& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CheckUserNameIsExistResponse* other);
  void UnsafeMergeFrom(const CheckUserNameIsExistResponse& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool is_exist = 1;
  void clear_is_exist();
  static const int kIsExistFieldNumber = 1;
  bool is_exist() const;
  void set_is_exist(bool value);

  // optional .grpcCommon.GrpcError error = 2;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 2;
  const ::grpcCommon::GrpcError& error() const;
  ::grpcCommon::GrpcError* mutable_error();
  ::grpcCommon::GrpcError* release_error();
  void set_allocated_error(::grpcCommon::GrpcError* error);

  // @@protoc_insertion_point(class_scope:personal.CheckUserNameIsExistResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::grpcCommon::GrpcError* error_;
  bool is_exist_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_personalCenter_2fmsg_5fregist_2eproto_impl();
  friend void  protobuf_AddDesc_personalCenter_2fmsg_5fregist_2eproto_impl();
  friend void protobuf_AssignDesc_personalCenter_2fmsg_5fregist_2eproto();
  friend void protobuf_ShutdownFile_personalCenter_2fmsg_5fregist_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<CheckUserNameIsExistResponse> CheckUserNameIsExistResponse_default_instance_;

// -------------------------------------------------------------------

class RegistRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:personal.RegistRequest) */ {
 public:
  RegistRequest();
  virtual ~RegistRequest();

  RegistRequest(const RegistRequest& from);

  inline RegistRequest& operator=(const RegistRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegistRequest& default_instance();

  static const RegistRequest* internal_default_instance();

  void Swap(RegistRequest* other);

  // implements Message ----------------------------------------------

  inline RegistRequest* New() const { return New(NULL); }

  RegistRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegistRequest& from);
  void MergeFrom(const RegistRequest& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RegistRequest* other);
  void UnsafeMergeFrom(const RegistRequest& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string user_name = 1;
  void clear_user_name();
  static const int kUserNameFieldNumber = 1;
  const ::std::string& user_name() const;
  void set_user_name(const ::std::string& value);
  void set_user_name(const char* value);
  void set_user_name(const char* value, size_t size);
  ::std::string* mutable_user_name();
  ::std::string* release_user_name();
  void set_allocated_user_name(::std::string* user_name);

  // optional string password = 2;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // optional string phone = 3;
  void clear_phone();
  static const int kPhoneFieldNumber = 3;
  const ::std::string& phone() const;
  void set_phone(const ::std::string& value);
  void set_phone(const char* value);
  void set_phone(const char* value, size_t size);
  ::std::string* mutable_phone();
  ::std::string* release_phone();
  void set_allocated_phone(::std::string* phone);

  // @@protoc_insertion_point(class_scope:personal.RegistRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr user_name_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::internal::ArenaStringPtr phone_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_personalCenter_2fmsg_5fregist_2eproto_impl();
  friend void  protobuf_AddDesc_personalCenter_2fmsg_5fregist_2eproto_impl();
  friend void protobuf_AssignDesc_personalCenter_2fmsg_5fregist_2eproto();
  friend void protobuf_ShutdownFile_personalCenter_2fmsg_5fregist_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<RegistRequest> RegistRequest_default_instance_;

// -------------------------------------------------------------------

class RegistResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:personal.RegistResponse) */ {
 public:
  RegistResponse();
  virtual ~RegistResponse();

  RegistResponse(const RegistResponse& from);

  inline RegistResponse& operator=(const RegistResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegistResponse& default_instance();

  static const RegistResponse* internal_default_instance();

  void Swap(RegistResponse* other);

  // implements Message ----------------------------------------------

  inline RegistResponse* New() const { return New(NULL); }

  RegistResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegistResponse& from);
  void MergeFrom(const RegistResponse& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RegistResponse* other);
  void UnsafeMergeFrom(const RegistResponse& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // optional .grpcCommon.GrpcError error = 2;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 2;
  const ::grpcCommon::GrpcError& error() const;
  ::grpcCommon::GrpcError* mutable_error();
  ::grpcCommon::GrpcError* release_error();
  void set_allocated_error(::grpcCommon::GrpcError* error);

  // @@protoc_insertion_point(class_scope:personal.RegistResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::grpcCommon::GrpcError* error_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_personalCenter_2fmsg_5fregist_2eproto_impl();
  friend void  protobuf_AddDesc_personalCenter_2fmsg_5fregist_2eproto_impl();
  friend void protobuf_AssignDesc_personalCenter_2fmsg_5fregist_2eproto();
  friend void protobuf_ShutdownFile_personalCenter_2fmsg_5fregist_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<RegistResponse> RegistResponse_default_instance_;

// -------------------------------------------------------------------

class UpdateRegistInfoRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:personal.UpdateRegistInfoRequest) */ {
 public:
  UpdateRegistInfoRequest();
  virtual ~UpdateRegistInfoRequest();

  UpdateRegistInfoRequest(const UpdateRegistInfoRequest& from);

  inline UpdateRegistInfoRequest& operator=(const UpdateRegistInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateRegistInfoRequest& default_instance();

  static const UpdateRegistInfoRequest* internal_default_instance();

  void Swap(UpdateRegistInfoRequest* other);

  // implements Message ----------------------------------------------

  inline UpdateRegistInfoRequest* New() const { return New(NULL); }

  UpdateRegistInfoRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateRegistInfoRequest& from);
  void MergeFrom(const UpdateRegistInfoRequest& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UpdateRegistInfoRequest* other);
  void UnsafeMergeFrom(const UpdateRegistInfoRequest& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // optional string email = 2;
  void clear_email();
  static const int kEmailFieldNumber = 2;
  const ::std::string& email() const;
  void set_email(const ::std::string& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  ::std::string* mutable_email();
  ::std::string* release_email();
  void set_allocated_email(::std::string* email);

  // optional string interest_subject = 3;
  void clear_interest_subject();
  static const int kInterestSubjectFieldNumber = 3;
  const ::std::string& interest_subject() const;
  void set_interest_subject(const ::std::string& value);
  void set_interest_subject(const char* value);
  void set_interest_subject(const char* value, size_t size);
  ::std::string* mutable_interest_subject();
  ::std::string* release_interest_subject();
  void set_allocated_interest_subject(::std::string* interest_subject);

  // @@protoc_insertion_point(class_scope:personal.UpdateRegistInfoRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr email_;
  ::google::protobuf::internal::ArenaStringPtr interest_subject_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_personalCenter_2fmsg_5fregist_2eproto_impl();
  friend void  protobuf_AddDesc_personalCenter_2fmsg_5fregist_2eproto_impl();
  friend void protobuf_AssignDesc_personalCenter_2fmsg_5fregist_2eproto();
  friend void protobuf_ShutdownFile_personalCenter_2fmsg_5fregist_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<UpdateRegistInfoRequest> UpdateRegistInfoRequest_default_instance_;

// -------------------------------------------------------------------

class UpdateRegistInfoResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:personal.UpdateRegistInfoResponse) */ {
 public:
  UpdateRegistInfoResponse();
  virtual ~UpdateRegistInfoResponse();

  UpdateRegistInfoResponse(const UpdateRegistInfoResponse& from);

  inline UpdateRegistInfoResponse& operator=(const UpdateRegistInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateRegistInfoResponse& default_instance();

  static const UpdateRegistInfoResponse* internal_default_instance();

  void Swap(UpdateRegistInfoResponse* other);

  // implements Message ----------------------------------------------

  inline UpdateRegistInfoResponse* New() const { return New(NULL); }

  UpdateRegistInfoResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateRegistInfoResponse& from);
  void MergeFrom(const UpdateRegistInfoResponse& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UpdateRegistInfoResponse* other);
  void UnsafeMergeFrom(const UpdateRegistInfoResponse& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .grpcCommon.GrpcError error = 1;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  const ::grpcCommon::GrpcError& error() const;
  ::grpcCommon::GrpcError* mutable_error();
  ::grpcCommon::GrpcError* release_error();
  void set_allocated_error(::grpcCommon::GrpcError* error);

  // @@protoc_insertion_point(class_scope:personal.UpdateRegistInfoResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::grpcCommon::GrpcError* error_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_personalCenter_2fmsg_5fregist_2eproto_impl();
  friend void  protobuf_AddDesc_personalCenter_2fmsg_5fregist_2eproto_impl();
  friend void protobuf_AssignDesc_personalCenter_2fmsg_5fregist_2eproto();
  friend void protobuf_ShutdownFile_personalCenter_2fmsg_5fregist_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<UpdateRegistInfoResponse> UpdateRegistInfoResponse_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// CheckUserNameIsExistRequest

// optional string user_name = 1;
inline void CheckUserNameIsExistRequest::clear_user_name() {
  user_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CheckUserNameIsExistRequest::user_name() const {
  // @@protoc_insertion_point(field_get:personal.CheckUserNameIsExistRequest.user_name)
  return user_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CheckUserNameIsExistRequest::set_user_name(const ::std::string& value) {
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:personal.CheckUserNameIsExistRequest.user_name)
}
inline void CheckUserNameIsExistRequest::set_user_name(const char* value) {
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:personal.CheckUserNameIsExistRequest.user_name)
}
inline void CheckUserNameIsExistRequest::set_user_name(const char* value, size_t size) {
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:personal.CheckUserNameIsExistRequest.user_name)
}
inline ::std::string* CheckUserNameIsExistRequest::mutable_user_name() {
  
  // @@protoc_insertion_point(field_mutable:personal.CheckUserNameIsExistRequest.user_name)
  return user_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CheckUserNameIsExistRequest::release_user_name() {
  // @@protoc_insertion_point(field_release:personal.CheckUserNameIsExistRequest.user_name)
  
  return user_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CheckUserNameIsExistRequest::set_allocated_user_name(::std::string* user_name) {
  if (user_name != NULL) {
    
  } else {
    
  }
  user_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_name);
  // @@protoc_insertion_point(field_set_allocated:personal.CheckUserNameIsExistRequest.user_name)
}

inline const CheckUserNameIsExistRequest* CheckUserNameIsExistRequest::internal_default_instance() {
  return &CheckUserNameIsExistRequest_default_instance_.get();
}
// -------------------------------------------------------------------

// CheckUserNameIsExistResponse

// optional bool is_exist = 1;
inline void CheckUserNameIsExistResponse::clear_is_exist() {
  is_exist_ = false;
}
inline bool CheckUserNameIsExistResponse::is_exist() const {
  // @@protoc_insertion_point(field_get:personal.CheckUserNameIsExistResponse.is_exist)
  return is_exist_;
}
inline void CheckUserNameIsExistResponse::set_is_exist(bool value) {
  
  is_exist_ = value;
  // @@protoc_insertion_point(field_set:personal.CheckUserNameIsExistResponse.is_exist)
}

// optional .grpcCommon.GrpcError error = 2;
inline bool CheckUserNameIsExistResponse::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
inline void CheckUserNameIsExistResponse::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) delete error_;
  error_ = NULL;
}
inline const ::grpcCommon::GrpcError& CheckUserNameIsExistResponse::error() const {
  // @@protoc_insertion_point(field_get:personal.CheckUserNameIsExistResponse.error)
  return error_ != NULL ? *error_
                         : *::grpcCommon::GrpcError::internal_default_instance();
}
inline ::grpcCommon::GrpcError* CheckUserNameIsExistResponse::mutable_error() {
  
  if (error_ == NULL) {
    error_ = new ::grpcCommon::GrpcError;
  }
  // @@protoc_insertion_point(field_mutable:personal.CheckUserNameIsExistResponse.error)
  return error_;
}
inline ::grpcCommon::GrpcError* CheckUserNameIsExistResponse::release_error() {
  // @@protoc_insertion_point(field_release:personal.CheckUserNameIsExistResponse.error)
  
  ::grpcCommon::GrpcError* temp = error_;
  error_ = NULL;
  return temp;
}
inline void CheckUserNameIsExistResponse::set_allocated_error(::grpcCommon::GrpcError* error) {
  delete error_;
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:personal.CheckUserNameIsExistResponse.error)
}

inline const CheckUserNameIsExistResponse* CheckUserNameIsExistResponse::internal_default_instance() {
  return &CheckUserNameIsExistResponse_default_instance_.get();
}
// -------------------------------------------------------------------

// RegistRequest

// optional string user_name = 1;
inline void RegistRequest::clear_user_name() {
  user_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RegistRequest::user_name() const {
  // @@protoc_insertion_point(field_get:personal.RegistRequest.user_name)
  return user_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegistRequest::set_user_name(const ::std::string& value) {
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:personal.RegistRequest.user_name)
}
inline void RegistRequest::set_user_name(const char* value) {
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:personal.RegistRequest.user_name)
}
inline void RegistRequest::set_user_name(const char* value, size_t size) {
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:personal.RegistRequest.user_name)
}
inline ::std::string* RegistRequest::mutable_user_name() {
  
  // @@protoc_insertion_point(field_mutable:personal.RegistRequest.user_name)
  return user_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegistRequest::release_user_name() {
  // @@protoc_insertion_point(field_release:personal.RegistRequest.user_name)
  
  return user_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegistRequest::set_allocated_user_name(::std::string* user_name) {
  if (user_name != NULL) {
    
  } else {
    
  }
  user_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_name);
  // @@protoc_insertion_point(field_set_allocated:personal.RegistRequest.user_name)
}

// optional string password = 2;
inline void RegistRequest::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RegistRequest::password() const {
  // @@protoc_insertion_point(field_get:personal.RegistRequest.password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegistRequest::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:personal.RegistRequest.password)
}
inline void RegistRequest::set_password(const char* value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:personal.RegistRequest.password)
}
inline void RegistRequest::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:personal.RegistRequest.password)
}
inline ::std::string* RegistRequest::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:personal.RegistRequest.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegistRequest::release_password() {
  // @@protoc_insertion_point(field_release:personal.RegistRequest.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegistRequest::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:personal.RegistRequest.password)
}

// optional string phone = 3;
inline void RegistRequest::clear_phone() {
  phone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RegistRequest::phone() const {
  // @@protoc_insertion_point(field_get:personal.RegistRequest.phone)
  return phone_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegistRequest::set_phone(const ::std::string& value) {
  
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:personal.RegistRequest.phone)
}
inline void RegistRequest::set_phone(const char* value) {
  
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:personal.RegistRequest.phone)
}
inline void RegistRequest::set_phone(const char* value, size_t size) {
  
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:personal.RegistRequest.phone)
}
inline ::std::string* RegistRequest::mutable_phone() {
  
  // @@protoc_insertion_point(field_mutable:personal.RegistRequest.phone)
  return phone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegistRequest::release_phone() {
  // @@protoc_insertion_point(field_release:personal.RegistRequest.phone)
  
  return phone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegistRequest::set_allocated_phone(::std::string* phone) {
  if (phone != NULL) {
    
  } else {
    
  }
  phone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phone);
  // @@protoc_insertion_point(field_set_allocated:personal.RegistRequest.phone)
}

inline const RegistRequest* RegistRequest::internal_default_instance() {
  return &RegistRequest_default_instance_.get();
}
// -------------------------------------------------------------------

// RegistResponse

// optional string user_id = 1;
inline void RegistResponse::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RegistResponse::user_id() const {
  // @@protoc_insertion_point(field_get:personal.RegistResponse.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegistResponse::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:personal.RegistResponse.user_id)
}
inline void RegistResponse::set_user_id(const char* value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:personal.RegistResponse.user_id)
}
inline void RegistResponse::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:personal.RegistResponse.user_id)
}
inline ::std::string* RegistResponse::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:personal.RegistResponse.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegistResponse::release_user_id() {
  // @@protoc_insertion_point(field_release:personal.RegistResponse.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegistResponse::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:personal.RegistResponse.user_id)
}

// optional .grpcCommon.GrpcError error = 2;
inline bool RegistResponse::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
inline void RegistResponse::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) delete error_;
  error_ = NULL;
}
inline const ::grpcCommon::GrpcError& RegistResponse::error() const {
  // @@protoc_insertion_point(field_get:personal.RegistResponse.error)
  return error_ != NULL ? *error_
                         : *::grpcCommon::GrpcError::internal_default_instance();
}
inline ::grpcCommon::GrpcError* RegistResponse::mutable_error() {
  
  if (error_ == NULL) {
    error_ = new ::grpcCommon::GrpcError;
  }
  // @@protoc_insertion_point(field_mutable:personal.RegistResponse.error)
  return error_;
}
inline ::grpcCommon::GrpcError* RegistResponse::release_error() {
  // @@protoc_insertion_point(field_release:personal.RegistResponse.error)
  
  ::grpcCommon::GrpcError* temp = error_;
  error_ = NULL;
  return temp;
}
inline void RegistResponse::set_allocated_error(::grpcCommon::GrpcError* error) {
  delete error_;
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:personal.RegistResponse.error)
}

inline const RegistResponse* RegistResponse::internal_default_instance() {
  return &RegistResponse_default_instance_.get();
}
// -------------------------------------------------------------------

// UpdateRegistInfoRequest

// optional string user_id = 1;
inline void UpdateRegistInfoRequest::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateRegistInfoRequest::user_id() const {
  // @@protoc_insertion_point(field_get:personal.UpdateRegistInfoRequest.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateRegistInfoRequest::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:personal.UpdateRegistInfoRequest.user_id)
}
inline void UpdateRegistInfoRequest::set_user_id(const char* value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:personal.UpdateRegistInfoRequest.user_id)
}
inline void UpdateRegistInfoRequest::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:personal.UpdateRegistInfoRequest.user_id)
}
inline ::std::string* UpdateRegistInfoRequest::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:personal.UpdateRegistInfoRequest.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateRegistInfoRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:personal.UpdateRegistInfoRequest.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateRegistInfoRequest::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:personal.UpdateRegistInfoRequest.user_id)
}

// optional string email = 2;
inline void UpdateRegistInfoRequest::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateRegistInfoRequest::email() const {
  // @@protoc_insertion_point(field_get:personal.UpdateRegistInfoRequest.email)
  return email_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateRegistInfoRequest::set_email(const ::std::string& value) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:personal.UpdateRegistInfoRequest.email)
}
inline void UpdateRegistInfoRequest::set_email(const char* value) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:personal.UpdateRegistInfoRequest.email)
}
inline void UpdateRegistInfoRequest::set_email(const char* value, size_t size) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:personal.UpdateRegistInfoRequest.email)
}
inline ::std::string* UpdateRegistInfoRequest::mutable_email() {
  
  // @@protoc_insertion_point(field_mutable:personal.UpdateRegistInfoRequest.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateRegistInfoRequest::release_email() {
  // @@protoc_insertion_point(field_release:personal.UpdateRegistInfoRequest.email)
  
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateRegistInfoRequest::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    
  } else {
    
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:personal.UpdateRegistInfoRequest.email)
}

// optional string interest_subject = 3;
inline void UpdateRegistInfoRequest::clear_interest_subject() {
  interest_subject_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateRegistInfoRequest::interest_subject() const {
  // @@protoc_insertion_point(field_get:personal.UpdateRegistInfoRequest.interest_subject)
  return interest_subject_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateRegistInfoRequest::set_interest_subject(const ::std::string& value) {
  
  interest_subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:personal.UpdateRegistInfoRequest.interest_subject)
}
inline void UpdateRegistInfoRequest::set_interest_subject(const char* value) {
  
  interest_subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:personal.UpdateRegistInfoRequest.interest_subject)
}
inline void UpdateRegistInfoRequest::set_interest_subject(const char* value, size_t size) {
  
  interest_subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:personal.UpdateRegistInfoRequest.interest_subject)
}
inline ::std::string* UpdateRegistInfoRequest::mutable_interest_subject() {
  
  // @@protoc_insertion_point(field_mutable:personal.UpdateRegistInfoRequest.interest_subject)
  return interest_subject_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateRegistInfoRequest::release_interest_subject() {
  // @@protoc_insertion_point(field_release:personal.UpdateRegistInfoRequest.interest_subject)
  
  return interest_subject_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateRegistInfoRequest::set_allocated_interest_subject(::std::string* interest_subject) {
  if (interest_subject != NULL) {
    
  } else {
    
  }
  interest_subject_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), interest_subject);
  // @@protoc_insertion_point(field_set_allocated:personal.UpdateRegistInfoRequest.interest_subject)
}

inline const UpdateRegistInfoRequest* UpdateRegistInfoRequest::internal_default_instance() {
  return &UpdateRegistInfoRequest_default_instance_.get();
}
// -------------------------------------------------------------------

// UpdateRegistInfoResponse

// optional .grpcCommon.GrpcError error = 1;
inline bool UpdateRegistInfoResponse::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
inline void UpdateRegistInfoResponse::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) delete error_;
  error_ = NULL;
}
inline const ::grpcCommon::GrpcError& UpdateRegistInfoResponse::error() const {
  // @@protoc_insertion_point(field_get:personal.UpdateRegistInfoResponse.error)
  return error_ != NULL ? *error_
                         : *::grpcCommon::GrpcError::internal_default_instance();
}
inline ::grpcCommon::GrpcError* UpdateRegistInfoResponse::mutable_error() {
  
  if (error_ == NULL) {
    error_ = new ::grpcCommon::GrpcError;
  }
  // @@protoc_insertion_point(field_mutable:personal.UpdateRegistInfoResponse.error)
  return error_;
}
inline ::grpcCommon::GrpcError* UpdateRegistInfoResponse::release_error() {
  // @@protoc_insertion_point(field_release:personal.UpdateRegistInfoResponse.error)
  
  ::grpcCommon::GrpcError* temp = error_;
  error_ = NULL;
  return temp;
}
inline void UpdateRegistInfoResponse::set_allocated_error(::grpcCommon::GrpcError* error) {
  delete error_;
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:personal.UpdateRegistInfoResponse.error)
}

inline const UpdateRegistInfoResponse* UpdateRegistInfoResponse::internal_default_instance() {
  return &UpdateRegistInfoResponse_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace personal

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_personalCenter_2fmsg_5fregist_2eproto__INCLUDED
