// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: personalCenter/msg_personInfo.proto

#ifndef PROTOBUF_personalCenter_2fmsg_5fpersonInfo_2eproto__INCLUDED
#define PROTOBUF_personalCenter_2fmsg_5fpersonInfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/map.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
#include "grpcCommon/msg_error.pb.h"
// @@protoc_insertion_point(includes)

namespace personal {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_personalCenter_2fmsg_5fpersonInfo_2eproto();
void protobuf_InitDefaults_personalCenter_2fmsg_5fpersonInfo_2eproto();
void protobuf_AssignDesc_personalCenter_2fmsg_5fpersonInfo_2eproto();
void protobuf_ShutdownFile_personalCenter_2fmsg_5fpersonInfo_2eproto();

class EducationLevelListRequest;
class EducationLevelListResponse;
class InfoAvatar;
class InfoAward;
class InfoBirthday;
class InfoEducationLevel;
class InfoEmail;
class InfoGraduatedSchool;
class InfoIdNumber;
class InfoInterestSubject;
class InfoNickName;
class InfoRealName;
class InfoSex;
class InfoSubject;
class InfoUserRoles;
class InfoWorkUnit;
class MyInfoRequest;
class MyInfoResponse;
class MyInfoUpdateRequest;
class MyInfoUpdateResponse;
class SubjectFieldMap;
class SubjectListRequest;
class SubjectListResponse;
class SubjectMessage;
class UserRolesListRequest;
class UserRolesListResponse;

// ===================================================================

class UserRolesListRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:personal.UserRolesListRequest) */ {
 public:
  UserRolesListRequest();
  virtual ~UserRolesListRequest();

  UserRolesListRequest(const UserRolesListRequest& from);

  inline UserRolesListRequest& operator=(const UserRolesListRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserRolesListRequest& default_instance();

  static const UserRolesListRequest* internal_default_instance();

  void Swap(UserRolesListRequest* other);

  // implements Message ----------------------------------------------

  inline UserRolesListRequest* New() const { return New(NULL); }

  UserRolesListRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserRolesListRequest& from);
  void MergeFrom(const UserRolesListRequest& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserRolesListRequest* other);
  void UnsafeMergeFrom(const UserRolesListRequest& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:personal.UserRolesListRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_personalCenter_2fmsg_5fpersonInfo_2eproto_impl();
  friend void  protobuf_AddDesc_personalCenter_2fmsg_5fpersonInfo_2eproto_impl();
  friend void protobuf_AssignDesc_personalCenter_2fmsg_5fpersonInfo_2eproto();
  friend void protobuf_ShutdownFile_personalCenter_2fmsg_5fpersonInfo_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<UserRolesListRequest> UserRolesListRequest_default_instance_;

// -------------------------------------------------------------------

class UserRolesListResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:personal.UserRolesListResponse) */ {
 public:
  UserRolesListResponse();
  virtual ~UserRolesListResponse();

  UserRolesListResponse(const UserRolesListResponse& from);

  inline UserRolesListResponse& operator=(const UserRolesListResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserRolesListResponse& default_instance();

  static const UserRolesListResponse* internal_default_instance();

  void Swap(UserRolesListResponse* other);

  // implements Message ----------------------------------------------

  inline UserRolesListResponse* New() const { return New(NULL); }

  UserRolesListResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserRolesListResponse& from);
  void MergeFrom(const UserRolesListResponse& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserRolesListResponse* other);
  void UnsafeMergeFrom(const UserRolesListResponse& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> roles = 1;
  int roles_size() const;
  void clear_roles();
  static const int kRolesFieldNumber = 1;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      roles() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_roles();

  // optional string list_version = 2;
  void clear_list_version();
  static const int kListVersionFieldNumber = 2;
  const ::std::string& list_version() const;
  void set_list_version(const ::std::string& value);
  void set_list_version(const char* value);
  void set_list_version(const char* value, size_t size);
  ::std::string* mutable_list_version();
  ::std::string* release_list_version();
  void set_allocated_list_version(::std::string* list_version);

  // optional .grpcCommon.GrpcError error = 3;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 3;
  const ::grpcCommon::GrpcError& error() const;
  ::grpcCommon::GrpcError* mutable_error();
  ::grpcCommon::GrpcError* release_error();
  void set_allocated_error(::grpcCommon::GrpcError* error);

  // @@protoc_insertion_point(class_scope:personal.UserRolesListResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 >
      UserRolesListResponse_RolesEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > roles_;
  ::google::protobuf::internal::ArenaStringPtr list_version_;
  ::grpcCommon::GrpcError* error_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_personalCenter_2fmsg_5fpersonInfo_2eproto_impl();
  friend void  protobuf_AddDesc_personalCenter_2fmsg_5fpersonInfo_2eproto_impl();
  friend void protobuf_AssignDesc_personalCenter_2fmsg_5fpersonInfo_2eproto();
  friend void protobuf_ShutdownFile_personalCenter_2fmsg_5fpersonInfo_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<UserRolesListResponse> UserRolesListResponse_default_instance_;

// -------------------------------------------------------------------

class EducationLevelListRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:personal.EducationLevelListRequest) */ {
 public:
  EducationLevelListRequest();
  virtual ~EducationLevelListRequest();

  EducationLevelListRequest(const EducationLevelListRequest& from);

  inline EducationLevelListRequest& operator=(const EducationLevelListRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EducationLevelListRequest& default_instance();

  static const EducationLevelListRequest* internal_default_instance();

  void Swap(EducationLevelListRequest* other);

  // implements Message ----------------------------------------------

  inline EducationLevelListRequest* New() const { return New(NULL); }

  EducationLevelListRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EducationLevelListRequest& from);
  void MergeFrom(const EducationLevelListRequest& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EducationLevelListRequest* other);
  void UnsafeMergeFrom(const EducationLevelListRequest& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:personal.EducationLevelListRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_personalCenter_2fmsg_5fpersonInfo_2eproto_impl();
  friend void  protobuf_AddDesc_personalCenter_2fmsg_5fpersonInfo_2eproto_impl();
  friend void protobuf_AssignDesc_personalCenter_2fmsg_5fpersonInfo_2eproto();
  friend void protobuf_ShutdownFile_personalCenter_2fmsg_5fpersonInfo_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<EducationLevelListRequest> EducationLevelListRequest_default_instance_;

// -------------------------------------------------------------------

class EducationLevelListResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:personal.EducationLevelListResponse) */ {
 public:
  EducationLevelListResponse();
  virtual ~EducationLevelListResponse();

  EducationLevelListResponse(const EducationLevelListResponse& from);

  inline EducationLevelListResponse& operator=(const EducationLevelListResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EducationLevelListResponse& default_instance();

  static const EducationLevelListResponse* internal_default_instance();

  void Swap(EducationLevelListResponse* other);

  // implements Message ----------------------------------------------

  inline EducationLevelListResponse* New() const { return New(NULL); }

  EducationLevelListResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EducationLevelListResponse& from);
  void MergeFrom(const EducationLevelListResponse& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EducationLevelListResponse* other);
  void UnsafeMergeFrom(const EducationLevelListResponse& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> educationLevels = 1;
  int educationlevels_size() const;
  void clear_educationlevels();
  static const int kEducationLevelsFieldNumber = 1;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      educationlevels() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_educationlevels();

  // optional string list_version = 2;
  void clear_list_version();
  static const int kListVersionFieldNumber = 2;
  const ::std::string& list_version() const;
  void set_list_version(const ::std::string& value);
  void set_list_version(const char* value);
  void set_list_version(const char* value, size_t size);
  ::std::string* mutable_list_version();
  ::std::string* release_list_version();
  void set_allocated_list_version(::std::string* list_version);

  // optional .grpcCommon.GrpcError error = 3;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 3;
  const ::grpcCommon::GrpcError& error() const;
  ::grpcCommon::GrpcError* mutable_error();
  ::grpcCommon::GrpcError* release_error();
  void set_allocated_error(::grpcCommon::GrpcError* error);

  // @@protoc_insertion_point(class_scope:personal.EducationLevelListResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 >
      EducationLevelListResponse_EducationLevelsEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > educationlevels_;
  ::google::protobuf::internal::ArenaStringPtr list_version_;
  ::grpcCommon::GrpcError* error_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_personalCenter_2fmsg_5fpersonInfo_2eproto_impl();
  friend void  protobuf_AddDesc_personalCenter_2fmsg_5fpersonInfo_2eproto_impl();
  friend void protobuf_AssignDesc_personalCenter_2fmsg_5fpersonInfo_2eproto();
  friend void protobuf_ShutdownFile_personalCenter_2fmsg_5fpersonInfo_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<EducationLevelListResponse> EducationLevelListResponse_default_instance_;

// -------------------------------------------------------------------

class SubjectListRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:personal.SubjectListRequest) */ {
 public:
  SubjectListRequest();
  virtual ~SubjectListRequest();

  SubjectListRequest(const SubjectListRequest& from);

  inline SubjectListRequest& operator=(const SubjectListRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SubjectListRequest& default_instance();

  static const SubjectListRequest* internal_default_instance();

  void Swap(SubjectListRequest* other);

  // implements Message ----------------------------------------------

  inline SubjectListRequest* New() const { return New(NULL); }

  SubjectListRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SubjectListRequest& from);
  void MergeFrom(const SubjectListRequest& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SubjectListRequest* other);
  void UnsafeMergeFrom(const SubjectListRequest& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:personal.SubjectListRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_personalCenter_2fmsg_5fpersonInfo_2eproto_impl();
  friend void  protobuf_AddDesc_personalCenter_2fmsg_5fpersonInfo_2eproto_impl();
  friend void protobuf_AssignDesc_personalCenter_2fmsg_5fpersonInfo_2eproto();
  friend void protobuf_ShutdownFile_personalCenter_2fmsg_5fpersonInfo_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<SubjectListRequest> SubjectListRequest_default_instance_;

// -------------------------------------------------------------------

class SubjectListResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:personal.SubjectListResponse) */ {
 public:
  SubjectListResponse();
  virtual ~SubjectListResponse();

  SubjectListResponse(const SubjectListResponse& from);

  inline SubjectListResponse& operator=(const SubjectListResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SubjectListResponse& default_instance();

  static const SubjectListResponse* internal_default_instance();

  void Swap(SubjectListResponse* other);

  // implements Message ----------------------------------------------

  inline SubjectListResponse* New() const { return New(NULL); }

  SubjectListResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SubjectListResponse& from);
  void MergeFrom(const SubjectListResponse& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SubjectListResponse* other);
  void UnsafeMergeFrom(const SubjectListResponse& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .personal.SubjectMessage subject_list = 1;
  bool has_subject_list() const;
  void clear_subject_list();
  static const int kSubjectListFieldNumber = 1;
  const ::personal::SubjectMessage& subject_list() const;
  ::personal::SubjectMessage* mutable_subject_list();
  ::personal::SubjectMessage* release_subject_list();
  void set_allocated_subject_list(::personal::SubjectMessage* subject_list);

  // optional .grpcCommon.GrpcError error = 2;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 2;
  const ::grpcCommon::GrpcError& error() const;
  ::grpcCommon::GrpcError* mutable_error();
  ::grpcCommon::GrpcError* release_error();
  void set_allocated_error(::grpcCommon::GrpcError* error);

  // @@protoc_insertion_point(class_scope:personal.SubjectListResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::personal::SubjectMessage* subject_list_;
  ::grpcCommon::GrpcError* error_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_personalCenter_2fmsg_5fpersonInfo_2eproto_impl();
  friend void  protobuf_AddDesc_personalCenter_2fmsg_5fpersonInfo_2eproto_impl();
  friend void protobuf_AssignDesc_personalCenter_2fmsg_5fpersonInfo_2eproto();
  friend void protobuf_ShutdownFile_personalCenter_2fmsg_5fpersonInfo_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<SubjectListResponse> SubjectListResponse_default_instance_;

// -------------------------------------------------------------------

class SubjectFieldMap : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:personal.SubjectFieldMap) */ {
 public:
  SubjectFieldMap();
  virtual ~SubjectFieldMap();

  SubjectFieldMap(const SubjectFieldMap& from);

  inline SubjectFieldMap& operator=(const SubjectFieldMap& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SubjectFieldMap& default_instance();

  static const SubjectFieldMap* internal_default_instance();

  void Swap(SubjectFieldMap* other);

  // implements Message ----------------------------------------------

  inline SubjectFieldMap* New() const { return New(NULL); }

  SubjectFieldMap* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SubjectFieldMap& from);
  void MergeFrom(const SubjectFieldMap& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SubjectFieldMap* other);
  void UnsafeMergeFrom(const SubjectFieldMap& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // optional string value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:personal.SubjectFieldMap)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_personalCenter_2fmsg_5fpersonInfo_2eproto_impl();
  friend void  protobuf_AddDesc_personalCenter_2fmsg_5fpersonInfo_2eproto_impl();
  friend void protobuf_AssignDesc_personalCenter_2fmsg_5fpersonInfo_2eproto();
  friend void protobuf_ShutdownFile_personalCenter_2fmsg_5fpersonInfo_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<SubjectFieldMap> SubjectFieldMap_default_instance_;

// -------------------------------------------------------------------

class SubjectMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:personal.SubjectMessage) */ {
 public:
  SubjectMessage();
  virtual ~SubjectMessage();

  SubjectMessage(const SubjectMessage& from);

  inline SubjectMessage& operator=(const SubjectMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SubjectMessage& default_instance();

  static const SubjectMessage* internal_default_instance();

  void Swap(SubjectMessage* other);

  // implements Message ----------------------------------------------

  inline SubjectMessage* New() const { return New(NULL); }

  SubjectMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SubjectMessage& from);
  void MergeFrom(const SubjectMessage& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SubjectMessage* other);
  void UnsafeMergeFrom(const SubjectMessage& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .personal.SubjectFieldMap subject_field = 1;
  bool has_subject_field() const;
  void clear_subject_field();
  static const int kSubjectFieldFieldNumber = 1;
  const ::personal::SubjectFieldMap& subject_field() const;
  ::personal::SubjectFieldMap* mutable_subject_field();
  ::personal::SubjectFieldMap* release_subject_field();
  void set_allocated_subject_field(::personal::SubjectFieldMap* subject_field);

  // repeated .personal.SubjectMessage sub_subject = 2;
  int sub_subject_size() const;
  void clear_sub_subject();
  static const int kSubSubjectFieldNumber = 2;
  const ::personal::SubjectMessage& sub_subject(int index) const;
  ::personal::SubjectMessage* mutable_sub_subject(int index);
  ::personal::SubjectMessage* add_sub_subject();
  ::google::protobuf::RepeatedPtrField< ::personal::SubjectMessage >*
      mutable_sub_subject();
  const ::google::protobuf::RepeatedPtrField< ::personal::SubjectMessage >&
      sub_subject() const;

  // optional bool has_sub_subject = 3;
  void clear_has_sub_subject();
  static const int kHasSubSubjectFieldNumber = 3;
  bool has_sub_subject() const;
  void set_has_sub_subject(bool value);

  // @@protoc_insertion_point(class_scope:personal.SubjectMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::personal::SubjectMessage > sub_subject_;
  ::personal::SubjectFieldMap* subject_field_;
  bool has_sub_subject_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_personalCenter_2fmsg_5fpersonInfo_2eproto_impl();
  friend void  protobuf_AddDesc_personalCenter_2fmsg_5fpersonInfo_2eproto_impl();
  friend void protobuf_AssignDesc_personalCenter_2fmsg_5fpersonInfo_2eproto();
  friend void protobuf_ShutdownFile_personalCenter_2fmsg_5fpersonInfo_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<SubjectMessage> SubjectMessage_default_instance_;

// -------------------------------------------------------------------

class MyInfoRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:personal.MyInfoRequest) */ {
 public:
  MyInfoRequest();
  virtual ~MyInfoRequest();

  MyInfoRequest(const MyInfoRequest& from);

  inline MyInfoRequest& operator=(const MyInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MyInfoRequest& default_instance();

  static const MyInfoRequest* internal_default_instance();

  void Swap(MyInfoRequest* other);

  // implements Message ----------------------------------------------

  inline MyInfoRequest* New() const { return New(NULL); }

  MyInfoRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MyInfoRequest& from);
  void MergeFrom(const MyInfoRequest& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MyInfoRequest* other);
  void UnsafeMergeFrom(const MyInfoRequest& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // @@protoc_insertion_point(class_scope:personal.MyInfoRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_personalCenter_2fmsg_5fpersonInfo_2eproto_impl();
  friend void  protobuf_AddDesc_personalCenter_2fmsg_5fpersonInfo_2eproto_impl();
  friend void protobuf_AssignDesc_personalCenter_2fmsg_5fpersonInfo_2eproto();
  friend void protobuf_ShutdownFile_personalCenter_2fmsg_5fpersonInfo_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<MyInfoRequest> MyInfoRequest_default_instance_;

// -------------------------------------------------------------------

class MyInfoResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:personal.MyInfoResponse) */ {
 public:
  MyInfoResponse();
  virtual ~MyInfoResponse();

  MyInfoResponse(const MyInfoResponse& from);

  inline MyInfoResponse& operator=(const MyInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MyInfoResponse& default_instance();

  static const MyInfoResponse* internal_default_instance();

  void Swap(MyInfoResponse* other);

  // implements Message ----------------------------------------------

  inline MyInfoResponse* New() const { return New(NULL); }

  MyInfoResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MyInfoResponse& from);
  void MergeFrom(const MyInfoResponse& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MyInfoResponse* other);
  void UnsafeMergeFrom(const MyInfoResponse& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .personal.InfoNickName nick_name = 1;
  bool has_nick_name() const;
  void clear_nick_name();
  static const int kNickNameFieldNumber = 1;
  const ::personal::InfoNickName& nick_name() const;
  ::personal::InfoNickName* mutable_nick_name();
  ::personal::InfoNickName* release_nick_name();
  void set_allocated_nick_name(::personal::InfoNickName* nick_name);

  // optional .personal.InfoRealName real_name = 2;
  bool has_real_name() const;
  void clear_real_name();
  static const int kRealNameFieldNumber = 2;
  const ::personal::InfoRealName& real_name() const;
  ::personal::InfoRealName* mutable_real_name();
  ::personal::InfoRealName* release_real_name();
  void set_allocated_real_name(::personal::InfoRealName* real_name);

  // optional .personal.InfoIdNumber id_number = 3;
  bool has_id_number() const;
  void clear_id_number();
  static const int kIdNumberFieldNumber = 3;
  const ::personal::InfoIdNumber& id_number() const;
  ::personal::InfoIdNumber* mutable_id_number();
  ::personal::InfoIdNumber* release_id_number();
  void set_allocated_id_number(::personal::InfoIdNumber* id_number);

  // optional .personal.InfoSex sex = 4;
  bool has_sex() const;
  void clear_sex();
  static const int kSexFieldNumber = 4;
  const ::personal::InfoSex& sex() const;
  ::personal::InfoSex* mutable_sex();
  ::personal::InfoSex* release_sex();
  void set_allocated_sex(::personal::InfoSex* sex);

  // optional .personal.InfoBirthday birthday = 5;
  bool has_birthday() const;
  void clear_birthday();
  static const int kBirthdayFieldNumber = 5;
  const ::personal::InfoBirthday& birthday() const;
  ::personal::InfoBirthday* mutable_birthday();
  ::personal::InfoBirthday* release_birthday();
  void set_allocated_birthday(::personal::InfoBirthday* birthday);

  // optional .personal.InfoUserRoles user_roles = 6;
  bool has_user_roles() const;
  void clear_user_roles();
  static const int kUserRolesFieldNumber = 6;
  const ::personal::InfoUserRoles& user_roles() const;
  ::personal::InfoUserRoles* mutable_user_roles();
  ::personal::InfoUserRoles* release_user_roles();
  void set_allocated_user_roles(::personal::InfoUserRoles* user_roles);

  // optional .personal.InfoWorkUnit workUnit = 7;
  bool has_workunit() const;
  void clear_workunit();
  static const int kWorkUnitFieldNumber = 7;
  const ::personal::InfoWorkUnit& workunit() const;
  ::personal::InfoWorkUnit* mutable_workunit();
  ::personal::InfoWorkUnit* release_workunit();
  void set_allocated_workunit(::personal::InfoWorkUnit* workunit);

  // optional .personal.InfoEducationLevel educationLevel = 8;
  bool has_educationlevel() const;
  void clear_educationlevel();
  static const int kEducationLevelFieldNumber = 8;
  const ::personal::InfoEducationLevel& educationlevel() const;
  ::personal::InfoEducationLevel* mutable_educationlevel();
  ::personal::InfoEducationLevel* release_educationlevel();
  void set_allocated_educationlevel(::personal::InfoEducationLevel* educationlevel);

  // optional .personal.InfoGraduatedSchool graduated_school = 9;
  bool has_graduated_school() const;
  void clear_graduated_school();
  static const int kGraduatedSchoolFieldNumber = 9;
  const ::personal::InfoGraduatedSchool& graduated_school() const;
  ::personal::InfoGraduatedSchool* mutable_graduated_school();
  ::personal::InfoGraduatedSchool* release_graduated_school();
  void set_allocated_graduated_school(::personal::InfoGraduatedSchool* graduated_school);

  // optional .personal.InfoAward award = 10;
  bool has_award() const;
  void clear_award();
  static const int kAwardFieldNumber = 10;
  const ::personal::InfoAward& award() const;
  ::personal::InfoAward* mutable_award();
  ::personal::InfoAward* release_award();
  void set_allocated_award(::personal::InfoAward* award);

  // optional .personal.InfoSubject subject = 11;
  bool has_subject() const;
  void clear_subject();
  static const int kSubjectFieldNumber = 11;
  const ::personal::InfoSubject& subject() const;
  ::personal::InfoSubject* mutable_subject();
  ::personal::InfoSubject* release_subject();
  void set_allocated_subject(::personal::InfoSubject* subject);

  // optional .personal.InfoInterestSubject interest_subject = 12;
  bool has_interest_subject() const;
  void clear_interest_subject();
  static const int kInterestSubjectFieldNumber = 12;
  const ::personal::InfoInterestSubject& interest_subject() const;
  ::personal::InfoInterestSubject* mutable_interest_subject();
  ::personal::InfoInterestSubject* release_interest_subject();
  void set_allocated_interest_subject(::personal::InfoInterestSubject* interest_subject);

  // optional .personal.InfoEmail email = 13;
  bool has_email() const;
  void clear_email();
  static const int kEmailFieldNumber = 13;
  const ::personal::InfoEmail& email() const;
  ::personal::InfoEmail* mutable_email();
  ::personal::InfoEmail* release_email();
  void set_allocated_email(::personal::InfoEmail* email);

  // optional .personal.InfoAvatar avatar_url = 14;
  bool has_avatar_url() const;
  void clear_avatar_url();
  static const int kAvatarUrlFieldNumber = 14;
  const ::personal::InfoAvatar& avatar_url() const;
  ::personal::InfoAvatar* mutable_avatar_url();
  ::personal::InfoAvatar* release_avatar_url();
  void set_allocated_avatar_url(::personal::InfoAvatar* avatar_url);

  // optional .grpcCommon.GrpcError error = 15;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 15;
  const ::grpcCommon::GrpcError& error() const;
  ::grpcCommon::GrpcError* mutable_error();
  ::grpcCommon::GrpcError* release_error();
  void set_allocated_error(::grpcCommon::GrpcError* error);

  // @@protoc_insertion_point(class_scope:personal.MyInfoResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::personal::InfoNickName* nick_name_;
  ::personal::InfoRealName* real_name_;
  ::personal::InfoIdNumber* id_number_;
  ::personal::InfoSex* sex_;
  ::personal::InfoBirthday* birthday_;
  ::personal::InfoUserRoles* user_roles_;
  ::personal::InfoWorkUnit* workunit_;
  ::personal::InfoEducationLevel* educationlevel_;
  ::personal::InfoGraduatedSchool* graduated_school_;
  ::personal::InfoAward* award_;
  ::personal::InfoSubject* subject_;
  ::personal::InfoInterestSubject* interest_subject_;
  ::personal::InfoEmail* email_;
  ::personal::InfoAvatar* avatar_url_;
  ::grpcCommon::GrpcError* error_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_personalCenter_2fmsg_5fpersonInfo_2eproto_impl();
  friend void  protobuf_AddDesc_personalCenter_2fmsg_5fpersonInfo_2eproto_impl();
  friend void protobuf_AssignDesc_personalCenter_2fmsg_5fpersonInfo_2eproto();
  friend void protobuf_ShutdownFile_personalCenter_2fmsg_5fpersonInfo_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<MyInfoResponse> MyInfoResponse_default_instance_;

// -------------------------------------------------------------------

class MyInfoUpdateRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:personal.MyInfoUpdateRequest) */ {
 public:
  MyInfoUpdateRequest();
  virtual ~MyInfoUpdateRequest();

  MyInfoUpdateRequest(const MyInfoUpdateRequest& from);

  inline MyInfoUpdateRequest& operator=(const MyInfoUpdateRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MyInfoUpdateRequest& default_instance();

  static const MyInfoUpdateRequest* internal_default_instance();

  void Swap(MyInfoUpdateRequest* other);

  // implements Message ----------------------------------------------

  inline MyInfoUpdateRequest* New() const { return New(NULL); }

  MyInfoUpdateRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MyInfoUpdateRequest& from);
  void MergeFrom(const MyInfoUpdateRequest& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MyInfoUpdateRequest* other);
  void UnsafeMergeFrom(const MyInfoUpdateRequest& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // repeated .google.protobuf.Any field = 2;
  int field_size() const;
  void clear_field();
  static const int kFieldFieldNumber = 2;
  const ::google::protobuf::Any& field(int index) const;
  ::google::protobuf::Any* mutable_field(int index);
  ::google::protobuf::Any* add_field();
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
      mutable_field();
  const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
      field() const;

  // @@protoc_insertion_point(class_scope:personal.MyInfoUpdateRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any > field_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_personalCenter_2fmsg_5fpersonInfo_2eproto_impl();
  friend void  protobuf_AddDesc_personalCenter_2fmsg_5fpersonInfo_2eproto_impl();
  friend void protobuf_AssignDesc_personalCenter_2fmsg_5fpersonInfo_2eproto();
  friend void protobuf_ShutdownFile_personalCenter_2fmsg_5fpersonInfo_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<MyInfoUpdateRequest> MyInfoUpdateRequest_default_instance_;

// -------------------------------------------------------------------

class MyInfoUpdateResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:personal.MyInfoUpdateResponse) */ {
 public:
  MyInfoUpdateResponse();
  virtual ~MyInfoUpdateResponse();

  MyInfoUpdateResponse(const MyInfoUpdateResponse& from);

  inline MyInfoUpdateResponse& operator=(const MyInfoUpdateResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MyInfoUpdateResponse& default_instance();

  static const MyInfoUpdateResponse* internal_default_instance();

  void Swap(MyInfoUpdateResponse* other);

  // implements Message ----------------------------------------------

  inline MyInfoUpdateResponse* New() const { return New(NULL); }

  MyInfoUpdateResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MyInfoUpdateResponse& from);
  void MergeFrom(const MyInfoUpdateResponse& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MyInfoUpdateResponse* other);
  void UnsafeMergeFrom(const MyInfoUpdateResponse& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .grpcCommon.GrpcError error = 1;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  const ::grpcCommon::GrpcError& error() const;
  ::grpcCommon::GrpcError* mutable_error();
  ::grpcCommon::GrpcError* release_error();
  void set_allocated_error(::grpcCommon::GrpcError* error);

  // @@protoc_insertion_point(class_scope:personal.MyInfoUpdateResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::grpcCommon::GrpcError* error_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_personalCenter_2fmsg_5fpersonInfo_2eproto_impl();
  friend void  protobuf_AddDesc_personalCenter_2fmsg_5fpersonInfo_2eproto_impl();
  friend void protobuf_AssignDesc_personalCenter_2fmsg_5fpersonInfo_2eproto();
  friend void protobuf_ShutdownFile_personalCenter_2fmsg_5fpersonInfo_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<MyInfoUpdateResponse> MyInfoUpdateResponse_default_instance_;

// -------------------------------------------------------------------

class InfoNickName : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:personal.InfoNickName) */ {
 public:
  InfoNickName();
  virtual ~InfoNickName();

  InfoNickName(const InfoNickName& from);

  inline InfoNickName& operator=(const InfoNickName& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InfoNickName& default_instance();

  static const InfoNickName* internal_default_instance();

  void Swap(InfoNickName* other);

  // implements Message ----------------------------------------------

  inline InfoNickName* New() const { return New(NULL); }

  InfoNickName* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InfoNickName& from);
  void MergeFrom(const InfoNickName& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InfoNickName* other);
  void UnsafeMergeFrom(const InfoNickName& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string nick_name = 1;
  void clear_nick_name();
  static const int kNickNameFieldNumber = 1;
  const ::std::string& nick_name() const;
  void set_nick_name(const ::std::string& value);
  void set_nick_name(const char* value);
  void set_nick_name(const char* value, size_t size);
  ::std::string* mutable_nick_name();
  ::std::string* release_nick_name();
  void set_allocated_nick_name(::std::string* nick_name);

  // @@protoc_insertion_point(class_scope:personal.InfoNickName)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr nick_name_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_personalCenter_2fmsg_5fpersonInfo_2eproto_impl();
  friend void  protobuf_AddDesc_personalCenter_2fmsg_5fpersonInfo_2eproto_impl();
  friend void protobuf_AssignDesc_personalCenter_2fmsg_5fpersonInfo_2eproto();
  friend void protobuf_ShutdownFile_personalCenter_2fmsg_5fpersonInfo_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<InfoNickName> InfoNickName_default_instance_;

// -------------------------------------------------------------------

class InfoRealName : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:personal.InfoRealName) */ {
 public:
  InfoRealName();
  virtual ~InfoRealName();

  InfoRealName(const InfoRealName& from);

  inline InfoRealName& operator=(const InfoRealName& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InfoRealName& default_instance();

  static const InfoRealName* internal_default_instance();

  void Swap(InfoRealName* other);

  // implements Message ----------------------------------------------

  inline InfoRealName* New() const { return New(NULL); }

  InfoRealName* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InfoRealName& from);
  void MergeFrom(const InfoRealName& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InfoRealName* other);
  void UnsafeMergeFrom(const InfoRealName& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string real_name = 1;
  void clear_real_name();
  static const int kRealNameFieldNumber = 1;
  const ::std::string& real_name() const;
  void set_real_name(const ::std::string& value);
  void set_real_name(const char* value);
  void set_real_name(const char* value, size_t size);
  ::std::string* mutable_real_name();
  ::std::string* release_real_name();
  void set_allocated_real_name(::std::string* real_name);

  // @@protoc_insertion_point(class_scope:personal.InfoRealName)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr real_name_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_personalCenter_2fmsg_5fpersonInfo_2eproto_impl();
  friend void  protobuf_AddDesc_personalCenter_2fmsg_5fpersonInfo_2eproto_impl();
  friend void protobuf_AssignDesc_personalCenter_2fmsg_5fpersonInfo_2eproto();
  friend void protobuf_ShutdownFile_personalCenter_2fmsg_5fpersonInfo_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<InfoRealName> InfoRealName_default_instance_;

// -------------------------------------------------------------------

class InfoIdNumber : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:personal.InfoIdNumber) */ {
 public:
  InfoIdNumber();
  virtual ~InfoIdNumber();

  InfoIdNumber(const InfoIdNumber& from);

  inline InfoIdNumber& operator=(const InfoIdNumber& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InfoIdNumber& default_instance();

  static const InfoIdNumber* internal_default_instance();

  void Swap(InfoIdNumber* other);

  // implements Message ----------------------------------------------

  inline InfoIdNumber* New() const { return New(NULL); }

  InfoIdNumber* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InfoIdNumber& from);
  void MergeFrom(const InfoIdNumber& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InfoIdNumber* other);
  void UnsafeMergeFrom(const InfoIdNumber& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id_number = 1;
  void clear_id_number();
  static const int kIdNumberFieldNumber = 1;
  const ::std::string& id_number() const;
  void set_id_number(const ::std::string& value);
  void set_id_number(const char* value);
  void set_id_number(const char* value, size_t size);
  ::std::string* mutable_id_number();
  ::std::string* release_id_number();
  void set_allocated_id_number(::std::string* id_number);

  // @@protoc_insertion_point(class_scope:personal.InfoIdNumber)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_number_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_personalCenter_2fmsg_5fpersonInfo_2eproto_impl();
  friend void  protobuf_AddDesc_personalCenter_2fmsg_5fpersonInfo_2eproto_impl();
  friend void protobuf_AssignDesc_personalCenter_2fmsg_5fpersonInfo_2eproto();
  friend void protobuf_ShutdownFile_personalCenter_2fmsg_5fpersonInfo_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<InfoIdNumber> InfoIdNumber_default_instance_;

// -------------------------------------------------------------------

class InfoSex : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:personal.InfoSex) */ {
 public:
  InfoSex();
  virtual ~InfoSex();

  InfoSex(const InfoSex& from);

  inline InfoSex& operator=(const InfoSex& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InfoSex& default_instance();

  static const InfoSex* internal_default_instance();

  void Swap(InfoSex* other);

  // implements Message ----------------------------------------------

  inline InfoSex* New() const { return New(NULL); }

  InfoSex* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InfoSex& from);
  void MergeFrom(const InfoSex& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InfoSex* other);
  void UnsafeMergeFrom(const InfoSex& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string sex = 1;
  void clear_sex();
  static const int kSexFieldNumber = 1;
  const ::std::string& sex() const;
  void set_sex(const ::std::string& value);
  void set_sex(const char* value);
  void set_sex(const char* value, size_t size);
  ::std::string* mutable_sex();
  ::std::string* release_sex();
  void set_allocated_sex(::std::string* sex);

  // @@protoc_insertion_point(class_scope:personal.InfoSex)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sex_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_personalCenter_2fmsg_5fpersonInfo_2eproto_impl();
  friend void  protobuf_AddDesc_personalCenter_2fmsg_5fpersonInfo_2eproto_impl();
  friend void protobuf_AssignDesc_personalCenter_2fmsg_5fpersonInfo_2eproto();
  friend void protobuf_ShutdownFile_personalCenter_2fmsg_5fpersonInfo_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<InfoSex> InfoSex_default_instance_;

// -------------------------------------------------------------------

class InfoBirthday : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:personal.InfoBirthday) */ {
 public:
  InfoBirthday();
  virtual ~InfoBirthday();

  InfoBirthday(const InfoBirthday& from);

  inline InfoBirthday& operator=(const InfoBirthday& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InfoBirthday& default_instance();

  static const InfoBirthday* internal_default_instance();

  void Swap(InfoBirthday* other);

  // implements Message ----------------------------------------------

  inline InfoBirthday* New() const { return New(NULL); }

  InfoBirthday* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InfoBirthday& from);
  void MergeFrom(const InfoBirthday& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InfoBirthday* other);
  void UnsafeMergeFrom(const InfoBirthday& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string birthday = 1;
  void clear_birthday();
  static const int kBirthdayFieldNumber = 1;
  const ::std::string& birthday() const;
  void set_birthday(const ::std::string& value);
  void set_birthday(const char* value);
  void set_birthday(const char* value, size_t size);
  ::std::string* mutable_birthday();
  ::std::string* release_birthday();
  void set_allocated_birthday(::std::string* birthday);

  // @@protoc_insertion_point(class_scope:personal.InfoBirthday)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr birthday_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_personalCenter_2fmsg_5fpersonInfo_2eproto_impl();
  friend void  protobuf_AddDesc_personalCenter_2fmsg_5fpersonInfo_2eproto_impl();
  friend void protobuf_AssignDesc_personalCenter_2fmsg_5fpersonInfo_2eproto();
  friend void protobuf_ShutdownFile_personalCenter_2fmsg_5fpersonInfo_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<InfoBirthday> InfoBirthday_default_instance_;

// -------------------------------------------------------------------

class InfoUserRoles : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:personal.InfoUserRoles) */ {
 public:
  InfoUserRoles();
  virtual ~InfoUserRoles();

  InfoUserRoles(const InfoUserRoles& from);

  inline InfoUserRoles& operator=(const InfoUserRoles& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InfoUserRoles& default_instance();

  static const InfoUserRoles* internal_default_instance();

  void Swap(InfoUserRoles* other);

  // implements Message ----------------------------------------------

  inline InfoUserRoles* New() const { return New(NULL); }

  InfoUserRoles* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InfoUserRoles& from);
  void MergeFrom(const InfoUserRoles& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InfoUserRoles* other);
  void UnsafeMergeFrom(const InfoUserRoles& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string user_roles = 1;
  void clear_user_roles();
  static const int kUserRolesFieldNumber = 1;
  const ::std::string& user_roles() const;
  void set_user_roles(const ::std::string& value);
  void set_user_roles(const char* value);
  void set_user_roles(const char* value, size_t size);
  ::std::string* mutable_user_roles();
  ::std::string* release_user_roles();
  void set_allocated_user_roles(::std::string* user_roles);

  // @@protoc_insertion_point(class_scope:personal.InfoUserRoles)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr user_roles_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_personalCenter_2fmsg_5fpersonInfo_2eproto_impl();
  friend void  protobuf_AddDesc_personalCenter_2fmsg_5fpersonInfo_2eproto_impl();
  friend void protobuf_AssignDesc_personalCenter_2fmsg_5fpersonInfo_2eproto();
  friend void protobuf_ShutdownFile_personalCenter_2fmsg_5fpersonInfo_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<InfoUserRoles> InfoUserRoles_default_instance_;

// -------------------------------------------------------------------

class InfoWorkUnit : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:personal.InfoWorkUnit) */ {
 public:
  InfoWorkUnit();
  virtual ~InfoWorkUnit();

  InfoWorkUnit(const InfoWorkUnit& from);

  inline InfoWorkUnit& operator=(const InfoWorkUnit& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InfoWorkUnit& default_instance();

  static const InfoWorkUnit* internal_default_instance();

  void Swap(InfoWorkUnit* other);

  // implements Message ----------------------------------------------

  inline InfoWorkUnit* New() const { return New(NULL); }

  InfoWorkUnit* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InfoWorkUnit& from);
  void MergeFrom(const InfoWorkUnit& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InfoWorkUnit* other);
  void UnsafeMergeFrom(const InfoWorkUnit& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string workUnit = 1;
  void clear_workunit();
  static const int kWorkUnitFieldNumber = 1;
  const ::std::string& workunit() const;
  void set_workunit(const ::std::string& value);
  void set_workunit(const char* value);
  void set_workunit(const char* value, size_t size);
  ::std::string* mutable_workunit();
  ::std::string* release_workunit();
  void set_allocated_workunit(::std::string* workunit);

  // @@protoc_insertion_point(class_scope:personal.InfoWorkUnit)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr workunit_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_personalCenter_2fmsg_5fpersonInfo_2eproto_impl();
  friend void  protobuf_AddDesc_personalCenter_2fmsg_5fpersonInfo_2eproto_impl();
  friend void protobuf_AssignDesc_personalCenter_2fmsg_5fpersonInfo_2eproto();
  friend void protobuf_ShutdownFile_personalCenter_2fmsg_5fpersonInfo_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<InfoWorkUnit> InfoWorkUnit_default_instance_;

// -------------------------------------------------------------------

class InfoEducationLevel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:personal.InfoEducationLevel) */ {
 public:
  InfoEducationLevel();
  virtual ~InfoEducationLevel();

  InfoEducationLevel(const InfoEducationLevel& from);

  inline InfoEducationLevel& operator=(const InfoEducationLevel& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InfoEducationLevel& default_instance();

  static const InfoEducationLevel* internal_default_instance();

  void Swap(InfoEducationLevel* other);

  // implements Message ----------------------------------------------

  inline InfoEducationLevel* New() const { return New(NULL); }

  InfoEducationLevel* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InfoEducationLevel& from);
  void MergeFrom(const InfoEducationLevel& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InfoEducationLevel* other);
  void UnsafeMergeFrom(const InfoEducationLevel& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string educationLevel = 1;
  void clear_educationlevel();
  static const int kEducationLevelFieldNumber = 1;
  const ::std::string& educationlevel() const;
  void set_educationlevel(const ::std::string& value);
  void set_educationlevel(const char* value);
  void set_educationlevel(const char* value, size_t size);
  ::std::string* mutable_educationlevel();
  ::std::string* release_educationlevel();
  void set_allocated_educationlevel(::std::string* educationlevel);

  // @@protoc_insertion_point(class_scope:personal.InfoEducationLevel)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr educationlevel_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_personalCenter_2fmsg_5fpersonInfo_2eproto_impl();
  friend void  protobuf_AddDesc_personalCenter_2fmsg_5fpersonInfo_2eproto_impl();
  friend void protobuf_AssignDesc_personalCenter_2fmsg_5fpersonInfo_2eproto();
  friend void protobuf_ShutdownFile_personalCenter_2fmsg_5fpersonInfo_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<InfoEducationLevel> InfoEducationLevel_default_instance_;

// -------------------------------------------------------------------

class InfoGraduatedSchool : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:personal.InfoGraduatedSchool) */ {
 public:
  InfoGraduatedSchool();
  virtual ~InfoGraduatedSchool();

  InfoGraduatedSchool(const InfoGraduatedSchool& from);

  inline InfoGraduatedSchool& operator=(const InfoGraduatedSchool& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InfoGraduatedSchool& default_instance();

  static const InfoGraduatedSchool* internal_default_instance();

  void Swap(InfoGraduatedSchool* other);

  // implements Message ----------------------------------------------

  inline InfoGraduatedSchool* New() const { return New(NULL); }

  InfoGraduatedSchool* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InfoGraduatedSchool& from);
  void MergeFrom(const InfoGraduatedSchool& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InfoGraduatedSchool* other);
  void UnsafeMergeFrom(const InfoGraduatedSchool& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string graduated_school = 1;
  void clear_graduated_school();
  static const int kGraduatedSchoolFieldNumber = 1;
  const ::std::string& graduated_school() const;
  void set_graduated_school(const ::std::string& value);
  void set_graduated_school(const char* value);
  void set_graduated_school(const char* value, size_t size);
  ::std::string* mutable_graduated_school();
  ::std::string* release_graduated_school();
  void set_allocated_graduated_school(::std::string* graduated_school);

  // @@protoc_insertion_point(class_scope:personal.InfoGraduatedSchool)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr graduated_school_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_personalCenter_2fmsg_5fpersonInfo_2eproto_impl();
  friend void  protobuf_AddDesc_personalCenter_2fmsg_5fpersonInfo_2eproto_impl();
  friend void protobuf_AssignDesc_personalCenter_2fmsg_5fpersonInfo_2eproto();
  friend void protobuf_ShutdownFile_personalCenter_2fmsg_5fpersonInfo_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<InfoGraduatedSchool> InfoGraduatedSchool_default_instance_;

// -------------------------------------------------------------------

class InfoAward : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:personal.InfoAward) */ {
 public:
  InfoAward();
  virtual ~InfoAward();

  InfoAward(const InfoAward& from);

  inline InfoAward& operator=(const InfoAward& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InfoAward& default_instance();

  static const InfoAward* internal_default_instance();

  void Swap(InfoAward* other);

  // implements Message ----------------------------------------------

  inline InfoAward* New() const { return New(NULL); }

  InfoAward* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InfoAward& from);
  void MergeFrom(const InfoAward& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InfoAward* other);
  void UnsafeMergeFrom(const InfoAward& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string award = 1;
  void clear_award();
  static const int kAwardFieldNumber = 1;
  const ::std::string& award() const;
  void set_award(const ::std::string& value);
  void set_award(const char* value);
  void set_award(const char* value, size_t size);
  ::std::string* mutable_award();
  ::std::string* release_award();
  void set_allocated_award(::std::string* award);

  // @@protoc_insertion_point(class_scope:personal.InfoAward)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr award_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_personalCenter_2fmsg_5fpersonInfo_2eproto_impl();
  friend void  protobuf_AddDesc_personalCenter_2fmsg_5fpersonInfo_2eproto_impl();
  friend void protobuf_AssignDesc_personalCenter_2fmsg_5fpersonInfo_2eproto();
  friend void protobuf_ShutdownFile_personalCenter_2fmsg_5fpersonInfo_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<InfoAward> InfoAward_default_instance_;

// -------------------------------------------------------------------

class InfoSubject : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:personal.InfoSubject) */ {
 public:
  InfoSubject();
  virtual ~InfoSubject();

  InfoSubject(const InfoSubject& from);

  inline InfoSubject& operator=(const InfoSubject& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InfoSubject& default_instance();

  static const InfoSubject* internal_default_instance();

  void Swap(InfoSubject* other);

  // implements Message ----------------------------------------------

  inline InfoSubject* New() const { return New(NULL); }

  InfoSubject* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InfoSubject& from);
  void MergeFrom(const InfoSubject& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InfoSubject* other);
  void UnsafeMergeFrom(const InfoSubject& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string subject = 1;
  void clear_subject();
  static const int kSubjectFieldNumber = 1;
  const ::std::string& subject() const;
  void set_subject(const ::std::string& value);
  void set_subject(const char* value);
  void set_subject(const char* value, size_t size);
  ::std::string* mutable_subject();
  ::std::string* release_subject();
  void set_allocated_subject(::std::string* subject);

  // @@protoc_insertion_point(class_scope:personal.InfoSubject)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr subject_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_personalCenter_2fmsg_5fpersonInfo_2eproto_impl();
  friend void  protobuf_AddDesc_personalCenter_2fmsg_5fpersonInfo_2eproto_impl();
  friend void protobuf_AssignDesc_personalCenter_2fmsg_5fpersonInfo_2eproto();
  friend void protobuf_ShutdownFile_personalCenter_2fmsg_5fpersonInfo_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<InfoSubject> InfoSubject_default_instance_;

// -------------------------------------------------------------------

class InfoInterestSubject : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:personal.InfoInterestSubject) */ {
 public:
  InfoInterestSubject();
  virtual ~InfoInterestSubject();

  InfoInterestSubject(const InfoInterestSubject& from);

  inline InfoInterestSubject& operator=(const InfoInterestSubject& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InfoInterestSubject& default_instance();

  static const InfoInterestSubject* internal_default_instance();

  void Swap(InfoInterestSubject* other);

  // implements Message ----------------------------------------------

  inline InfoInterestSubject* New() const { return New(NULL); }

  InfoInterestSubject* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InfoInterestSubject& from);
  void MergeFrom(const InfoInterestSubject& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InfoInterestSubject* other);
  void UnsafeMergeFrom(const InfoInterestSubject& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string interest_subject = 1;
  void clear_interest_subject();
  static const int kInterestSubjectFieldNumber = 1;
  const ::std::string& interest_subject() const;
  void set_interest_subject(const ::std::string& value);
  void set_interest_subject(const char* value);
  void set_interest_subject(const char* value, size_t size);
  ::std::string* mutable_interest_subject();
  ::std::string* release_interest_subject();
  void set_allocated_interest_subject(::std::string* interest_subject);

  // @@protoc_insertion_point(class_scope:personal.InfoInterestSubject)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr interest_subject_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_personalCenter_2fmsg_5fpersonInfo_2eproto_impl();
  friend void  protobuf_AddDesc_personalCenter_2fmsg_5fpersonInfo_2eproto_impl();
  friend void protobuf_AssignDesc_personalCenter_2fmsg_5fpersonInfo_2eproto();
  friend void protobuf_ShutdownFile_personalCenter_2fmsg_5fpersonInfo_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<InfoInterestSubject> InfoInterestSubject_default_instance_;

// -------------------------------------------------------------------

class InfoEmail : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:personal.InfoEmail) */ {
 public:
  InfoEmail();
  virtual ~InfoEmail();

  InfoEmail(const InfoEmail& from);

  inline InfoEmail& operator=(const InfoEmail& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InfoEmail& default_instance();

  static const InfoEmail* internal_default_instance();

  void Swap(InfoEmail* other);

  // implements Message ----------------------------------------------

  inline InfoEmail* New() const { return New(NULL); }

  InfoEmail* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InfoEmail& from);
  void MergeFrom(const InfoEmail& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InfoEmail* other);
  void UnsafeMergeFrom(const InfoEmail& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string email = 1;
  void clear_email();
  static const int kEmailFieldNumber = 1;
  const ::std::string& email() const;
  void set_email(const ::std::string& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  ::std::string* mutable_email();
  ::std::string* release_email();
  void set_allocated_email(::std::string* email);

  // @@protoc_insertion_point(class_scope:personal.InfoEmail)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr email_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_personalCenter_2fmsg_5fpersonInfo_2eproto_impl();
  friend void  protobuf_AddDesc_personalCenter_2fmsg_5fpersonInfo_2eproto_impl();
  friend void protobuf_AssignDesc_personalCenter_2fmsg_5fpersonInfo_2eproto();
  friend void protobuf_ShutdownFile_personalCenter_2fmsg_5fpersonInfo_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<InfoEmail> InfoEmail_default_instance_;

// -------------------------------------------------------------------

class InfoAvatar : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:personal.InfoAvatar) */ {
 public:
  InfoAvatar();
  virtual ~InfoAvatar();

  InfoAvatar(const InfoAvatar& from);

  inline InfoAvatar& operator=(const InfoAvatar& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InfoAvatar& default_instance();

  static const InfoAvatar* internal_default_instance();

  void Swap(InfoAvatar* other);

  // implements Message ----------------------------------------------

  inline InfoAvatar* New() const { return New(NULL); }

  InfoAvatar* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InfoAvatar& from);
  void MergeFrom(const InfoAvatar& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InfoAvatar* other);
  void UnsafeMergeFrom(const InfoAvatar& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string avatar_url = 1;
  void clear_avatar_url();
  static const int kAvatarUrlFieldNumber = 1;
  const ::std::string& avatar_url() const;
  void set_avatar_url(const ::std::string& value);
  void set_avatar_url(const char* value);
  void set_avatar_url(const char* value, size_t size);
  ::std::string* mutable_avatar_url();
  ::std::string* release_avatar_url();
  void set_allocated_avatar_url(::std::string* avatar_url);

  // @@protoc_insertion_point(class_scope:personal.InfoAvatar)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr avatar_url_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_personalCenter_2fmsg_5fpersonInfo_2eproto_impl();
  friend void  protobuf_AddDesc_personalCenter_2fmsg_5fpersonInfo_2eproto_impl();
  friend void protobuf_AssignDesc_personalCenter_2fmsg_5fpersonInfo_2eproto();
  friend void protobuf_ShutdownFile_personalCenter_2fmsg_5fpersonInfo_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<InfoAvatar> InfoAvatar_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// UserRolesListRequest

inline const UserRolesListRequest* UserRolesListRequest::internal_default_instance() {
  return &UserRolesListRequest_default_instance_.get();
}
// -------------------------------------------------------------------

// UserRolesListResponse

// map<string, string> roles = 1;
inline int UserRolesListResponse::roles_size() const {
  return roles_.size();
}
inline void UserRolesListResponse::clear_roles() {
  roles_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
UserRolesListResponse::roles() const {
  // @@protoc_insertion_point(field_map:personal.UserRolesListResponse.roles)
  return roles_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
UserRolesListResponse::mutable_roles() {
  // @@protoc_insertion_point(field_mutable_map:personal.UserRolesListResponse.roles)
  return roles_.MutableMap();
}

// optional string list_version = 2;
inline void UserRolesListResponse::clear_list_version() {
  list_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserRolesListResponse::list_version() const {
  // @@protoc_insertion_point(field_get:personal.UserRolesListResponse.list_version)
  return list_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserRolesListResponse::set_list_version(const ::std::string& value) {
  
  list_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:personal.UserRolesListResponse.list_version)
}
inline void UserRolesListResponse::set_list_version(const char* value) {
  
  list_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:personal.UserRolesListResponse.list_version)
}
inline void UserRolesListResponse::set_list_version(const char* value, size_t size) {
  
  list_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:personal.UserRolesListResponse.list_version)
}
inline ::std::string* UserRolesListResponse::mutable_list_version() {
  
  // @@protoc_insertion_point(field_mutable:personal.UserRolesListResponse.list_version)
  return list_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserRolesListResponse::release_list_version() {
  // @@protoc_insertion_point(field_release:personal.UserRolesListResponse.list_version)
  
  return list_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserRolesListResponse::set_allocated_list_version(::std::string* list_version) {
  if (list_version != NULL) {
    
  } else {
    
  }
  list_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), list_version);
  // @@protoc_insertion_point(field_set_allocated:personal.UserRolesListResponse.list_version)
}

// optional .grpcCommon.GrpcError error = 3;
inline bool UserRolesListResponse::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
inline void UserRolesListResponse::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) delete error_;
  error_ = NULL;
}
inline const ::grpcCommon::GrpcError& UserRolesListResponse::error() const {
  // @@protoc_insertion_point(field_get:personal.UserRolesListResponse.error)
  return error_ != NULL ? *error_
                         : *::grpcCommon::GrpcError::internal_default_instance();
}
inline ::grpcCommon::GrpcError* UserRolesListResponse::mutable_error() {
  
  if (error_ == NULL) {
    error_ = new ::grpcCommon::GrpcError;
  }
  // @@protoc_insertion_point(field_mutable:personal.UserRolesListResponse.error)
  return error_;
}
inline ::grpcCommon::GrpcError* UserRolesListResponse::release_error() {
  // @@protoc_insertion_point(field_release:personal.UserRolesListResponse.error)
  
  ::grpcCommon::GrpcError* temp = error_;
  error_ = NULL;
  return temp;
}
inline void UserRolesListResponse::set_allocated_error(::grpcCommon::GrpcError* error) {
  delete error_;
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:personal.UserRolesListResponse.error)
}

inline const UserRolesListResponse* UserRolesListResponse::internal_default_instance() {
  return &UserRolesListResponse_default_instance_.get();
}
// -------------------------------------------------------------------

// EducationLevelListRequest

inline const EducationLevelListRequest* EducationLevelListRequest::internal_default_instance() {
  return &EducationLevelListRequest_default_instance_.get();
}
// -------------------------------------------------------------------

// EducationLevelListResponse

// map<string, string> educationLevels = 1;
inline int EducationLevelListResponse::educationlevels_size() const {
  return educationlevels_.size();
}
inline void EducationLevelListResponse::clear_educationlevels() {
  educationlevels_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
EducationLevelListResponse::educationlevels() const {
  // @@protoc_insertion_point(field_map:personal.EducationLevelListResponse.educationLevels)
  return educationlevels_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
EducationLevelListResponse::mutable_educationlevels() {
  // @@protoc_insertion_point(field_mutable_map:personal.EducationLevelListResponse.educationLevels)
  return educationlevels_.MutableMap();
}

// optional string list_version = 2;
inline void EducationLevelListResponse::clear_list_version() {
  list_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EducationLevelListResponse::list_version() const {
  // @@protoc_insertion_point(field_get:personal.EducationLevelListResponse.list_version)
  return list_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EducationLevelListResponse::set_list_version(const ::std::string& value) {
  
  list_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:personal.EducationLevelListResponse.list_version)
}
inline void EducationLevelListResponse::set_list_version(const char* value) {
  
  list_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:personal.EducationLevelListResponse.list_version)
}
inline void EducationLevelListResponse::set_list_version(const char* value, size_t size) {
  
  list_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:personal.EducationLevelListResponse.list_version)
}
inline ::std::string* EducationLevelListResponse::mutable_list_version() {
  
  // @@protoc_insertion_point(field_mutable:personal.EducationLevelListResponse.list_version)
  return list_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EducationLevelListResponse::release_list_version() {
  // @@protoc_insertion_point(field_release:personal.EducationLevelListResponse.list_version)
  
  return list_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EducationLevelListResponse::set_allocated_list_version(::std::string* list_version) {
  if (list_version != NULL) {
    
  } else {
    
  }
  list_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), list_version);
  // @@protoc_insertion_point(field_set_allocated:personal.EducationLevelListResponse.list_version)
}

// optional .grpcCommon.GrpcError error = 3;
inline bool EducationLevelListResponse::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
inline void EducationLevelListResponse::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) delete error_;
  error_ = NULL;
}
inline const ::grpcCommon::GrpcError& EducationLevelListResponse::error() const {
  // @@protoc_insertion_point(field_get:personal.EducationLevelListResponse.error)
  return error_ != NULL ? *error_
                         : *::grpcCommon::GrpcError::internal_default_instance();
}
inline ::grpcCommon::GrpcError* EducationLevelListResponse::mutable_error() {
  
  if (error_ == NULL) {
    error_ = new ::grpcCommon::GrpcError;
  }
  // @@protoc_insertion_point(field_mutable:personal.EducationLevelListResponse.error)
  return error_;
}
inline ::grpcCommon::GrpcError* EducationLevelListResponse::release_error() {
  // @@protoc_insertion_point(field_release:personal.EducationLevelListResponse.error)
  
  ::grpcCommon::GrpcError* temp = error_;
  error_ = NULL;
  return temp;
}
inline void EducationLevelListResponse::set_allocated_error(::grpcCommon::GrpcError* error) {
  delete error_;
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:personal.EducationLevelListResponse.error)
}

inline const EducationLevelListResponse* EducationLevelListResponse::internal_default_instance() {
  return &EducationLevelListResponse_default_instance_.get();
}
// -------------------------------------------------------------------

// SubjectListRequest

inline const SubjectListRequest* SubjectListRequest::internal_default_instance() {
  return &SubjectListRequest_default_instance_.get();
}
// -------------------------------------------------------------------

// SubjectListResponse

// optional .personal.SubjectMessage subject_list = 1;
inline bool SubjectListResponse::has_subject_list() const {
  return this != internal_default_instance() && subject_list_ != NULL;
}
inline void SubjectListResponse::clear_subject_list() {
  if (GetArenaNoVirtual() == NULL && subject_list_ != NULL) delete subject_list_;
  subject_list_ = NULL;
}
inline const ::personal::SubjectMessage& SubjectListResponse::subject_list() const {
  // @@protoc_insertion_point(field_get:personal.SubjectListResponse.subject_list)
  return subject_list_ != NULL ? *subject_list_
                         : *::personal::SubjectMessage::internal_default_instance();
}
inline ::personal::SubjectMessage* SubjectListResponse::mutable_subject_list() {
  
  if (subject_list_ == NULL) {
    subject_list_ = new ::personal::SubjectMessage;
  }
  // @@protoc_insertion_point(field_mutable:personal.SubjectListResponse.subject_list)
  return subject_list_;
}
inline ::personal::SubjectMessage* SubjectListResponse::release_subject_list() {
  // @@protoc_insertion_point(field_release:personal.SubjectListResponse.subject_list)
  
  ::personal::SubjectMessage* temp = subject_list_;
  subject_list_ = NULL;
  return temp;
}
inline void SubjectListResponse::set_allocated_subject_list(::personal::SubjectMessage* subject_list) {
  delete subject_list_;
  subject_list_ = subject_list;
  if (subject_list) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:personal.SubjectListResponse.subject_list)
}

// optional .grpcCommon.GrpcError error = 2;
inline bool SubjectListResponse::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
inline void SubjectListResponse::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) delete error_;
  error_ = NULL;
}
inline const ::grpcCommon::GrpcError& SubjectListResponse::error() const {
  // @@protoc_insertion_point(field_get:personal.SubjectListResponse.error)
  return error_ != NULL ? *error_
                         : *::grpcCommon::GrpcError::internal_default_instance();
}
inline ::grpcCommon::GrpcError* SubjectListResponse::mutable_error() {
  
  if (error_ == NULL) {
    error_ = new ::grpcCommon::GrpcError;
  }
  // @@protoc_insertion_point(field_mutable:personal.SubjectListResponse.error)
  return error_;
}
inline ::grpcCommon::GrpcError* SubjectListResponse::release_error() {
  // @@protoc_insertion_point(field_release:personal.SubjectListResponse.error)
  
  ::grpcCommon::GrpcError* temp = error_;
  error_ = NULL;
  return temp;
}
inline void SubjectListResponse::set_allocated_error(::grpcCommon::GrpcError* error) {
  delete error_;
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:personal.SubjectListResponse.error)
}

inline const SubjectListResponse* SubjectListResponse::internal_default_instance() {
  return &SubjectListResponse_default_instance_.get();
}
// -------------------------------------------------------------------

// SubjectFieldMap

// optional string key = 1;
inline void SubjectFieldMap::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SubjectFieldMap::key() const {
  // @@protoc_insertion_point(field_get:personal.SubjectFieldMap.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubjectFieldMap::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:personal.SubjectFieldMap.key)
}
inline void SubjectFieldMap::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:personal.SubjectFieldMap.key)
}
inline void SubjectFieldMap::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:personal.SubjectFieldMap.key)
}
inline ::std::string* SubjectFieldMap::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:personal.SubjectFieldMap.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SubjectFieldMap::release_key() {
  // @@protoc_insertion_point(field_release:personal.SubjectFieldMap.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubjectFieldMap::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:personal.SubjectFieldMap.key)
}

// optional string value = 2;
inline void SubjectFieldMap::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SubjectFieldMap::value() const {
  // @@protoc_insertion_point(field_get:personal.SubjectFieldMap.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubjectFieldMap::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:personal.SubjectFieldMap.value)
}
inline void SubjectFieldMap::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:personal.SubjectFieldMap.value)
}
inline void SubjectFieldMap::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:personal.SubjectFieldMap.value)
}
inline ::std::string* SubjectFieldMap::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:personal.SubjectFieldMap.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SubjectFieldMap::release_value() {
  // @@protoc_insertion_point(field_release:personal.SubjectFieldMap.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubjectFieldMap::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:personal.SubjectFieldMap.value)
}

inline const SubjectFieldMap* SubjectFieldMap::internal_default_instance() {
  return &SubjectFieldMap_default_instance_.get();
}
// -------------------------------------------------------------------

// SubjectMessage

// optional .personal.SubjectFieldMap subject_field = 1;
inline bool SubjectMessage::has_subject_field() const {
  return this != internal_default_instance() && subject_field_ != NULL;
}
inline void SubjectMessage::clear_subject_field() {
  if (GetArenaNoVirtual() == NULL && subject_field_ != NULL) delete subject_field_;
  subject_field_ = NULL;
}
inline const ::personal::SubjectFieldMap& SubjectMessage::subject_field() const {
  // @@protoc_insertion_point(field_get:personal.SubjectMessage.subject_field)
  return subject_field_ != NULL ? *subject_field_
                         : *::personal::SubjectFieldMap::internal_default_instance();
}
inline ::personal::SubjectFieldMap* SubjectMessage::mutable_subject_field() {
  
  if (subject_field_ == NULL) {
    subject_field_ = new ::personal::SubjectFieldMap;
  }
  // @@protoc_insertion_point(field_mutable:personal.SubjectMessage.subject_field)
  return subject_field_;
}
inline ::personal::SubjectFieldMap* SubjectMessage::release_subject_field() {
  // @@protoc_insertion_point(field_release:personal.SubjectMessage.subject_field)
  
  ::personal::SubjectFieldMap* temp = subject_field_;
  subject_field_ = NULL;
  return temp;
}
inline void SubjectMessage::set_allocated_subject_field(::personal::SubjectFieldMap* subject_field) {
  delete subject_field_;
  subject_field_ = subject_field;
  if (subject_field) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:personal.SubjectMessage.subject_field)
}

// repeated .personal.SubjectMessage sub_subject = 2;
inline int SubjectMessage::sub_subject_size() const {
  return sub_subject_.size();
}
inline void SubjectMessage::clear_sub_subject() {
  sub_subject_.Clear();
}
inline const ::personal::SubjectMessage& SubjectMessage::sub_subject(int index) const {
  // @@protoc_insertion_point(field_get:personal.SubjectMessage.sub_subject)
  return sub_subject_.Get(index);
}
inline ::personal::SubjectMessage* SubjectMessage::mutable_sub_subject(int index) {
  // @@protoc_insertion_point(field_mutable:personal.SubjectMessage.sub_subject)
  return sub_subject_.Mutable(index);
}
inline ::personal::SubjectMessage* SubjectMessage::add_sub_subject() {
  // @@protoc_insertion_point(field_add:personal.SubjectMessage.sub_subject)
  return sub_subject_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::personal::SubjectMessage >*
SubjectMessage::mutable_sub_subject() {
  // @@protoc_insertion_point(field_mutable_list:personal.SubjectMessage.sub_subject)
  return &sub_subject_;
}
inline const ::google::protobuf::RepeatedPtrField< ::personal::SubjectMessage >&
SubjectMessage::sub_subject() const {
  // @@protoc_insertion_point(field_list:personal.SubjectMessage.sub_subject)
  return sub_subject_;
}

// optional bool has_sub_subject = 3;
inline void SubjectMessage::clear_has_sub_subject() {
  has_sub_subject_ = false;
}
inline bool SubjectMessage::has_sub_subject() const {
  // @@protoc_insertion_point(field_get:personal.SubjectMessage.has_sub_subject)
  return has_sub_subject_;
}
inline void SubjectMessage::set_has_sub_subject(bool value) {
  
  has_sub_subject_ = value;
  // @@protoc_insertion_point(field_set:personal.SubjectMessage.has_sub_subject)
}

inline const SubjectMessage* SubjectMessage::internal_default_instance() {
  return &SubjectMessage_default_instance_.get();
}
// -------------------------------------------------------------------

// MyInfoRequest

// optional string user_id = 1;
inline void MyInfoRequest::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MyInfoRequest::user_id() const {
  // @@protoc_insertion_point(field_get:personal.MyInfoRequest.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MyInfoRequest::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:personal.MyInfoRequest.user_id)
}
inline void MyInfoRequest::set_user_id(const char* value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:personal.MyInfoRequest.user_id)
}
inline void MyInfoRequest::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:personal.MyInfoRequest.user_id)
}
inline ::std::string* MyInfoRequest::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:personal.MyInfoRequest.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MyInfoRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:personal.MyInfoRequest.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MyInfoRequest::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:personal.MyInfoRequest.user_id)
}

inline const MyInfoRequest* MyInfoRequest::internal_default_instance() {
  return &MyInfoRequest_default_instance_.get();
}
// -------------------------------------------------------------------

// MyInfoResponse

// optional .personal.InfoNickName nick_name = 1;
inline bool MyInfoResponse::has_nick_name() const {
  return this != internal_default_instance() && nick_name_ != NULL;
}
inline void MyInfoResponse::clear_nick_name() {
  if (GetArenaNoVirtual() == NULL && nick_name_ != NULL) delete nick_name_;
  nick_name_ = NULL;
}
inline const ::personal::InfoNickName& MyInfoResponse::nick_name() const {
  // @@protoc_insertion_point(field_get:personal.MyInfoResponse.nick_name)
  return nick_name_ != NULL ? *nick_name_
                         : *::personal::InfoNickName::internal_default_instance();
}
inline ::personal::InfoNickName* MyInfoResponse::mutable_nick_name() {
  
  if (nick_name_ == NULL) {
    nick_name_ = new ::personal::InfoNickName;
  }
  // @@protoc_insertion_point(field_mutable:personal.MyInfoResponse.nick_name)
  return nick_name_;
}
inline ::personal::InfoNickName* MyInfoResponse::release_nick_name() {
  // @@protoc_insertion_point(field_release:personal.MyInfoResponse.nick_name)
  
  ::personal::InfoNickName* temp = nick_name_;
  nick_name_ = NULL;
  return temp;
}
inline void MyInfoResponse::set_allocated_nick_name(::personal::InfoNickName* nick_name) {
  delete nick_name_;
  nick_name_ = nick_name;
  if (nick_name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:personal.MyInfoResponse.nick_name)
}

// optional .personal.InfoRealName real_name = 2;
inline bool MyInfoResponse::has_real_name() const {
  return this != internal_default_instance() && real_name_ != NULL;
}
inline void MyInfoResponse::clear_real_name() {
  if (GetArenaNoVirtual() == NULL && real_name_ != NULL) delete real_name_;
  real_name_ = NULL;
}
inline const ::personal::InfoRealName& MyInfoResponse::real_name() const {
  // @@protoc_insertion_point(field_get:personal.MyInfoResponse.real_name)
  return real_name_ != NULL ? *real_name_
                         : *::personal::InfoRealName::internal_default_instance();
}
inline ::personal::InfoRealName* MyInfoResponse::mutable_real_name() {
  
  if (real_name_ == NULL) {
    real_name_ = new ::personal::InfoRealName;
  }
  // @@protoc_insertion_point(field_mutable:personal.MyInfoResponse.real_name)
  return real_name_;
}
inline ::personal::InfoRealName* MyInfoResponse::release_real_name() {
  // @@protoc_insertion_point(field_release:personal.MyInfoResponse.real_name)
  
  ::personal::InfoRealName* temp = real_name_;
  real_name_ = NULL;
  return temp;
}
inline void MyInfoResponse::set_allocated_real_name(::personal::InfoRealName* real_name) {
  delete real_name_;
  real_name_ = real_name;
  if (real_name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:personal.MyInfoResponse.real_name)
}

// optional .personal.InfoIdNumber id_number = 3;
inline bool MyInfoResponse::has_id_number() const {
  return this != internal_default_instance() && id_number_ != NULL;
}
inline void MyInfoResponse::clear_id_number() {
  if (GetArenaNoVirtual() == NULL && id_number_ != NULL) delete id_number_;
  id_number_ = NULL;
}
inline const ::personal::InfoIdNumber& MyInfoResponse::id_number() const {
  // @@protoc_insertion_point(field_get:personal.MyInfoResponse.id_number)
  return id_number_ != NULL ? *id_number_
                         : *::personal::InfoIdNumber::internal_default_instance();
}
inline ::personal::InfoIdNumber* MyInfoResponse::mutable_id_number() {
  
  if (id_number_ == NULL) {
    id_number_ = new ::personal::InfoIdNumber;
  }
  // @@protoc_insertion_point(field_mutable:personal.MyInfoResponse.id_number)
  return id_number_;
}
inline ::personal::InfoIdNumber* MyInfoResponse::release_id_number() {
  // @@protoc_insertion_point(field_release:personal.MyInfoResponse.id_number)
  
  ::personal::InfoIdNumber* temp = id_number_;
  id_number_ = NULL;
  return temp;
}
inline void MyInfoResponse::set_allocated_id_number(::personal::InfoIdNumber* id_number) {
  delete id_number_;
  id_number_ = id_number;
  if (id_number) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:personal.MyInfoResponse.id_number)
}

// optional .personal.InfoSex sex = 4;
inline bool MyInfoResponse::has_sex() const {
  return this != internal_default_instance() && sex_ != NULL;
}
inline void MyInfoResponse::clear_sex() {
  if (GetArenaNoVirtual() == NULL && sex_ != NULL) delete sex_;
  sex_ = NULL;
}
inline const ::personal::InfoSex& MyInfoResponse::sex() const {
  // @@protoc_insertion_point(field_get:personal.MyInfoResponse.sex)
  return sex_ != NULL ? *sex_
                         : *::personal::InfoSex::internal_default_instance();
}
inline ::personal::InfoSex* MyInfoResponse::mutable_sex() {
  
  if (sex_ == NULL) {
    sex_ = new ::personal::InfoSex;
  }
  // @@protoc_insertion_point(field_mutable:personal.MyInfoResponse.sex)
  return sex_;
}
inline ::personal::InfoSex* MyInfoResponse::release_sex() {
  // @@protoc_insertion_point(field_release:personal.MyInfoResponse.sex)
  
  ::personal::InfoSex* temp = sex_;
  sex_ = NULL;
  return temp;
}
inline void MyInfoResponse::set_allocated_sex(::personal::InfoSex* sex) {
  delete sex_;
  sex_ = sex;
  if (sex) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:personal.MyInfoResponse.sex)
}

// optional .personal.InfoBirthday birthday = 5;
inline bool MyInfoResponse::has_birthday() const {
  return this != internal_default_instance() && birthday_ != NULL;
}
inline void MyInfoResponse::clear_birthday() {
  if (GetArenaNoVirtual() == NULL && birthday_ != NULL) delete birthday_;
  birthday_ = NULL;
}
inline const ::personal::InfoBirthday& MyInfoResponse::birthday() const {
  // @@protoc_insertion_point(field_get:personal.MyInfoResponse.birthday)
  return birthday_ != NULL ? *birthday_
                         : *::personal::InfoBirthday::internal_default_instance();
}
inline ::personal::InfoBirthday* MyInfoResponse::mutable_birthday() {
  
  if (birthday_ == NULL) {
    birthday_ = new ::personal::InfoBirthday;
  }
  // @@protoc_insertion_point(field_mutable:personal.MyInfoResponse.birthday)
  return birthday_;
}
inline ::personal::InfoBirthday* MyInfoResponse::release_birthday() {
  // @@protoc_insertion_point(field_release:personal.MyInfoResponse.birthday)
  
  ::personal::InfoBirthday* temp = birthday_;
  birthday_ = NULL;
  return temp;
}
inline void MyInfoResponse::set_allocated_birthday(::personal::InfoBirthday* birthday) {
  delete birthday_;
  birthday_ = birthday;
  if (birthday) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:personal.MyInfoResponse.birthday)
}

// optional .personal.InfoUserRoles user_roles = 6;
inline bool MyInfoResponse::has_user_roles() const {
  return this != internal_default_instance() && user_roles_ != NULL;
}
inline void MyInfoResponse::clear_user_roles() {
  if (GetArenaNoVirtual() == NULL && user_roles_ != NULL) delete user_roles_;
  user_roles_ = NULL;
}
inline const ::personal::InfoUserRoles& MyInfoResponse::user_roles() const {
  // @@protoc_insertion_point(field_get:personal.MyInfoResponse.user_roles)
  return user_roles_ != NULL ? *user_roles_
                         : *::personal::InfoUserRoles::internal_default_instance();
}
inline ::personal::InfoUserRoles* MyInfoResponse::mutable_user_roles() {
  
  if (user_roles_ == NULL) {
    user_roles_ = new ::personal::InfoUserRoles;
  }
  // @@protoc_insertion_point(field_mutable:personal.MyInfoResponse.user_roles)
  return user_roles_;
}
inline ::personal::InfoUserRoles* MyInfoResponse::release_user_roles() {
  // @@protoc_insertion_point(field_release:personal.MyInfoResponse.user_roles)
  
  ::personal::InfoUserRoles* temp = user_roles_;
  user_roles_ = NULL;
  return temp;
}
inline void MyInfoResponse::set_allocated_user_roles(::personal::InfoUserRoles* user_roles) {
  delete user_roles_;
  user_roles_ = user_roles;
  if (user_roles) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:personal.MyInfoResponse.user_roles)
}

// optional .personal.InfoWorkUnit workUnit = 7;
inline bool MyInfoResponse::has_workunit() const {
  return this != internal_default_instance() && workunit_ != NULL;
}
inline void MyInfoResponse::clear_workunit() {
  if (GetArenaNoVirtual() == NULL && workunit_ != NULL) delete workunit_;
  workunit_ = NULL;
}
inline const ::personal::InfoWorkUnit& MyInfoResponse::workunit() const {
  // @@protoc_insertion_point(field_get:personal.MyInfoResponse.workUnit)
  return workunit_ != NULL ? *workunit_
                         : *::personal::InfoWorkUnit::internal_default_instance();
}
inline ::personal::InfoWorkUnit* MyInfoResponse::mutable_workunit() {
  
  if (workunit_ == NULL) {
    workunit_ = new ::personal::InfoWorkUnit;
  }
  // @@protoc_insertion_point(field_mutable:personal.MyInfoResponse.workUnit)
  return workunit_;
}
inline ::personal::InfoWorkUnit* MyInfoResponse::release_workunit() {
  // @@protoc_insertion_point(field_release:personal.MyInfoResponse.workUnit)
  
  ::personal::InfoWorkUnit* temp = workunit_;
  workunit_ = NULL;
  return temp;
}
inline void MyInfoResponse::set_allocated_workunit(::personal::InfoWorkUnit* workunit) {
  delete workunit_;
  workunit_ = workunit;
  if (workunit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:personal.MyInfoResponse.workUnit)
}

// optional .personal.InfoEducationLevel educationLevel = 8;
inline bool MyInfoResponse::has_educationlevel() const {
  return this != internal_default_instance() && educationlevel_ != NULL;
}
inline void MyInfoResponse::clear_educationlevel() {
  if (GetArenaNoVirtual() == NULL && educationlevel_ != NULL) delete educationlevel_;
  educationlevel_ = NULL;
}
inline const ::personal::InfoEducationLevel& MyInfoResponse::educationlevel() const {
  // @@protoc_insertion_point(field_get:personal.MyInfoResponse.educationLevel)
  return educationlevel_ != NULL ? *educationlevel_
                         : *::personal::InfoEducationLevel::internal_default_instance();
}
inline ::personal::InfoEducationLevel* MyInfoResponse::mutable_educationlevel() {
  
  if (educationlevel_ == NULL) {
    educationlevel_ = new ::personal::InfoEducationLevel;
  }
  // @@protoc_insertion_point(field_mutable:personal.MyInfoResponse.educationLevel)
  return educationlevel_;
}
inline ::personal::InfoEducationLevel* MyInfoResponse::release_educationlevel() {
  // @@protoc_insertion_point(field_release:personal.MyInfoResponse.educationLevel)
  
  ::personal::InfoEducationLevel* temp = educationlevel_;
  educationlevel_ = NULL;
  return temp;
}
inline void MyInfoResponse::set_allocated_educationlevel(::personal::InfoEducationLevel* educationlevel) {
  delete educationlevel_;
  educationlevel_ = educationlevel;
  if (educationlevel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:personal.MyInfoResponse.educationLevel)
}

// optional .personal.InfoGraduatedSchool graduated_school = 9;
inline bool MyInfoResponse::has_graduated_school() const {
  return this != internal_default_instance() && graduated_school_ != NULL;
}
inline void MyInfoResponse::clear_graduated_school() {
  if (GetArenaNoVirtual() == NULL && graduated_school_ != NULL) delete graduated_school_;
  graduated_school_ = NULL;
}
inline const ::personal::InfoGraduatedSchool& MyInfoResponse::graduated_school() const {
  // @@protoc_insertion_point(field_get:personal.MyInfoResponse.graduated_school)
  return graduated_school_ != NULL ? *graduated_school_
                         : *::personal::InfoGraduatedSchool::internal_default_instance();
}
inline ::personal::InfoGraduatedSchool* MyInfoResponse::mutable_graduated_school() {
  
  if (graduated_school_ == NULL) {
    graduated_school_ = new ::personal::InfoGraduatedSchool;
  }
  // @@protoc_insertion_point(field_mutable:personal.MyInfoResponse.graduated_school)
  return graduated_school_;
}
inline ::personal::InfoGraduatedSchool* MyInfoResponse::release_graduated_school() {
  // @@protoc_insertion_point(field_release:personal.MyInfoResponse.graduated_school)
  
  ::personal::InfoGraduatedSchool* temp = graduated_school_;
  graduated_school_ = NULL;
  return temp;
}
inline void MyInfoResponse::set_allocated_graduated_school(::personal::InfoGraduatedSchool* graduated_school) {
  delete graduated_school_;
  graduated_school_ = graduated_school;
  if (graduated_school) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:personal.MyInfoResponse.graduated_school)
}

// optional .personal.InfoAward award = 10;
inline bool MyInfoResponse::has_award() const {
  return this != internal_default_instance() && award_ != NULL;
}
inline void MyInfoResponse::clear_award() {
  if (GetArenaNoVirtual() == NULL && award_ != NULL) delete award_;
  award_ = NULL;
}
inline const ::personal::InfoAward& MyInfoResponse::award() const {
  // @@protoc_insertion_point(field_get:personal.MyInfoResponse.award)
  return award_ != NULL ? *award_
                         : *::personal::InfoAward::internal_default_instance();
}
inline ::personal::InfoAward* MyInfoResponse::mutable_award() {
  
  if (award_ == NULL) {
    award_ = new ::personal::InfoAward;
  }
  // @@protoc_insertion_point(field_mutable:personal.MyInfoResponse.award)
  return award_;
}
inline ::personal::InfoAward* MyInfoResponse::release_award() {
  // @@protoc_insertion_point(field_release:personal.MyInfoResponse.award)
  
  ::personal::InfoAward* temp = award_;
  award_ = NULL;
  return temp;
}
inline void MyInfoResponse::set_allocated_award(::personal::InfoAward* award) {
  delete award_;
  award_ = award;
  if (award) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:personal.MyInfoResponse.award)
}

// optional .personal.InfoSubject subject = 11;
inline bool MyInfoResponse::has_subject() const {
  return this != internal_default_instance() && subject_ != NULL;
}
inline void MyInfoResponse::clear_subject() {
  if (GetArenaNoVirtual() == NULL && subject_ != NULL) delete subject_;
  subject_ = NULL;
}
inline const ::personal::InfoSubject& MyInfoResponse::subject() const {
  // @@protoc_insertion_point(field_get:personal.MyInfoResponse.subject)
  return subject_ != NULL ? *subject_
                         : *::personal::InfoSubject::internal_default_instance();
}
inline ::personal::InfoSubject* MyInfoResponse::mutable_subject() {
  
  if (subject_ == NULL) {
    subject_ = new ::personal::InfoSubject;
  }
  // @@protoc_insertion_point(field_mutable:personal.MyInfoResponse.subject)
  return subject_;
}
inline ::personal::InfoSubject* MyInfoResponse::release_subject() {
  // @@protoc_insertion_point(field_release:personal.MyInfoResponse.subject)
  
  ::personal::InfoSubject* temp = subject_;
  subject_ = NULL;
  return temp;
}
inline void MyInfoResponse::set_allocated_subject(::personal::InfoSubject* subject) {
  delete subject_;
  subject_ = subject;
  if (subject) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:personal.MyInfoResponse.subject)
}

// optional .personal.InfoInterestSubject interest_subject = 12;
inline bool MyInfoResponse::has_interest_subject() const {
  return this != internal_default_instance() && interest_subject_ != NULL;
}
inline void MyInfoResponse::clear_interest_subject() {
  if (GetArenaNoVirtual() == NULL && interest_subject_ != NULL) delete interest_subject_;
  interest_subject_ = NULL;
}
inline const ::personal::InfoInterestSubject& MyInfoResponse::interest_subject() const {
  // @@protoc_insertion_point(field_get:personal.MyInfoResponse.interest_subject)
  return interest_subject_ != NULL ? *interest_subject_
                         : *::personal::InfoInterestSubject::internal_default_instance();
}
inline ::personal::InfoInterestSubject* MyInfoResponse::mutable_interest_subject() {
  
  if (interest_subject_ == NULL) {
    interest_subject_ = new ::personal::InfoInterestSubject;
  }
  // @@protoc_insertion_point(field_mutable:personal.MyInfoResponse.interest_subject)
  return interest_subject_;
}
inline ::personal::InfoInterestSubject* MyInfoResponse::release_interest_subject() {
  // @@protoc_insertion_point(field_release:personal.MyInfoResponse.interest_subject)
  
  ::personal::InfoInterestSubject* temp = interest_subject_;
  interest_subject_ = NULL;
  return temp;
}
inline void MyInfoResponse::set_allocated_interest_subject(::personal::InfoInterestSubject* interest_subject) {
  delete interest_subject_;
  interest_subject_ = interest_subject;
  if (interest_subject) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:personal.MyInfoResponse.interest_subject)
}

// optional .personal.InfoEmail email = 13;
inline bool MyInfoResponse::has_email() const {
  return this != internal_default_instance() && email_ != NULL;
}
inline void MyInfoResponse::clear_email() {
  if (GetArenaNoVirtual() == NULL && email_ != NULL) delete email_;
  email_ = NULL;
}
inline const ::personal::InfoEmail& MyInfoResponse::email() const {
  // @@protoc_insertion_point(field_get:personal.MyInfoResponse.email)
  return email_ != NULL ? *email_
                         : *::personal::InfoEmail::internal_default_instance();
}
inline ::personal::InfoEmail* MyInfoResponse::mutable_email() {
  
  if (email_ == NULL) {
    email_ = new ::personal::InfoEmail;
  }
  // @@protoc_insertion_point(field_mutable:personal.MyInfoResponse.email)
  return email_;
}
inline ::personal::InfoEmail* MyInfoResponse::release_email() {
  // @@protoc_insertion_point(field_release:personal.MyInfoResponse.email)
  
  ::personal::InfoEmail* temp = email_;
  email_ = NULL;
  return temp;
}
inline void MyInfoResponse::set_allocated_email(::personal::InfoEmail* email) {
  delete email_;
  email_ = email;
  if (email) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:personal.MyInfoResponse.email)
}

// optional .personal.InfoAvatar avatar_url = 14;
inline bool MyInfoResponse::has_avatar_url() const {
  return this != internal_default_instance() && avatar_url_ != NULL;
}
inline void MyInfoResponse::clear_avatar_url() {
  if (GetArenaNoVirtual() == NULL && avatar_url_ != NULL) delete avatar_url_;
  avatar_url_ = NULL;
}
inline const ::personal::InfoAvatar& MyInfoResponse::avatar_url() const {
  // @@protoc_insertion_point(field_get:personal.MyInfoResponse.avatar_url)
  return avatar_url_ != NULL ? *avatar_url_
                         : *::personal::InfoAvatar::internal_default_instance();
}
inline ::personal::InfoAvatar* MyInfoResponse::mutable_avatar_url() {
  
  if (avatar_url_ == NULL) {
    avatar_url_ = new ::personal::InfoAvatar;
  }
  // @@protoc_insertion_point(field_mutable:personal.MyInfoResponse.avatar_url)
  return avatar_url_;
}
inline ::personal::InfoAvatar* MyInfoResponse::release_avatar_url() {
  // @@protoc_insertion_point(field_release:personal.MyInfoResponse.avatar_url)
  
  ::personal::InfoAvatar* temp = avatar_url_;
  avatar_url_ = NULL;
  return temp;
}
inline void MyInfoResponse::set_allocated_avatar_url(::personal::InfoAvatar* avatar_url) {
  delete avatar_url_;
  avatar_url_ = avatar_url;
  if (avatar_url) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:personal.MyInfoResponse.avatar_url)
}

// optional .grpcCommon.GrpcError error = 15;
inline bool MyInfoResponse::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
inline void MyInfoResponse::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) delete error_;
  error_ = NULL;
}
inline const ::grpcCommon::GrpcError& MyInfoResponse::error() const {
  // @@protoc_insertion_point(field_get:personal.MyInfoResponse.error)
  return error_ != NULL ? *error_
                         : *::grpcCommon::GrpcError::internal_default_instance();
}
inline ::grpcCommon::GrpcError* MyInfoResponse::mutable_error() {
  
  if (error_ == NULL) {
    error_ = new ::grpcCommon::GrpcError;
  }
  // @@protoc_insertion_point(field_mutable:personal.MyInfoResponse.error)
  return error_;
}
inline ::grpcCommon::GrpcError* MyInfoResponse::release_error() {
  // @@protoc_insertion_point(field_release:personal.MyInfoResponse.error)
  
  ::grpcCommon::GrpcError* temp = error_;
  error_ = NULL;
  return temp;
}
inline void MyInfoResponse::set_allocated_error(::grpcCommon::GrpcError* error) {
  delete error_;
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:personal.MyInfoResponse.error)
}

inline const MyInfoResponse* MyInfoResponse::internal_default_instance() {
  return &MyInfoResponse_default_instance_.get();
}
// -------------------------------------------------------------------

// MyInfoUpdateRequest

// optional string user_id = 1;
inline void MyInfoUpdateRequest::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MyInfoUpdateRequest::user_id() const {
  // @@protoc_insertion_point(field_get:personal.MyInfoUpdateRequest.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MyInfoUpdateRequest::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:personal.MyInfoUpdateRequest.user_id)
}
inline void MyInfoUpdateRequest::set_user_id(const char* value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:personal.MyInfoUpdateRequest.user_id)
}
inline void MyInfoUpdateRequest::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:personal.MyInfoUpdateRequest.user_id)
}
inline ::std::string* MyInfoUpdateRequest::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:personal.MyInfoUpdateRequest.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MyInfoUpdateRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:personal.MyInfoUpdateRequest.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MyInfoUpdateRequest::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:personal.MyInfoUpdateRequest.user_id)
}

// repeated .google.protobuf.Any field = 2;
inline int MyInfoUpdateRequest::field_size() const {
  return field_.size();
}
inline void MyInfoUpdateRequest::clear_field() {
  field_.Clear();
}
inline const ::google::protobuf::Any& MyInfoUpdateRequest::field(int index) const {
  // @@protoc_insertion_point(field_get:personal.MyInfoUpdateRequest.field)
  return field_.Get(index);
}
inline ::google::protobuf::Any* MyInfoUpdateRequest::mutable_field(int index) {
  // @@protoc_insertion_point(field_mutable:personal.MyInfoUpdateRequest.field)
  return field_.Mutable(index);
}
inline ::google::protobuf::Any* MyInfoUpdateRequest::add_field() {
  // @@protoc_insertion_point(field_add:personal.MyInfoUpdateRequest.field)
  return field_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
MyInfoUpdateRequest::mutable_field() {
  // @@protoc_insertion_point(field_mutable_list:personal.MyInfoUpdateRequest.field)
  return &field_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
MyInfoUpdateRequest::field() const {
  // @@protoc_insertion_point(field_list:personal.MyInfoUpdateRequest.field)
  return field_;
}

inline const MyInfoUpdateRequest* MyInfoUpdateRequest::internal_default_instance() {
  return &MyInfoUpdateRequest_default_instance_.get();
}
// -------------------------------------------------------------------

// MyInfoUpdateResponse

// optional .grpcCommon.GrpcError error = 1;
inline bool MyInfoUpdateResponse::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
inline void MyInfoUpdateResponse::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) delete error_;
  error_ = NULL;
}
inline const ::grpcCommon::GrpcError& MyInfoUpdateResponse::error() const {
  // @@protoc_insertion_point(field_get:personal.MyInfoUpdateResponse.error)
  return error_ != NULL ? *error_
                         : *::grpcCommon::GrpcError::internal_default_instance();
}
inline ::grpcCommon::GrpcError* MyInfoUpdateResponse::mutable_error() {
  
  if (error_ == NULL) {
    error_ = new ::grpcCommon::GrpcError;
  }
  // @@protoc_insertion_point(field_mutable:personal.MyInfoUpdateResponse.error)
  return error_;
}
inline ::grpcCommon::GrpcError* MyInfoUpdateResponse::release_error() {
  // @@protoc_insertion_point(field_release:personal.MyInfoUpdateResponse.error)
  
  ::grpcCommon::GrpcError* temp = error_;
  error_ = NULL;
  return temp;
}
inline void MyInfoUpdateResponse::set_allocated_error(::grpcCommon::GrpcError* error) {
  delete error_;
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:personal.MyInfoUpdateResponse.error)
}

inline const MyInfoUpdateResponse* MyInfoUpdateResponse::internal_default_instance() {
  return &MyInfoUpdateResponse_default_instance_.get();
}
// -------------------------------------------------------------------

// InfoNickName

// optional string nick_name = 1;
inline void InfoNickName::clear_nick_name() {
  nick_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InfoNickName::nick_name() const {
  // @@protoc_insertion_point(field_get:personal.InfoNickName.nick_name)
  return nick_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InfoNickName::set_nick_name(const ::std::string& value) {
  
  nick_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:personal.InfoNickName.nick_name)
}
inline void InfoNickName::set_nick_name(const char* value) {
  
  nick_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:personal.InfoNickName.nick_name)
}
inline void InfoNickName::set_nick_name(const char* value, size_t size) {
  
  nick_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:personal.InfoNickName.nick_name)
}
inline ::std::string* InfoNickName::mutable_nick_name() {
  
  // @@protoc_insertion_point(field_mutable:personal.InfoNickName.nick_name)
  return nick_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InfoNickName::release_nick_name() {
  // @@protoc_insertion_point(field_release:personal.InfoNickName.nick_name)
  
  return nick_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InfoNickName::set_allocated_nick_name(::std::string* nick_name) {
  if (nick_name != NULL) {
    
  } else {
    
  }
  nick_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nick_name);
  // @@protoc_insertion_point(field_set_allocated:personal.InfoNickName.nick_name)
}

inline const InfoNickName* InfoNickName::internal_default_instance() {
  return &InfoNickName_default_instance_.get();
}
// -------------------------------------------------------------------

// InfoRealName

// optional string real_name = 1;
inline void InfoRealName::clear_real_name() {
  real_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InfoRealName::real_name() const {
  // @@protoc_insertion_point(field_get:personal.InfoRealName.real_name)
  return real_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InfoRealName::set_real_name(const ::std::string& value) {
  
  real_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:personal.InfoRealName.real_name)
}
inline void InfoRealName::set_real_name(const char* value) {
  
  real_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:personal.InfoRealName.real_name)
}
inline void InfoRealName::set_real_name(const char* value, size_t size) {
  
  real_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:personal.InfoRealName.real_name)
}
inline ::std::string* InfoRealName::mutable_real_name() {
  
  // @@protoc_insertion_point(field_mutable:personal.InfoRealName.real_name)
  return real_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InfoRealName::release_real_name() {
  // @@protoc_insertion_point(field_release:personal.InfoRealName.real_name)
  
  return real_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InfoRealName::set_allocated_real_name(::std::string* real_name) {
  if (real_name != NULL) {
    
  } else {
    
  }
  real_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), real_name);
  // @@protoc_insertion_point(field_set_allocated:personal.InfoRealName.real_name)
}

inline const InfoRealName* InfoRealName::internal_default_instance() {
  return &InfoRealName_default_instance_.get();
}
// -------------------------------------------------------------------

// InfoIdNumber

// optional string id_number = 1;
inline void InfoIdNumber::clear_id_number() {
  id_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InfoIdNumber::id_number() const {
  // @@protoc_insertion_point(field_get:personal.InfoIdNumber.id_number)
  return id_number_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InfoIdNumber::set_id_number(const ::std::string& value) {
  
  id_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:personal.InfoIdNumber.id_number)
}
inline void InfoIdNumber::set_id_number(const char* value) {
  
  id_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:personal.InfoIdNumber.id_number)
}
inline void InfoIdNumber::set_id_number(const char* value, size_t size) {
  
  id_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:personal.InfoIdNumber.id_number)
}
inline ::std::string* InfoIdNumber::mutable_id_number() {
  
  // @@protoc_insertion_point(field_mutable:personal.InfoIdNumber.id_number)
  return id_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InfoIdNumber::release_id_number() {
  // @@protoc_insertion_point(field_release:personal.InfoIdNumber.id_number)
  
  return id_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InfoIdNumber::set_allocated_id_number(::std::string* id_number) {
  if (id_number != NULL) {
    
  } else {
    
  }
  id_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id_number);
  // @@protoc_insertion_point(field_set_allocated:personal.InfoIdNumber.id_number)
}

inline const InfoIdNumber* InfoIdNumber::internal_default_instance() {
  return &InfoIdNumber_default_instance_.get();
}
// -------------------------------------------------------------------

// InfoSex

// optional string sex = 1;
inline void InfoSex::clear_sex() {
  sex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InfoSex::sex() const {
  // @@protoc_insertion_point(field_get:personal.InfoSex.sex)
  return sex_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InfoSex::set_sex(const ::std::string& value) {
  
  sex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:personal.InfoSex.sex)
}
inline void InfoSex::set_sex(const char* value) {
  
  sex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:personal.InfoSex.sex)
}
inline void InfoSex::set_sex(const char* value, size_t size) {
  
  sex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:personal.InfoSex.sex)
}
inline ::std::string* InfoSex::mutable_sex() {
  
  // @@protoc_insertion_point(field_mutable:personal.InfoSex.sex)
  return sex_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InfoSex::release_sex() {
  // @@protoc_insertion_point(field_release:personal.InfoSex.sex)
  
  return sex_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InfoSex::set_allocated_sex(::std::string* sex) {
  if (sex != NULL) {
    
  } else {
    
  }
  sex_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sex);
  // @@protoc_insertion_point(field_set_allocated:personal.InfoSex.sex)
}

inline const InfoSex* InfoSex::internal_default_instance() {
  return &InfoSex_default_instance_.get();
}
// -------------------------------------------------------------------

// InfoBirthday

// optional string birthday = 1;
inline void InfoBirthday::clear_birthday() {
  birthday_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InfoBirthday::birthday() const {
  // @@protoc_insertion_point(field_get:personal.InfoBirthday.birthday)
  return birthday_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InfoBirthday::set_birthday(const ::std::string& value) {
  
  birthday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:personal.InfoBirthday.birthday)
}
inline void InfoBirthday::set_birthday(const char* value) {
  
  birthday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:personal.InfoBirthday.birthday)
}
inline void InfoBirthday::set_birthday(const char* value, size_t size) {
  
  birthday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:personal.InfoBirthday.birthday)
}
inline ::std::string* InfoBirthday::mutable_birthday() {
  
  // @@protoc_insertion_point(field_mutable:personal.InfoBirthday.birthday)
  return birthday_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InfoBirthday::release_birthday() {
  // @@protoc_insertion_point(field_release:personal.InfoBirthday.birthday)
  
  return birthday_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InfoBirthday::set_allocated_birthday(::std::string* birthday) {
  if (birthday != NULL) {
    
  } else {
    
  }
  birthday_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), birthday);
  // @@protoc_insertion_point(field_set_allocated:personal.InfoBirthday.birthday)
}

inline const InfoBirthday* InfoBirthday::internal_default_instance() {
  return &InfoBirthday_default_instance_.get();
}
// -------------------------------------------------------------------

// InfoUserRoles

// optional string user_roles = 1;
inline void InfoUserRoles::clear_user_roles() {
  user_roles_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InfoUserRoles::user_roles() const {
  // @@protoc_insertion_point(field_get:personal.InfoUserRoles.user_roles)
  return user_roles_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InfoUserRoles::set_user_roles(const ::std::string& value) {
  
  user_roles_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:personal.InfoUserRoles.user_roles)
}
inline void InfoUserRoles::set_user_roles(const char* value) {
  
  user_roles_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:personal.InfoUserRoles.user_roles)
}
inline void InfoUserRoles::set_user_roles(const char* value, size_t size) {
  
  user_roles_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:personal.InfoUserRoles.user_roles)
}
inline ::std::string* InfoUserRoles::mutable_user_roles() {
  
  // @@protoc_insertion_point(field_mutable:personal.InfoUserRoles.user_roles)
  return user_roles_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InfoUserRoles::release_user_roles() {
  // @@protoc_insertion_point(field_release:personal.InfoUserRoles.user_roles)
  
  return user_roles_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InfoUserRoles::set_allocated_user_roles(::std::string* user_roles) {
  if (user_roles != NULL) {
    
  } else {
    
  }
  user_roles_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_roles);
  // @@protoc_insertion_point(field_set_allocated:personal.InfoUserRoles.user_roles)
}

inline const InfoUserRoles* InfoUserRoles::internal_default_instance() {
  return &InfoUserRoles_default_instance_.get();
}
// -------------------------------------------------------------------

// InfoWorkUnit

// optional string workUnit = 1;
inline void InfoWorkUnit::clear_workunit() {
  workunit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InfoWorkUnit::workunit() const {
  // @@protoc_insertion_point(field_get:personal.InfoWorkUnit.workUnit)
  return workunit_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InfoWorkUnit::set_workunit(const ::std::string& value) {
  
  workunit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:personal.InfoWorkUnit.workUnit)
}
inline void InfoWorkUnit::set_workunit(const char* value) {
  
  workunit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:personal.InfoWorkUnit.workUnit)
}
inline void InfoWorkUnit::set_workunit(const char* value, size_t size) {
  
  workunit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:personal.InfoWorkUnit.workUnit)
}
inline ::std::string* InfoWorkUnit::mutable_workunit() {
  
  // @@protoc_insertion_point(field_mutable:personal.InfoWorkUnit.workUnit)
  return workunit_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InfoWorkUnit::release_workunit() {
  // @@protoc_insertion_point(field_release:personal.InfoWorkUnit.workUnit)
  
  return workunit_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InfoWorkUnit::set_allocated_workunit(::std::string* workunit) {
  if (workunit != NULL) {
    
  } else {
    
  }
  workunit_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), workunit);
  // @@protoc_insertion_point(field_set_allocated:personal.InfoWorkUnit.workUnit)
}

inline const InfoWorkUnit* InfoWorkUnit::internal_default_instance() {
  return &InfoWorkUnit_default_instance_.get();
}
// -------------------------------------------------------------------

// InfoEducationLevel

// optional string educationLevel = 1;
inline void InfoEducationLevel::clear_educationlevel() {
  educationlevel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InfoEducationLevel::educationlevel() const {
  // @@protoc_insertion_point(field_get:personal.InfoEducationLevel.educationLevel)
  return educationlevel_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InfoEducationLevel::set_educationlevel(const ::std::string& value) {
  
  educationlevel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:personal.InfoEducationLevel.educationLevel)
}
inline void InfoEducationLevel::set_educationlevel(const char* value) {
  
  educationlevel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:personal.InfoEducationLevel.educationLevel)
}
inline void InfoEducationLevel::set_educationlevel(const char* value, size_t size) {
  
  educationlevel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:personal.InfoEducationLevel.educationLevel)
}
inline ::std::string* InfoEducationLevel::mutable_educationlevel() {
  
  // @@protoc_insertion_point(field_mutable:personal.InfoEducationLevel.educationLevel)
  return educationlevel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InfoEducationLevel::release_educationlevel() {
  // @@protoc_insertion_point(field_release:personal.InfoEducationLevel.educationLevel)
  
  return educationlevel_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InfoEducationLevel::set_allocated_educationlevel(::std::string* educationlevel) {
  if (educationlevel != NULL) {
    
  } else {
    
  }
  educationlevel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), educationlevel);
  // @@protoc_insertion_point(field_set_allocated:personal.InfoEducationLevel.educationLevel)
}

inline const InfoEducationLevel* InfoEducationLevel::internal_default_instance() {
  return &InfoEducationLevel_default_instance_.get();
}
// -------------------------------------------------------------------

// InfoGraduatedSchool

// optional string graduated_school = 1;
inline void InfoGraduatedSchool::clear_graduated_school() {
  graduated_school_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InfoGraduatedSchool::graduated_school() const {
  // @@protoc_insertion_point(field_get:personal.InfoGraduatedSchool.graduated_school)
  return graduated_school_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InfoGraduatedSchool::set_graduated_school(const ::std::string& value) {
  
  graduated_school_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:personal.InfoGraduatedSchool.graduated_school)
}
inline void InfoGraduatedSchool::set_graduated_school(const char* value) {
  
  graduated_school_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:personal.InfoGraduatedSchool.graduated_school)
}
inline void InfoGraduatedSchool::set_graduated_school(const char* value, size_t size) {
  
  graduated_school_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:personal.InfoGraduatedSchool.graduated_school)
}
inline ::std::string* InfoGraduatedSchool::mutable_graduated_school() {
  
  // @@protoc_insertion_point(field_mutable:personal.InfoGraduatedSchool.graduated_school)
  return graduated_school_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InfoGraduatedSchool::release_graduated_school() {
  // @@protoc_insertion_point(field_release:personal.InfoGraduatedSchool.graduated_school)
  
  return graduated_school_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InfoGraduatedSchool::set_allocated_graduated_school(::std::string* graduated_school) {
  if (graduated_school != NULL) {
    
  } else {
    
  }
  graduated_school_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), graduated_school);
  // @@protoc_insertion_point(field_set_allocated:personal.InfoGraduatedSchool.graduated_school)
}

inline const InfoGraduatedSchool* InfoGraduatedSchool::internal_default_instance() {
  return &InfoGraduatedSchool_default_instance_.get();
}
// -------------------------------------------------------------------

// InfoAward

// optional string award = 1;
inline void InfoAward::clear_award() {
  award_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InfoAward::award() const {
  // @@protoc_insertion_point(field_get:personal.InfoAward.award)
  return award_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InfoAward::set_award(const ::std::string& value) {
  
  award_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:personal.InfoAward.award)
}
inline void InfoAward::set_award(const char* value) {
  
  award_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:personal.InfoAward.award)
}
inline void InfoAward::set_award(const char* value, size_t size) {
  
  award_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:personal.InfoAward.award)
}
inline ::std::string* InfoAward::mutable_award() {
  
  // @@protoc_insertion_point(field_mutable:personal.InfoAward.award)
  return award_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InfoAward::release_award() {
  // @@protoc_insertion_point(field_release:personal.InfoAward.award)
  
  return award_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InfoAward::set_allocated_award(::std::string* award) {
  if (award != NULL) {
    
  } else {
    
  }
  award_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), award);
  // @@protoc_insertion_point(field_set_allocated:personal.InfoAward.award)
}

inline const InfoAward* InfoAward::internal_default_instance() {
  return &InfoAward_default_instance_.get();
}
// -------------------------------------------------------------------

// InfoSubject

// optional string subject = 1;
inline void InfoSubject::clear_subject() {
  subject_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InfoSubject::subject() const {
  // @@protoc_insertion_point(field_get:personal.InfoSubject.subject)
  return subject_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InfoSubject::set_subject(const ::std::string& value) {
  
  subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:personal.InfoSubject.subject)
}
inline void InfoSubject::set_subject(const char* value) {
  
  subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:personal.InfoSubject.subject)
}
inline void InfoSubject::set_subject(const char* value, size_t size) {
  
  subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:personal.InfoSubject.subject)
}
inline ::std::string* InfoSubject::mutable_subject() {
  
  // @@protoc_insertion_point(field_mutable:personal.InfoSubject.subject)
  return subject_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InfoSubject::release_subject() {
  // @@protoc_insertion_point(field_release:personal.InfoSubject.subject)
  
  return subject_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InfoSubject::set_allocated_subject(::std::string* subject) {
  if (subject != NULL) {
    
  } else {
    
  }
  subject_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subject);
  // @@protoc_insertion_point(field_set_allocated:personal.InfoSubject.subject)
}

inline const InfoSubject* InfoSubject::internal_default_instance() {
  return &InfoSubject_default_instance_.get();
}
// -------------------------------------------------------------------

// InfoInterestSubject

// optional string interest_subject = 1;
inline void InfoInterestSubject::clear_interest_subject() {
  interest_subject_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InfoInterestSubject::interest_subject() const {
  // @@protoc_insertion_point(field_get:personal.InfoInterestSubject.interest_subject)
  return interest_subject_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InfoInterestSubject::set_interest_subject(const ::std::string& value) {
  
  interest_subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:personal.InfoInterestSubject.interest_subject)
}
inline void InfoInterestSubject::set_interest_subject(const char* value) {
  
  interest_subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:personal.InfoInterestSubject.interest_subject)
}
inline void InfoInterestSubject::set_interest_subject(const char* value, size_t size) {
  
  interest_subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:personal.InfoInterestSubject.interest_subject)
}
inline ::std::string* InfoInterestSubject::mutable_interest_subject() {
  
  // @@protoc_insertion_point(field_mutable:personal.InfoInterestSubject.interest_subject)
  return interest_subject_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InfoInterestSubject::release_interest_subject() {
  // @@protoc_insertion_point(field_release:personal.InfoInterestSubject.interest_subject)
  
  return interest_subject_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InfoInterestSubject::set_allocated_interest_subject(::std::string* interest_subject) {
  if (interest_subject != NULL) {
    
  } else {
    
  }
  interest_subject_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), interest_subject);
  // @@protoc_insertion_point(field_set_allocated:personal.InfoInterestSubject.interest_subject)
}

inline const InfoInterestSubject* InfoInterestSubject::internal_default_instance() {
  return &InfoInterestSubject_default_instance_.get();
}
// -------------------------------------------------------------------

// InfoEmail

// optional string email = 1;
inline void InfoEmail::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InfoEmail::email() const {
  // @@protoc_insertion_point(field_get:personal.InfoEmail.email)
  return email_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InfoEmail::set_email(const ::std::string& value) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:personal.InfoEmail.email)
}
inline void InfoEmail::set_email(const char* value) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:personal.InfoEmail.email)
}
inline void InfoEmail::set_email(const char* value, size_t size) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:personal.InfoEmail.email)
}
inline ::std::string* InfoEmail::mutable_email() {
  
  // @@protoc_insertion_point(field_mutable:personal.InfoEmail.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InfoEmail::release_email() {
  // @@protoc_insertion_point(field_release:personal.InfoEmail.email)
  
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InfoEmail::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    
  } else {
    
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:personal.InfoEmail.email)
}

inline const InfoEmail* InfoEmail::internal_default_instance() {
  return &InfoEmail_default_instance_.get();
}
// -------------------------------------------------------------------

// InfoAvatar

// optional string avatar_url = 1;
inline void InfoAvatar::clear_avatar_url() {
  avatar_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InfoAvatar::avatar_url() const {
  // @@protoc_insertion_point(field_get:personal.InfoAvatar.avatar_url)
  return avatar_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InfoAvatar::set_avatar_url(const ::std::string& value) {
  
  avatar_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:personal.InfoAvatar.avatar_url)
}
inline void InfoAvatar::set_avatar_url(const char* value) {
  
  avatar_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:personal.InfoAvatar.avatar_url)
}
inline void InfoAvatar::set_avatar_url(const char* value, size_t size) {
  
  avatar_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:personal.InfoAvatar.avatar_url)
}
inline ::std::string* InfoAvatar::mutable_avatar_url() {
  
  // @@protoc_insertion_point(field_mutable:personal.InfoAvatar.avatar_url)
  return avatar_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InfoAvatar::release_avatar_url() {
  // @@protoc_insertion_point(field_release:personal.InfoAvatar.avatar_url)
  
  return avatar_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InfoAvatar::set_allocated_avatar_url(::std::string* avatar_url) {
  if (avatar_url != NULL) {
    
  } else {
    
  }
  avatar_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), avatar_url);
  // @@protoc_insertion_point(field_set_allocated:personal.InfoAvatar.avatar_url)
}

inline const InfoAvatar* InfoAvatar::internal_default_instance() {
  return &InfoAvatar_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace personal

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_personalCenter_2fmsg_5fpersonInfo_2eproto__INCLUDED
