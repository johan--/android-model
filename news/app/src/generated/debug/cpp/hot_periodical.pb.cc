// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hot_periodical.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "hot_periodical.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace main {

namespace {

const ::google::protobuf::Descriptor* PeriodicalRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PeriodicalRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PeriodicalReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PeriodicalReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* Periodical_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Periodical_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_hot_5fperiodical_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_hot_5fperiodical_2eproto() {
  protobuf_AddDesc_hot_5fperiodical_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "hot_periodical.proto");
  GOOGLE_CHECK(file != NULL);
  PeriodicalRequest_descriptor_ = file->message_type(0);
  static const int PeriodicalRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeriodicalRequest, page_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeriodicalRequest, page_size_),
  };
  PeriodicalRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PeriodicalRequest_descriptor_,
      PeriodicalRequest::internal_default_instance(),
      PeriodicalRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(PeriodicalRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeriodicalRequest, _internal_metadata_));
  PeriodicalReply_descriptor_ = file->message_type(1);
  static const int PeriodicalReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeriodicalReply, periodical_),
  };
  PeriodicalReply_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PeriodicalReply_descriptor_,
      PeriodicalReply::internal_default_instance(),
      PeriodicalReply_offsets_,
      -1,
      -1,
      -1,
      sizeof(PeriodicalReply),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeriodicalReply, _internal_metadata_));
  Periodical_descriptor_ = file->message_type(2);
  static const int Periodical_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Periodical, periodical_cover_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Periodical, periodical_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Periodical, periodical_title_),
  };
  Periodical_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Periodical_descriptor_,
      Periodical::internal_default_instance(),
      Periodical_offsets_,
      -1,
      -1,
      -1,
      sizeof(Periodical),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Periodical, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_hot_5fperiodical_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PeriodicalRequest_descriptor_, PeriodicalRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PeriodicalReply_descriptor_, PeriodicalReply::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Periodical_descriptor_, Periodical::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_hot_5fperiodical_2eproto() {
  PeriodicalRequest_default_instance_.Shutdown();
  delete PeriodicalRequest_reflection_;
  PeriodicalReply_default_instance_.Shutdown();
  delete PeriodicalReply_reflection_;
  Periodical_default_instance_.Shutdown();
  delete Periodical_reflection_;
}

void protobuf_InitDefaults_hot_5fperiodical_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  PeriodicalRequest_default_instance_.DefaultConstruct();
  PeriodicalReply_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Periodical_default_instance_.DefaultConstruct();
  PeriodicalRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  PeriodicalReply_default_instance_.get_mutable()->InitAsDefaultInstance();
  Periodical_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_hot_5fperiodical_2eproto_once_);
void protobuf_InitDefaults_hot_5fperiodical_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_hot_5fperiodical_2eproto_once_,
                 &protobuf_InitDefaults_hot_5fperiodical_2eproto_impl);
}
void protobuf_AddDesc_hot_5fperiodical_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_hot_5fperiodical_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024hot_periodical.proto\022\004main\";\n\021Periodic"
    "alRequest\022\023\n\013page_number\030\001 \001(\t\022\021\n\tpage_s"
    "ize\030\002 \001(\t\"7\n\017PeriodicalReply\022$\n\nperiodic"
    "al\030\001 \003(\0132\020.main.Periodical\"W\n\nPeriodical"
    "\022\030\n\020periodical_cover\030\001 \001(\t\022\025\n\rperiodical"
    "_id\030\002 \001(\t\022\030\n\020periodical_title\030\003 \001(\tB\022\n\020c"
    "om.wanfang.mainb\006proto3", 263);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "hot_periodical.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_hot_5fperiodical_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_hot_5fperiodical_2eproto_once_);
void protobuf_AddDesc_hot_5fperiodical_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_hot_5fperiodical_2eproto_once_,
                 &protobuf_AddDesc_hot_5fperiodical_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_hot_5fperiodical_2eproto {
  StaticDescriptorInitializer_hot_5fperiodical_2eproto() {
    protobuf_AddDesc_hot_5fperiodical_2eproto();
  }
} static_descriptor_initializer_hot_5fperiodical_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PeriodicalRequest::kPageNumberFieldNumber;
const int PeriodicalRequest::kPageSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PeriodicalRequest::PeriodicalRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_hot_5fperiodical_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.PeriodicalRequest)
}

void PeriodicalRequest::InitAsDefaultInstance() {
}

PeriodicalRequest::PeriodicalRequest(const PeriodicalRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.PeriodicalRequest)
}

void PeriodicalRequest::SharedCtor() {
  page_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_size_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

PeriodicalRequest::~PeriodicalRequest() {
  // @@protoc_insertion_point(destructor:main.PeriodicalRequest)
  SharedDtor();
}

void PeriodicalRequest::SharedDtor() {
  page_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_size_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PeriodicalRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PeriodicalRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PeriodicalRequest_descriptor_;
}

const PeriodicalRequest& PeriodicalRequest::default_instance() {
  protobuf_InitDefaults_hot_5fperiodical_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<PeriodicalRequest> PeriodicalRequest_default_instance_;

PeriodicalRequest* PeriodicalRequest::New(::google::protobuf::Arena* arena) const {
  PeriodicalRequest* n = new PeriodicalRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PeriodicalRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:main.PeriodicalRequest)
  page_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_size_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PeriodicalRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:main.PeriodicalRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string page_number = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_number()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->page_number().data(), this->page_number().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "main.PeriodicalRequest.page_number"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_page_size;
        break;
      }

      // optional string page_size = 2;
      case 2: {
        if (tag == 18) {
         parse_page_size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_size()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->page_size().data(), this->page_size().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "main.PeriodicalRequest.page_size"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.PeriodicalRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.PeriodicalRequest)
  return false;
#undef DO_
}

void PeriodicalRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.PeriodicalRequest)
  // optional string page_number = 1;
  if (this->page_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_number().data(), this->page_number().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "main.PeriodicalRequest.page_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->page_number(), output);
  }

  // optional string page_size = 2;
  if (this->page_size().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_size().data(), this->page_size().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "main.PeriodicalRequest.page_size");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->page_size(), output);
  }

  // @@protoc_insertion_point(serialize_end:main.PeriodicalRequest)
}

::google::protobuf::uint8* PeriodicalRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:main.PeriodicalRequest)
  // optional string page_number = 1;
  if (this->page_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_number().data(), this->page_number().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "main.PeriodicalRequest.page_number");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->page_number(), target);
  }

  // optional string page_size = 2;
  if (this->page_size().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_size().data(), this->page_size().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "main.PeriodicalRequest.page_size");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->page_size(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:main.PeriodicalRequest)
  return target;
}

size_t PeriodicalRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:main.PeriodicalRequest)
  size_t total_size = 0;

  // optional string page_number = 1;
  if (this->page_number().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->page_number());
  }

  // optional string page_size = 2;
  if (this->page_size().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->page_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PeriodicalRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:main.PeriodicalRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PeriodicalRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PeriodicalRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:main.PeriodicalRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:main.PeriodicalRequest)
    UnsafeMergeFrom(*source);
  }
}

void PeriodicalRequest::MergeFrom(const PeriodicalRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:main.PeriodicalRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void PeriodicalRequest::UnsafeMergeFrom(const PeriodicalRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.page_number().size() > 0) {

    page_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_number_);
  }
  if (from.page_size().size() > 0) {

    page_size_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_size_);
  }
}

void PeriodicalRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:main.PeriodicalRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeriodicalRequest::CopyFrom(const PeriodicalRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:main.PeriodicalRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool PeriodicalRequest::IsInitialized() const {

  return true;
}

void PeriodicalRequest::Swap(PeriodicalRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PeriodicalRequest::InternalSwap(PeriodicalRequest* other) {
  page_number_.Swap(&other->page_number_);
  page_size_.Swap(&other->page_size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PeriodicalRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PeriodicalRequest_descriptor_;
  metadata.reflection = PeriodicalRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PeriodicalRequest

// optional string page_number = 1;
void PeriodicalRequest::clear_page_number() {
  page_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PeriodicalRequest::page_number() const {
  // @@protoc_insertion_point(field_get:main.PeriodicalRequest.page_number)
  return page_number_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PeriodicalRequest::set_page_number(const ::std::string& value) {
  
  page_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:main.PeriodicalRequest.page_number)
}
void PeriodicalRequest::set_page_number(const char* value) {
  
  page_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:main.PeriodicalRequest.page_number)
}
void PeriodicalRequest::set_page_number(const char* value, size_t size) {
  
  page_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:main.PeriodicalRequest.page_number)
}
::std::string* PeriodicalRequest::mutable_page_number() {
  
  // @@protoc_insertion_point(field_mutable:main.PeriodicalRequest.page_number)
  return page_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PeriodicalRequest::release_page_number() {
  // @@protoc_insertion_point(field_release:main.PeriodicalRequest.page_number)
  
  return page_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PeriodicalRequest::set_allocated_page_number(::std::string* page_number) {
  if (page_number != NULL) {
    
  } else {
    
  }
  page_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_number);
  // @@protoc_insertion_point(field_set_allocated:main.PeriodicalRequest.page_number)
}

// optional string page_size = 2;
void PeriodicalRequest::clear_page_size() {
  page_size_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PeriodicalRequest::page_size() const {
  // @@protoc_insertion_point(field_get:main.PeriodicalRequest.page_size)
  return page_size_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PeriodicalRequest::set_page_size(const ::std::string& value) {
  
  page_size_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:main.PeriodicalRequest.page_size)
}
void PeriodicalRequest::set_page_size(const char* value) {
  
  page_size_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:main.PeriodicalRequest.page_size)
}
void PeriodicalRequest::set_page_size(const char* value, size_t size) {
  
  page_size_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:main.PeriodicalRequest.page_size)
}
::std::string* PeriodicalRequest::mutable_page_size() {
  
  // @@protoc_insertion_point(field_mutable:main.PeriodicalRequest.page_size)
  return page_size_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PeriodicalRequest::release_page_size() {
  // @@protoc_insertion_point(field_release:main.PeriodicalRequest.page_size)
  
  return page_size_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PeriodicalRequest::set_allocated_page_size(::std::string* page_size) {
  if (page_size != NULL) {
    
  } else {
    
  }
  page_size_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_size);
  // @@protoc_insertion_point(field_set_allocated:main.PeriodicalRequest.page_size)
}

inline const PeriodicalRequest* PeriodicalRequest::internal_default_instance() {
  return &PeriodicalRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PeriodicalReply::kPeriodicalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PeriodicalReply::PeriodicalReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_hot_5fperiodical_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.PeriodicalReply)
}

void PeriodicalReply::InitAsDefaultInstance() {
}

PeriodicalReply::PeriodicalReply(const PeriodicalReply& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.PeriodicalReply)
}

void PeriodicalReply::SharedCtor() {
  _cached_size_ = 0;
}

PeriodicalReply::~PeriodicalReply() {
  // @@protoc_insertion_point(destructor:main.PeriodicalReply)
  SharedDtor();
}

void PeriodicalReply::SharedDtor() {
}

void PeriodicalReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PeriodicalReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PeriodicalReply_descriptor_;
}

const PeriodicalReply& PeriodicalReply::default_instance() {
  protobuf_InitDefaults_hot_5fperiodical_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<PeriodicalReply> PeriodicalReply_default_instance_;

PeriodicalReply* PeriodicalReply::New(::google::protobuf::Arena* arena) const {
  PeriodicalReply* n = new PeriodicalReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PeriodicalReply::Clear() {
// @@protoc_insertion_point(message_clear_start:main.PeriodicalReply)
  periodical_.Clear();
}

bool PeriodicalReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:main.PeriodicalReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .main.Periodical periodical = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_periodical:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_periodical()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_periodical;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.PeriodicalReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.PeriodicalReply)
  return false;
#undef DO_
}

void PeriodicalReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.PeriodicalReply)
  // repeated .main.Periodical periodical = 1;
  for (unsigned int i = 0, n = this->periodical_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->periodical(i), output);
  }

  // @@protoc_insertion_point(serialize_end:main.PeriodicalReply)
}

::google::protobuf::uint8* PeriodicalReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:main.PeriodicalReply)
  // repeated .main.Periodical periodical = 1;
  for (unsigned int i = 0, n = this->periodical_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->periodical(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:main.PeriodicalReply)
  return target;
}

size_t PeriodicalReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:main.PeriodicalReply)
  size_t total_size = 0;

  // repeated .main.Periodical periodical = 1;
  {
    unsigned int count = this->periodical_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->periodical(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PeriodicalReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:main.PeriodicalReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PeriodicalReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PeriodicalReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:main.PeriodicalReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:main.PeriodicalReply)
    UnsafeMergeFrom(*source);
  }
}

void PeriodicalReply::MergeFrom(const PeriodicalReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:main.PeriodicalReply)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void PeriodicalReply::UnsafeMergeFrom(const PeriodicalReply& from) {
  GOOGLE_DCHECK(&from != this);
  periodical_.MergeFrom(from.periodical_);
}

void PeriodicalReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:main.PeriodicalReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeriodicalReply::CopyFrom(const PeriodicalReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:main.PeriodicalReply)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool PeriodicalReply::IsInitialized() const {

  return true;
}

void PeriodicalReply::Swap(PeriodicalReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PeriodicalReply::InternalSwap(PeriodicalReply* other) {
  periodical_.UnsafeArenaSwap(&other->periodical_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PeriodicalReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PeriodicalReply_descriptor_;
  metadata.reflection = PeriodicalReply_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PeriodicalReply

// repeated .main.Periodical periodical = 1;
int PeriodicalReply::periodical_size() const {
  return periodical_.size();
}
void PeriodicalReply::clear_periodical() {
  periodical_.Clear();
}
const ::main::Periodical& PeriodicalReply::periodical(int index) const {
  // @@protoc_insertion_point(field_get:main.PeriodicalReply.periodical)
  return periodical_.Get(index);
}
::main::Periodical* PeriodicalReply::mutable_periodical(int index) {
  // @@protoc_insertion_point(field_mutable:main.PeriodicalReply.periodical)
  return periodical_.Mutable(index);
}
::main::Periodical* PeriodicalReply::add_periodical() {
  // @@protoc_insertion_point(field_add:main.PeriodicalReply.periodical)
  return periodical_.Add();
}
::google::protobuf::RepeatedPtrField< ::main::Periodical >*
PeriodicalReply::mutable_periodical() {
  // @@protoc_insertion_point(field_mutable_list:main.PeriodicalReply.periodical)
  return &periodical_;
}
const ::google::protobuf::RepeatedPtrField< ::main::Periodical >&
PeriodicalReply::periodical() const {
  // @@protoc_insertion_point(field_list:main.PeriodicalReply.periodical)
  return periodical_;
}

inline const PeriodicalReply* PeriodicalReply::internal_default_instance() {
  return &PeriodicalReply_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Periodical::kPeriodicalCoverFieldNumber;
const int Periodical::kPeriodicalIdFieldNumber;
const int Periodical::kPeriodicalTitleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Periodical::Periodical()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_hot_5fperiodical_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.Periodical)
}

void Periodical::InitAsDefaultInstance() {
}

Periodical::Periodical(const Periodical& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.Periodical)
}

void Periodical::SharedCtor() {
  periodical_cover_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  periodical_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  periodical_title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

Periodical::~Periodical() {
  // @@protoc_insertion_point(destructor:main.Periodical)
  SharedDtor();
}

void Periodical::SharedDtor() {
  periodical_cover_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  periodical_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  periodical_title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Periodical::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Periodical::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Periodical_descriptor_;
}

const Periodical& Periodical::default_instance() {
  protobuf_InitDefaults_hot_5fperiodical_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Periodical> Periodical_default_instance_;

Periodical* Periodical::New(::google::protobuf::Arena* arena) const {
  Periodical* n = new Periodical;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Periodical::Clear() {
// @@protoc_insertion_point(message_clear_start:main.Periodical)
  periodical_cover_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  periodical_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  periodical_title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Periodical::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:main.Periodical)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string periodical_cover = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_periodical_cover()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->periodical_cover().data(), this->periodical_cover().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "main.Periodical.periodical_cover"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_periodical_id;
        break;
      }

      // optional string periodical_id = 2;
      case 2: {
        if (tag == 18) {
         parse_periodical_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_periodical_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->periodical_id().data(), this->periodical_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "main.Periodical.periodical_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_periodical_title;
        break;
      }

      // optional string periodical_title = 3;
      case 3: {
        if (tag == 26) {
         parse_periodical_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_periodical_title()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->periodical_title().data(), this->periodical_title().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "main.Periodical.periodical_title"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.Periodical)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.Periodical)
  return false;
#undef DO_
}

void Periodical::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.Periodical)
  // optional string periodical_cover = 1;
  if (this->periodical_cover().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->periodical_cover().data(), this->periodical_cover().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "main.Periodical.periodical_cover");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->periodical_cover(), output);
  }

  // optional string periodical_id = 2;
  if (this->periodical_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->periodical_id().data(), this->periodical_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "main.Periodical.periodical_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->periodical_id(), output);
  }

  // optional string periodical_title = 3;
  if (this->periodical_title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->periodical_title().data(), this->periodical_title().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "main.Periodical.periodical_title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->periodical_title(), output);
  }

  // @@protoc_insertion_point(serialize_end:main.Periodical)
}

::google::protobuf::uint8* Periodical::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:main.Periodical)
  // optional string periodical_cover = 1;
  if (this->periodical_cover().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->periodical_cover().data(), this->periodical_cover().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "main.Periodical.periodical_cover");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->periodical_cover(), target);
  }

  // optional string periodical_id = 2;
  if (this->periodical_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->periodical_id().data(), this->periodical_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "main.Periodical.periodical_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->periodical_id(), target);
  }

  // optional string periodical_title = 3;
  if (this->periodical_title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->periodical_title().data(), this->periodical_title().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "main.Periodical.periodical_title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->periodical_title(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:main.Periodical)
  return target;
}

size_t Periodical::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:main.Periodical)
  size_t total_size = 0;

  // optional string periodical_cover = 1;
  if (this->periodical_cover().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->periodical_cover());
  }

  // optional string periodical_id = 2;
  if (this->periodical_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->periodical_id());
  }

  // optional string periodical_title = 3;
  if (this->periodical_title().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->periodical_title());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Periodical::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:main.Periodical)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Periodical* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Periodical>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:main.Periodical)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:main.Periodical)
    UnsafeMergeFrom(*source);
  }
}

void Periodical::MergeFrom(const Periodical& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:main.Periodical)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Periodical::UnsafeMergeFrom(const Periodical& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.periodical_cover().size() > 0) {

    periodical_cover_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.periodical_cover_);
  }
  if (from.periodical_id().size() > 0) {

    periodical_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.periodical_id_);
  }
  if (from.periodical_title().size() > 0) {

    periodical_title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.periodical_title_);
  }
}

void Periodical::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:main.Periodical)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Periodical::CopyFrom(const Periodical& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:main.Periodical)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Periodical::IsInitialized() const {

  return true;
}

void Periodical::Swap(Periodical* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Periodical::InternalSwap(Periodical* other) {
  periodical_cover_.Swap(&other->periodical_cover_);
  periodical_id_.Swap(&other->periodical_id_);
  periodical_title_.Swap(&other->periodical_title_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Periodical::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Periodical_descriptor_;
  metadata.reflection = Periodical_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Periodical

// optional string periodical_cover = 1;
void Periodical::clear_periodical_cover() {
  periodical_cover_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Periodical::periodical_cover() const {
  // @@protoc_insertion_point(field_get:main.Periodical.periodical_cover)
  return periodical_cover_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Periodical::set_periodical_cover(const ::std::string& value) {
  
  periodical_cover_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:main.Periodical.periodical_cover)
}
void Periodical::set_periodical_cover(const char* value) {
  
  periodical_cover_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:main.Periodical.periodical_cover)
}
void Periodical::set_periodical_cover(const char* value, size_t size) {
  
  periodical_cover_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:main.Periodical.periodical_cover)
}
::std::string* Periodical::mutable_periodical_cover() {
  
  // @@protoc_insertion_point(field_mutable:main.Periodical.periodical_cover)
  return periodical_cover_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Periodical::release_periodical_cover() {
  // @@protoc_insertion_point(field_release:main.Periodical.periodical_cover)
  
  return periodical_cover_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Periodical::set_allocated_periodical_cover(::std::string* periodical_cover) {
  if (periodical_cover != NULL) {
    
  } else {
    
  }
  periodical_cover_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), periodical_cover);
  // @@protoc_insertion_point(field_set_allocated:main.Periodical.periodical_cover)
}

// optional string periodical_id = 2;
void Periodical::clear_periodical_id() {
  periodical_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Periodical::periodical_id() const {
  // @@protoc_insertion_point(field_get:main.Periodical.periodical_id)
  return periodical_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Periodical::set_periodical_id(const ::std::string& value) {
  
  periodical_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:main.Periodical.periodical_id)
}
void Periodical::set_periodical_id(const char* value) {
  
  periodical_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:main.Periodical.periodical_id)
}
void Periodical::set_periodical_id(const char* value, size_t size) {
  
  periodical_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:main.Periodical.periodical_id)
}
::std::string* Periodical::mutable_periodical_id() {
  
  // @@protoc_insertion_point(field_mutable:main.Periodical.periodical_id)
  return periodical_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Periodical::release_periodical_id() {
  // @@protoc_insertion_point(field_release:main.Periodical.periodical_id)
  
  return periodical_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Periodical::set_allocated_periodical_id(::std::string* periodical_id) {
  if (periodical_id != NULL) {
    
  } else {
    
  }
  periodical_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), periodical_id);
  // @@protoc_insertion_point(field_set_allocated:main.Periodical.periodical_id)
}

// optional string periodical_title = 3;
void Periodical::clear_periodical_title() {
  periodical_title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Periodical::periodical_title() const {
  // @@protoc_insertion_point(field_get:main.Periodical.periodical_title)
  return periodical_title_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Periodical::set_periodical_title(const ::std::string& value) {
  
  periodical_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:main.Periodical.periodical_title)
}
void Periodical::set_periodical_title(const char* value) {
  
  periodical_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:main.Periodical.periodical_title)
}
void Periodical::set_periodical_title(const char* value, size_t size) {
  
  periodical_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:main.Periodical.periodical_title)
}
::std::string* Periodical::mutable_periodical_title() {
  
  // @@protoc_insertion_point(field_mutable:main.Periodical.periodical_title)
  return periodical_title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Periodical::release_periodical_title() {
  // @@protoc_insertion_point(field_release:main.Periodical.periodical_title)
  
  return periodical_title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Periodical::set_allocated_periodical_title(::std::string* periodical_title) {
  if (periodical_title != NULL) {
    
  } else {
    
  }
  periodical_title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), periodical_title);
  // @@protoc_insertion_point(field_set_allocated:main.Periodical.periodical_title)
}

inline const Periodical* Periodical::internal_default_instance() {
  return &Periodical_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace main

// @@protoc_insertion_point(global_scope)
