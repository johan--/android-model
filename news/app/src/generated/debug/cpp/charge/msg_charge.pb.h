// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: charge/msg_charge.proto

#ifndef PROTOBUF_charge_2fmsg_5fcharge_2eproto__INCLUDED
#define PROTOBUF_charge_2fmsg_5fcharge_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "grpcCommon/msg_error.pb.h"
// @@protoc_insertion_point(includes)

namespace charge {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_charge_2fmsg_5fcharge_2eproto();
void protobuf_InitDefaults_charge_2fmsg_5fcharge_2eproto();
void protobuf_AssignDesc_charge_2fmsg_5fcharge_2eproto();
void protobuf_ShutdownFile_charge_2fmsg_5fcharge_2eproto();

class ChargeRequest;
class ChargeResponse;
class TransferIn;

// ===================================================================

class ChargeRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:charge.ChargeRequest) */ {
 public:
  ChargeRequest();
  virtual ~ChargeRequest();

  ChargeRequest(const ChargeRequest& from);

  inline ChargeRequest& operator=(const ChargeRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChargeRequest& default_instance();

  static const ChargeRequest* internal_default_instance();

  void Swap(ChargeRequest* other);

  // implements Message ----------------------------------------------

  inline ChargeRequest* New() const { return New(NULL); }

  ChargeRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChargeRequest& from);
  void MergeFrom(const ChargeRequest& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChargeRequest* other);
  void UnsafeMergeFrom(const ChargeRequest& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // optional string login_token = 2;
  void clear_login_token();
  static const int kLoginTokenFieldNumber = 2;
  const ::std::string& login_token() const;
  void set_login_token(const ::std::string& value);
  void set_login_token(const char* value);
  void set_login_token(const char* value, size_t size);
  ::std::string* mutable_login_token();
  ::std::string* release_login_token();
  void set_allocated_login_token(::std::string* login_token);

  // optional .charge.TransferIn transfer_in = 3;
  bool has_transfer_in() const;
  void clear_transfer_in();
  static const int kTransferInFieldNumber = 3;
  const ::charge::TransferIn& transfer_in() const;
  ::charge::TransferIn* mutable_transfer_in();
  ::charge::TransferIn* release_transfer_in();
  void set_allocated_transfer_in(::charge::TransferIn* transfer_in);

  // optional string pay_type = 4;
  void clear_pay_type();
  static const int kPayTypeFieldNumber = 4;
  const ::std::string& pay_type() const;
  void set_pay_type(const ::std::string& value);
  void set_pay_type(const char* value);
  void set_pay_type(const char* value, size_t size);
  ::std::string* mutable_pay_type();
  ::std::string* release_pay_type();
  void set_allocated_pay_type(::std::string* pay_type);

  // optional string turnover = 5;
  void clear_turnover();
  static const int kTurnoverFieldNumber = 5;
  const ::std::string& turnover() const;
  void set_turnover(const ::std::string& value);
  void set_turnover(const char* value);
  void set_turnover(const char* value, size_t size);
  ::std::string* mutable_turnover();
  ::std::string* release_turnover();
  void set_allocated_turnover(::std::string* turnover);

  // optional string product_detail = 6;
  void clear_product_detail();
  static const int kProductDetailFieldNumber = 6;
  const ::std::string& product_detail() const;
  void set_product_detail(const ::std::string& value);
  void set_product_detail(const char* value);
  void set_product_detail(const char* value, size_t size);
  ::std::string* mutable_product_detail();
  ::std::string* release_product_detail();
  void set_allocated_product_detail(::std::string* product_detail);

  // optional string product_title = 7;
  void clear_product_title();
  static const int kProductTitleFieldNumber = 7;
  const ::std::string& product_title() const;
  void set_product_title(const ::std::string& value);
  void set_product_title(const char* value);
  void set_product_title(const char* value, size_t size);
  ::std::string* mutable_product_title();
  ::std::string* release_product_title();
  void set_allocated_product_title(::std::string* product_title);

  // @@protoc_insertion_point(class_scope:charge.ChargeRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr login_token_;
  ::google::protobuf::internal::ArenaStringPtr pay_type_;
  ::google::protobuf::internal::ArenaStringPtr turnover_;
  ::google::protobuf::internal::ArenaStringPtr product_detail_;
  ::google::protobuf::internal::ArenaStringPtr product_title_;
  ::charge::TransferIn* transfer_in_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_charge_2fmsg_5fcharge_2eproto_impl();
  friend void  protobuf_AddDesc_charge_2fmsg_5fcharge_2eproto_impl();
  friend void protobuf_AssignDesc_charge_2fmsg_5fcharge_2eproto();
  friend void protobuf_ShutdownFile_charge_2fmsg_5fcharge_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ChargeRequest> ChargeRequest_default_instance_;

// -------------------------------------------------------------------

class TransferIn : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:charge.TransferIn) */ {
 public:
  TransferIn();
  virtual ~TransferIn();

  TransferIn(const TransferIn& from);

  inline TransferIn& operator=(const TransferIn& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TransferIn& default_instance();

  static const TransferIn* internal_default_instance();

  void Swap(TransferIn* other);

  // implements Message ----------------------------------------------

  inline TransferIn* New() const { return New(NULL); }

  TransferIn* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TransferIn& from);
  void MergeFrom(const TransferIn& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TransferIn* other);
  void UnsafeMergeFrom(const TransferIn& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // optional string Key = 2;
  void clear_key();
  static const int kKeyFieldNumber = 2;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // @@protoc_insertion_point(class_scope:charge.TransferIn)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_charge_2fmsg_5fcharge_2eproto_impl();
  friend void  protobuf_AddDesc_charge_2fmsg_5fcharge_2eproto_impl();
  friend void protobuf_AssignDesc_charge_2fmsg_5fcharge_2eproto();
  friend void protobuf_ShutdownFile_charge_2fmsg_5fcharge_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TransferIn> TransferIn_default_instance_;

// -------------------------------------------------------------------

class ChargeResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:charge.ChargeResponse) */ {
 public:
  ChargeResponse();
  virtual ~ChargeResponse();

  ChargeResponse(const ChargeResponse& from);

  inline ChargeResponse& operator=(const ChargeResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChargeResponse& default_instance();

  static const ChargeResponse* internal_default_instance();

  void Swap(ChargeResponse* other);

  // implements Message ----------------------------------------------

  inline ChargeResponse* New() const { return New(NULL); }

  ChargeResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChargeResponse& from);
  void MergeFrom(const ChargeResponse& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChargeResponse* other);
  void UnsafeMergeFrom(const ChargeResponse& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string app_id = 1;
  void clear_app_id();
  static const int kAppIdFieldNumber = 1;
  const ::std::string& app_id() const;
  void set_app_id(const ::std::string& value);
  void set_app_id(const char* value);
  void set_app_id(const char* value, size_t size);
  ::std::string* mutable_app_id();
  ::std::string* release_app_id();
  void set_allocated_app_id(::std::string* app_id);

  // optional string partner_id = 2;
  void clear_partner_id();
  static const int kPartnerIdFieldNumber = 2;
  const ::std::string& partner_id() const;
  void set_partner_id(const ::std::string& value);
  void set_partner_id(const char* value);
  void set_partner_id(const char* value, size_t size);
  ::std::string* mutable_partner_id();
  ::std::string* release_partner_id();
  void set_allocated_partner_id(::std::string* partner_id);

  // optional string prepay_id = 3;
  void clear_prepay_id();
  static const int kPrepayIdFieldNumber = 3;
  const ::std::string& prepay_id() const;
  void set_prepay_id(const ::std::string& value);
  void set_prepay_id(const char* value);
  void set_prepay_id(const char* value, size_t size);
  ::std::string* mutable_prepay_id();
  ::std::string* release_prepay_id();
  void set_allocated_prepay_id(::std::string* prepay_id);

  // optional string package = 4;
  void clear_package();
  static const int kPackageFieldNumber = 4;
  const ::std::string& package() const;
  void set_package(const ::std::string& value);
  void set_package(const char* value);
  void set_package(const char* value, size_t size);
  ::std::string* mutable_package();
  ::std::string* release_package();
  void set_allocated_package(::std::string* package);

  // optional string noncestr = 5;
  void clear_noncestr();
  static const int kNoncestrFieldNumber = 5;
  const ::std::string& noncestr() const;
  void set_noncestr(const ::std::string& value);
  void set_noncestr(const char* value);
  void set_noncestr(const char* value, size_t size);
  ::std::string* mutable_noncestr();
  ::std::string* release_noncestr();
  void set_allocated_noncestr(::std::string* noncestr);

  // optional string time_stamp = 6;
  void clear_time_stamp();
  static const int kTimeStampFieldNumber = 6;
  const ::std::string& time_stamp() const;
  void set_time_stamp(const ::std::string& value);
  void set_time_stamp(const char* value);
  void set_time_stamp(const char* value, size_t size);
  ::std::string* mutable_time_stamp();
  ::std::string* release_time_stamp();
  void set_allocated_time_stamp(::std::string* time_stamp);

  // optional string sign = 7;
  void clear_sign();
  static const int kSignFieldNumber = 7;
  const ::std::string& sign() const;
  void set_sign(const ::std::string& value);
  void set_sign(const char* value);
  void set_sign(const char* value, size_t size);
  ::std::string* mutable_sign();
  ::std::string* release_sign();
  void set_allocated_sign(::std::string* sign);

  // optional .grpcCommon.GrpcError error = 8;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 8;
  const ::grpcCommon::GrpcError& error() const;
  ::grpcCommon::GrpcError* mutable_error();
  ::grpcCommon::GrpcError* release_error();
  void set_allocated_error(::grpcCommon::GrpcError* error);

  // @@protoc_insertion_point(class_scope:charge.ChargeResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr app_id_;
  ::google::protobuf::internal::ArenaStringPtr partner_id_;
  ::google::protobuf::internal::ArenaStringPtr prepay_id_;
  ::google::protobuf::internal::ArenaStringPtr package_;
  ::google::protobuf::internal::ArenaStringPtr noncestr_;
  ::google::protobuf::internal::ArenaStringPtr time_stamp_;
  ::google::protobuf::internal::ArenaStringPtr sign_;
  ::grpcCommon::GrpcError* error_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_charge_2fmsg_5fcharge_2eproto_impl();
  friend void  protobuf_AddDesc_charge_2fmsg_5fcharge_2eproto_impl();
  friend void protobuf_AssignDesc_charge_2fmsg_5fcharge_2eproto();
  friend void protobuf_ShutdownFile_charge_2fmsg_5fcharge_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ChargeResponse> ChargeResponse_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ChargeRequest

// optional string user_id = 1;
inline void ChargeRequest::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChargeRequest::user_id() const {
  // @@protoc_insertion_point(field_get:charge.ChargeRequest.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChargeRequest::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:charge.ChargeRequest.user_id)
}
inline void ChargeRequest::set_user_id(const char* value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:charge.ChargeRequest.user_id)
}
inline void ChargeRequest::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:charge.ChargeRequest.user_id)
}
inline ::std::string* ChargeRequest::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:charge.ChargeRequest.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChargeRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:charge.ChargeRequest.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChargeRequest::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:charge.ChargeRequest.user_id)
}

// optional string login_token = 2;
inline void ChargeRequest::clear_login_token() {
  login_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChargeRequest::login_token() const {
  // @@protoc_insertion_point(field_get:charge.ChargeRequest.login_token)
  return login_token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChargeRequest::set_login_token(const ::std::string& value) {
  
  login_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:charge.ChargeRequest.login_token)
}
inline void ChargeRequest::set_login_token(const char* value) {
  
  login_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:charge.ChargeRequest.login_token)
}
inline void ChargeRequest::set_login_token(const char* value, size_t size) {
  
  login_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:charge.ChargeRequest.login_token)
}
inline ::std::string* ChargeRequest::mutable_login_token() {
  
  // @@protoc_insertion_point(field_mutable:charge.ChargeRequest.login_token)
  return login_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChargeRequest::release_login_token() {
  // @@protoc_insertion_point(field_release:charge.ChargeRequest.login_token)
  
  return login_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChargeRequest::set_allocated_login_token(::std::string* login_token) {
  if (login_token != NULL) {
    
  } else {
    
  }
  login_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), login_token);
  // @@protoc_insertion_point(field_set_allocated:charge.ChargeRequest.login_token)
}

// optional .charge.TransferIn transfer_in = 3;
inline bool ChargeRequest::has_transfer_in() const {
  return this != internal_default_instance() && transfer_in_ != NULL;
}
inline void ChargeRequest::clear_transfer_in() {
  if (GetArenaNoVirtual() == NULL && transfer_in_ != NULL) delete transfer_in_;
  transfer_in_ = NULL;
}
inline const ::charge::TransferIn& ChargeRequest::transfer_in() const {
  // @@protoc_insertion_point(field_get:charge.ChargeRequest.transfer_in)
  return transfer_in_ != NULL ? *transfer_in_
                         : *::charge::TransferIn::internal_default_instance();
}
inline ::charge::TransferIn* ChargeRequest::mutable_transfer_in() {
  
  if (transfer_in_ == NULL) {
    transfer_in_ = new ::charge::TransferIn;
  }
  // @@protoc_insertion_point(field_mutable:charge.ChargeRequest.transfer_in)
  return transfer_in_;
}
inline ::charge::TransferIn* ChargeRequest::release_transfer_in() {
  // @@protoc_insertion_point(field_release:charge.ChargeRequest.transfer_in)
  
  ::charge::TransferIn* temp = transfer_in_;
  transfer_in_ = NULL;
  return temp;
}
inline void ChargeRequest::set_allocated_transfer_in(::charge::TransferIn* transfer_in) {
  delete transfer_in_;
  transfer_in_ = transfer_in;
  if (transfer_in) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:charge.ChargeRequest.transfer_in)
}

// optional string pay_type = 4;
inline void ChargeRequest::clear_pay_type() {
  pay_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChargeRequest::pay_type() const {
  // @@protoc_insertion_point(field_get:charge.ChargeRequest.pay_type)
  return pay_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChargeRequest::set_pay_type(const ::std::string& value) {
  
  pay_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:charge.ChargeRequest.pay_type)
}
inline void ChargeRequest::set_pay_type(const char* value) {
  
  pay_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:charge.ChargeRequest.pay_type)
}
inline void ChargeRequest::set_pay_type(const char* value, size_t size) {
  
  pay_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:charge.ChargeRequest.pay_type)
}
inline ::std::string* ChargeRequest::mutable_pay_type() {
  
  // @@protoc_insertion_point(field_mutable:charge.ChargeRequest.pay_type)
  return pay_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChargeRequest::release_pay_type() {
  // @@protoc_insertion_point(field_release:charge.ChargeRequest.pay_type)
  
  return pay_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChargeRequest::set_allocated_pay_type(::std::string* pay_type) {
  if (pay_type != NULL) {
    
  } else {
    
  }
  pay_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pay_type);
  // @@protoc_insertion_point(field_set_allocated:charge.ChargeRequest.pay_type)
}

// optional string turnover = 5;
inline void ChargeRequest::clear_turnover() {
  turnover_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChargeRequest::turnover() const {
  // @@protoc_insertion_point(field_get:charge.ChargeRequest.turnover)
  return turnover_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChargeRequest::set_turnover(const ::std::string& value) {
  
  turnover_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:charge.ChargeRequest.turnover)
}
inline void ChargeRequest::set_turnover(const char* value) {
  
  turnover_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:charge.ChargeRequest.turnover)
}
inline void ChargeRequest::set_turnover(const char* value, size_t size) {
  
  turnover_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:charge.ChargeRequest.turnover)
}
inline ::std::string* ChargeRequest::mutable_turnover() {
  
  // @@protoc_insertion_point(field_mutable:charge.ChargeRequest.turnover)
  return turnover_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChargeRequest::release_turnover() {
  // @@protoc_insertion_point(field_release:charge.ChargeRequest.turnover)
  
  return turnover_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChargeRequest::set_allocated_turnover(::std::string* turnover) {
  if (turnover != NULL) {
    
  } else {
    
  }
  turnover_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), turnover);
  // @@protoc_insertion_point(field_set_allocated:charge.ChargeRequest.turnover)
}

// optional string product_detail = 6;
inline void ChargeRequest::clear_product_detail() {
  product_detail_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChargeRequest::product_detail() const {
  // @@protoc_insertion_point(field_get:charge.ChargeRequest.product_detail)
  return product_detail_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChargeRequest::set_product_detail(const ::std::string& value) {
  
  product_detail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:charge.ChargeRequest.product_detail)
}
inline void ChargeRequest::set_product_detail(const char* value) {
  
  product_detail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:charge.ChargeRequest.product_detail)
}
inline void ChargeRequest::set_product_detail(const char* value, size_t size) {
  
  product_detail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:charge.ChargeRequest.product_detail)
}
inline ::std::string* ChargeRequest::mutable_product_detail() {
  
  // @@protoc_insertion_point(field_mutable:charge.ChargeRequest.product_detail)
  return product_detail_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChargeRequest::release_product_detail() {
  // @@protoc_insertion_point(field_release:charge.ChargeRequest.product_detail)
  
  return product_detail_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChargeRequest::set_allocated_product_detail(::std::string* product_detail) {
  if (product_detail != NULL) {
    
  } else {
    
  }
  product_detail_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), product_detail);
  // @@protoc_insertion_point(field_set_allocated:charge.ChargeRequest.product_detail)
}

// optional string product_title = 7;
inline void ChargeRequest::clear_product_title() {
  product_title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChargeRequest::product_title() const {
  // @@protoc_insertion_point(field_get:charge.ChargeRequest.product_title)
  return product_title_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChargeRequest::set_product_title(const ::std::string& value) {
  
  product_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:charge.ChargeRequest.product_title)
}
inline void ChargeRequest::set_product_title(const char* value) {
  
  product_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:charge.ChargeRequest.product_title)
}
inline void ChargeRequest::set_product_title(const char* value, size_t size) {
  
  product_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:charge.ChargeRequest.product_title)
}
inline ::std::string* ChargeRequest::mutable_product_title() {
  
  // @@protoc_insertion_point(field_mutable:charge.ChargeRequest.product_title)
  return product_title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChargeRequest::release_product_title() {
  // @@protoc_insertion_point(field_release:charge.ChargeRequest.product_title)
  
  return product_title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChargeRequest::set_allocated_product_title(::std::string* product_title) {
  if (product_title != NULL) {
    
  } else {
    
  }
  product_title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), product_title);
  // @@protoc_insertion_point(field_set_allocated:charge.ChargeRequest.product_title)
}

inline const ChargeRequest* ChargeRequest::internal_default_instance() {
  return &ChargeRequest_default_instance_.get();
}
// -------------------------------------------------------------------

// TransferIn

// optional string Type = 1;
inline void TransferIn::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TransferIn::type() const {
  // @@protoc_insertion_point(field_get:charge.TransferIn.Type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransferIn::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:charge.TransferIn.Type)
}
inline void TransferIn::set_type(const char* value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:charge.TransferIn.Type)
}
inline void TransferIn::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:charge.TransferIn.Type)
}
inline ::std::string* TransferIn::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:charge.TransferIn.Type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransferIn::release_type() {
  // @@protoc_insertion_point(field_release:charge.TransferIn.Type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransferIn::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:charge.TransferIn.Type)
}

// optional string Key = 2;
inline void TransferIn::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TransferIn::key() const {
  // @@protoc_insertion_point(field_get:charge.TransferIn.Key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransferIn::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:charge.TransferIn.Key)
}
inline void TransferIn::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:charge.TransferIn.Key)
}
inline void TransferIn::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:charge.TransferIn.Key)
}
inline ::std::string* TransferIn::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:charge.TransferIn.Key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransferIn::release_key() {
  // @@protoc_insertion_point(field_release:charge.TransferIn.Key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransferIn::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:charge.TransferIn.Key)
}

inline const TransferIn* TransferIn::internal_default_instance() {
  return &TransferIn_default_instance_.get();
}
// -------------------------------------------------------------------

// ChargeResponse

// optional string app_id = 1;
inline void ChargeResponse::clear_app_id() {
  app_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChargeResponse::app_id() const {
  // @@protoc_insertion_point(field_get:charge.ChargeResponse.app_id)
  return app_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChargeResponse::set_app_id(const ::std::string& value) {
  
  app_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:charge.ChargeResponse.app_id)
}
inline void ChargeResponse::set_app_id(const char* value) {
  
  app_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:charge.ChargeResponse.app_id)
}
inline void ChargeResponse::set_app_id(const char* value, size_t size) {
  
  app_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:charge.ChargeResponse.app_id)
}
inline ::std::string* ChargeResponse::mutable_app_id() {
  
  // @@protoc_insertion_point(field_mutable:charge.ChargeResponse.app_id)
  return app_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChargeResponse::release_app_id() {
  // @@protoc_insertion_point(field_release:charge.ChargeResponse.app_id)
  
  return app_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChargeResponse::set_allocated_app_id(::std::string* app_id) {
  if (app_id != NULL) {
    
  } else {
    
  }
  app_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), app_id);
  // @@protoc_insertion_point(field_set_allocated:charge.ChargeResponse.app_id)
}

// optional string partner_id = 2;
inline void ChargeResponse::clear_partner_id() {
  partner_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChargeResponse::partner_id() const {
  // @@protoc_insertion_point(field_get:charge.ChargeResponse.partner_id)
  return partner_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChargeResponse::set_partner_id(const ::std::string& value) {
  
  partner_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:charge.ChargeResponse.partner_id)
}
inline void ChargeResponse::set_partner_id(const char* value) {
  
  partner_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:charge.ChargeResponse.partner_id)
}
inline void ChargeResponse::set_partner_id(const char* value, size_t size) {
  
  partner_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:charge.ChargeResponse.partner_id)
}
inline ::std::string* ChargeResponse::mutable_partner_id() {
  
  // @@protoc_insertion_point(field_mutable:charge.ChargeResponse.partner_id)
  return partner_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChargeResponse::release_partner_id() {
  // @@protoc_insertion_point(field_release:charge.ChargeResponse.partner_id)
  
  return partner_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChargeResponse::set_allocated_partner_id(::std::string* partner_id) {
  if (partner_id != NULL) {
    
  } else {
    
  }
  partner_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), partner_id);
  // @@protoc_insertion_point(field_set_allocated:charge.ChargeResponse.partner_id)
}

// optional string prepay_id = 3;
inline void ChargeResponse::clear_prepay_id() {
  prepay_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChargeResponse::prepay_id() const {
  // @@protoc_insertion_point(field_get:charge.ChargeResponse.prepay_id)
  return prepay_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChargeResponse::set_prepay_id(const ::std::string& value) {
  
  prepay_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:charge.ChargeResponse.prepay_id)
}
inline void ChargeResponse::set_prepay_id(const char* value) {
  
  prepay_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:charge.ChargeResponse.prepay_id)
}
inline void ChargeResponse::set_prepay_id(const char* value, size_t size) {
  
  prepay_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:charge.ChargeResponse.prepay_id)
}
inline ::std::string* ChargeResponse::mutable_prepay_id() {
  
  // @@protoc_insertion_point(field_mutable:charge.ChargeResponse.prepay_id)
  return prepay_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChargeResponse::release_prepay_id() {
  // @@protoc_insertion_point(field_release:charge.ChargeResponse.prepay_id)
  
  return prepay_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChargeResponse::set_allocated_prepay_id(::std::string* prepay_id) {
  if (prepay_id != NULL) {
    
  } else {
    
  }
  prepay_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prepay_id);
  // @@protoc_insertion_point(field_set_allocated:charge.ChargeResponse.prepay_id)
}

// optional string package = 4;
inline void ChargeResponse::clear_package() {
  package_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChargeResponse::package() const {
  // @@protoc_insertion_point(field_get:charge.ChargeResponse.package)
  return package_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChargeResponse::set_package(const ::std::string& value) {
  
  package_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:charge.ChargeResponse.package)
}
inline void ChargeResponse::set_package(const char* value) {
  
  package_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:charge.ChargeResponse.package)
}
inline void ChargeResponse::set_package(const char* value, size_t size) {
  
  package_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:charge.ChargeResponse.package)
}
inline ::std::string* ChargeResponse::mutable_package() {
  
  // @@protoc_insertion_point(field_mutable:charge.ChargeResponse.package)
  return package_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChargeResponse::release_package() {
  // @@protoc_insertion_point(field_release:charge.ChargeResponse.package)
  
  return package_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChargeResponse::set_allocated_package(::std::string* package) {
  if (package != NULL) {
    
  } else {
    
  }
  package_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), package);
  // @@protoc_insertion_point(field_set_allocated:charge.ChargeResponse.package)
}

// optional string noncestr = 5;
inline void ChargeResponse::clear_noncestr() {
  noncestr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChargeResponse::noncestr() const {
  // @@protoc_insertion_point(field_get:charge.ChargeResponse.noncestr)
  return noncestr_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChargeResponse::set_noncestr(const ::std::string& value) {
  
  noncestr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:charge.ChargeResponse.noncestr)
}
inline void ChargeResponse::set_noncestr(const char* value) {
  
  noncestr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:charge.ChargeResponse.noncestr)
}
inline void ChargeResponse::set_noncestr(const char* value, size_t size) {
  
  noncestr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:charge.ChargeResponse.noncestr)
}
inline ::std::string* ChargeResponse::mutable_noncestr() {
  
  // @@protoc_insertion_point(field_mutable:charge.ChargeResponse.noncestr)
  return noncestr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChargeResponse::release_noncestr() {
  // @@protoc_insertion_point(field_release:charge.ChargeResponse.noncestr)
  
  return noncestr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChargeResponse::set_allocated_noncestr(::std::string* noncestr) {
  if (noncestr != NULL) {
    
  } else {
    
  }
  noncestr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), noncestr);
  // @@protoc_insertion_point(field_set_allocated:charge.ChargeResponse.noncestr)
}

// optional string time_stamp = 6;
inline void ChargeResponse::clear_time_stamp() {
  time_stamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChargeResponse::time_stamp() const {
  // @@protoc_insertion_point(field_get:charge.ChargeResponse.time_stamp)
  return time_stamp_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChargeResponse::set_time_stamp(const ::std::string& value) {
  
  time_stamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:charge.ChargeResponse.time_stamp)
}
inline void ChargeResponse::set_time_stamp(const char* value) {
  
  time_stamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:charge.ChargeResponse.time_stamp)
}
inline void ChargeResponse::set_time_stamp(const char* value, size_t size) {
  
  time_stamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:charge.ChargeResponse.time_stamp)
}
inline ::std::string* ChargeResponse::mutable_time_stamp() {
  
  // @@protoc_insertion_point(field_mutable:charge.ChargeResponse.time_stamp)
  return time_stamp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChargeResponse::release_time_stamp() {
  // @@protoc_insertion_point(field_release:charge.ChargeResponse.time_stamp)
  
  return time_stamp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChargeResponse::set_allocated_time_stamp(::std::string* time_stamp) {
  if (time_stamp != NULL) {
    
  } else {
    
  }
  time_stamp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), time_stamp);
  // @@protoc_insertion_point(field_set_allocated:charge.ChargeResponse.time_stamp)
}

// optional string sign = 7;
inline void ChargeResponse::clear_sign() {
  sign_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChargeResponse::sign() const {
  // @@protoc_insertion_point(field_get:charge.ChargeResponse.sign)
  return sign_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChargeResponse::set_sign(const ::std::string& value) {
  
  sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:charge.ChargeResponse.sign)
}
inline void ChargeResponse::set_sign(const char* value) {
  
  sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:charge.ChargeResponse.sign)
}
inline void ChargeResponse::set_sign(const char* value, size_t size) {
  
  sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:charge.ChargeResponse.sign)
}
inline ::std::string* ChargeResponse::mutable_sign() {
  
  // @@protoc_insertion_point(field_mutable:charge.ChargeResponse.sign)
  return sign_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChargeResponse::release_sign() {
  // @@protoc_insertion_point(field_release:charge.ChargeResponse.sign)
  
  return sign_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChargeResponse::set_allocated_sign(::std::string* sign) {
  if (sign != NULL) {
    
  } else {
    
  }
  sign_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sign);
  // @@protoc_insertion_point(field_set_allocated:charge.ChargeResponse.sign)
}

// optional .grpcCommon.GrpcError error = 8;
inline bool ChargeResponse::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
inline void ChargeResponse::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) delete error_;
  error_ = NULL;
}
inline const ::grpcCommon::GrpcError& ChargeResponse::error() const {
  // @@protoc_insertion_point(field_get:charge.ChargeResponse.error)
  return error_ != NULL ? *error_
                         : *::grpcCommon::GrpcError::internal_default_instance();
}
inline ::grpcCommon::GrpcError* ChargeResponse::mutable_error() {
  
  if (error_ == NULL) {
    error_ = new ::grpcCommon::GrpcError;
  }
  // @@protoc_insertion_point(field_mutable:charge.ChargeResponse.error)
  return error_;
}
inline ::grpcCommon::GrpcError* ChargeResponse::release_error() {
  // @@protoc_insertion_point(field_release:charge.ChargeResponse.error)
  
  ::grpcCommon::GrpcError* temp = error_;
  error_ = NULL;
  return temp;
}
inline void ChargeResponse::set_allocated_error(::grpcCommon::GrpcError* error) {
  delete error_;
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:charge.ChargeResponse.error)
}

inline const ChargeResponse* ChargeResponse::internal_default_instance() {
  return &ChargeResponse_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace charge

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_charge_2fmsg_5fcharge_2eproto__INCLUDED
