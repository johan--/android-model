// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mainPage/content.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mainPage/content.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ContentRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContentRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContentDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContentDetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContentDetail_CustomFieldsEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Category_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Category_reflection_ = NULL;
const ::google::protobuf::Descriptor* Tag_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Tag_reflection_ = NULL;
const ::google::protobuf::Descriptor* ImageDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImageDetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* ImageDetail_SizesEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ImageSize_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImageSize_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_mainPage_2fcontent_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_mainPage_2fcontent_2eproto() {
  protobuf_AddDesc_mainPage_2fcontent_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mainPage/content.proto");
  GOOGLE_CHECK(file != NULL);
  ContentRequest_descriptor_ = file->message_type(0);
  static const int ContentRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentRequest, tags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentRequest, categories_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentRequest, page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentRequest, page_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentRequest, query_),
  };
  ContentRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ContentRequest_descriptor_,
      ContentRequest::internal_default_instance(),
      ContentRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(ContentRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentRequest, _internal_metadata_));
  ContentDetail_descriptor_ = file->message_type(1);
  static const int ContentDetail_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentDetail, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentDetail, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentDetail, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentDetail, date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentDetail, excerpt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentDetail, categories_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentDetail, tags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentDetail, images_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentDetail, custom_fields_),
  };
  ContentDetail_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ContentDetail_descriptor_,
      ContentDetail::internal_default_instance(),
      ContentDetail_offsets_,
      -1,
      -1,
      -1,
      sizeof(ContentDetail),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentDetail, _internal_metadata_));
  ContentDetail_CustomFieldsEntry_descriptor_ = ContentDetail_descriptor_->nested_type(0);
  Category_descriptor_ = file->message_type(2);
  static const int Category_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Category, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Category, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Category, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Category, slug_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Category, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Category, count_),
  };
  Category_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Category_descriptor_,
      Category::internal_default_instance(),
      Category_offsets_,
      -1,
      -1,
      -1,
      sizeof(Category),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Category, _internal_metadata_));
  Tag_descriptor_ = file->message_type(3);
  static const int Tag_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tag, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tag, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tag, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tag, slug_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tag, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tag, count_),
  };
  Tag_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Tag_descriptor_,
      Tag::internal_default_instance(),
      Tag_offsets_,
      -1,
      -1,
      -1,
      sizeof(Tag),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tag, _internal_metadata_));
  ImageDetail_descriptor_ = file->message_type(4);
  static const int ImageDetail_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDetail, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDetail, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDetail, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDetail, mime_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDetail, alt_text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDetail, sizes_),
  };
  ImageDetail_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ImageDetail_descriptor_,
      ImageDetail::internal_default_instance(),
      ImageDetail_offsets_,
      -1,
      -1,
      -1,
      sizeof(ImageDetail),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDetail, _internal_metadata_));
  ImageDetail_SizesEntry_descriptor_ = ImageDetail_descriptor_->nested_type(0);
  ImageSize_descriptor_ = file->message_type(5);
  static const int ImageSize_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageSize, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageSize, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageSize, source_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageSize, mime_type_),
  };
  ImageSize_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ImageSize_descriptor_,
      ImageSize::internal_default_instance(),
      ImageSize_offsets_,
      -1,
      -1,
      -1,
      sizeof(ImageSize),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageSize, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mainPage_2fcontent_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ContentRequest_descriptor_, ContentRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ContentDetail_descriptor_, ContentDetail::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        ContentDetail_CustomFieldsEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::std::string,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            0>::CreateDefaultInstance(
                ContentDetail_CustomFieldsEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Category_descriptor_, Category::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Tag_descriptor_, Tag::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ImageDetail_descriptor_, ImageDetail::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        ImageDetail_SizesEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::ImageSize,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                ImageDetail_SizesEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ImageSize_descriptor_, ImageSize::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mainPage_2fcontent_2eproto() {
  ContentRequest_default_instance_.Shutdown();
  delete ContentRequest_reflection_;
  ContentDetail_default_instance_.Shutdown();
  delete ContentDetail_reflection_;
  Category_default_instance_.Shutdown();
  delete Category_reflection_;
  Tag_default_instance_.Shutdown();
  delete Tag_reflection_;
  ImageDetail_default_instance_.Shutdown();
  delete ImageDetail_reflection_;
  ImageSize_default_instance_.Shutdown();
  delete ImageSize_reflection_;
}

void protobuf_InitDefaults_mainPage_2fcontent_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  ContentRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ContentDetail_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Category_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Tag_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ImageDetail_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ::google::protobuf::internal::GetEmptyString();
  ImageSize_default_instance_.DefaultConstruct();
  ContentRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  ContentDetail_default_instance_.get_mutable()->InitAsDefaultInstance();
  Category_default_instance_.get_mutable()->InitAsDefaultInstance();
  Tag_default_instance_.get_mutable()->InitAsDefaultInstance();
  ImageDetail_default_instance_.get_mutable()->InitAsDefaultInstance();
  ImageSize_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_mainPage_2fcontent_2eproto_once_);
void protobuf_InitDefaults_mainPage_2fcontent_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_mainPage_2fcontent_2eproto_once_,
                 &protobuf_InitDefaults_mainPage_2fcontent_2eproto_impl);
}
void protobuf_AddDesc_mainPage_2fcontent_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_mainPage_2fcontent_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026mainPage/content.proto\"b\n\016ContentReque"
    "st\022\014\n\004tags\030\001 \003(\t\022\022\n\ncategories\030\002 \003(\t\022\014\n\004"
    "page\030\003 \001(\005\022\021\n\tpage_size\030\004 \001(\005\022\r\n\005query\030\005"
    " \001(\t\"\225\002\n\rContentDetail\022\n\n\002id\030\001 \001(\005\022\r\n\005ti"
    "tle\030\002 \001(\t\022\013\n\003url\030\003 \001(\t\022\014\n\004date\030\004 \001(\t\022\017\n\007"
    "excerpt\030\005 \001(\t\022\035\n\ncategories\030\006 \003(\0132\t.Cate"
    "gory\022\022\n\004tags\030\007 \003(\0132\004.Tag\022\034\n\006images\030\010 \003(\013"
    "2\014.ImageDetail\0227\n\rcustom_fields\030\t \003(\0132 ."
    "ContentDetail.CustomFieldsEntry\0323\n\021Custo"
    "mFieldsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t"
    ":\0028\001\"c\n\010Category\022\n\n\002id\030\001 \001(\005\022\014\n\004name\030\002 \001"
    "(\t\022\013\n\003url\030\003 \001(\t\022\014\n\004slug\030\004 \001(\t\022\023\n\013descrip"
    "tion\030\005 \001(\t\022\r\n\005count\030\006 \001(\005\"^\n\003Tag\022\n\n\002id\030\001"
    " \001(\005\022\014\n\004name\030\002 \001(\t\022\013\n\003url\030\003 \001(\t\022\014\n\004slug\030"
    "\004 \001(\t\022\023\n\013description\030\005 \001(\t\022\r\n\005count\030\006 \001("
    "\005\"\302\001\n\013ImageDetail\022\r\n\005title\030\001 \001(\t\022\r\n\005widt"
    "h\030\002 \001(\005\022\016\n\006height\030\003 \001(\005\022\021\n\tmime_type\030\004 \001"
    "(\t\022\020\n\010alt_text\030\005 \001(\t\022&\n\005sizes\030\006 \003(\0132\027.Im"
    "ageDetail.SizesEntry\0328\n\nSizesEntry\022\013\n\003ke"
    "y\030\001 \001(\t\022\031\n\005value\030\002 \001(\0132\n.ImageSize:\0028\001\"Q"
    "\n\tImageSize\022\r\n\005width\030\001 \001(\005\022\016\n\006height\030\002 \001"
    "(\005\022\022\n\nsource_url\030\003 \001(\t\022\021\n\tmime_type\030\004 \001("
    "\tB\022\n\020com.wanfang.mainb\006proto3", 909);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mainPage/content.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mainPage_2fcontent_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_mainPage_2fcontent_2eproto_once_);
void protobuf_AddDesc_mainPage_2fcontent_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_mainPage_2fcontent_2eproto_once_,
                 &protobuf_AddDesc_mainPage_2fcontent_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mainPage_2fcontent_2eproto {
  StaticDescriptorInitializer_mainPage_2fcontent_2eproto() {
    protobuf_AddDesc_mainPage_2fcontent_2eproto();
  }
} static_descriptor_initializer_mainPage_2fcontent_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ContentRequest::kTagsFieldNumber;
const int ContentRequest::kCategoriesFieldNumber;
const int ContentRequest::kPageFieldNumber;
const int ContentRequest::kPageSizeFieldNumber;
const int ContentRequest::kQueryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ContentRequest::ContentRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_mainPage_2fcontent_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:ContentRequest)
}

void ContentRequest::InitAsDefaultInstance() {
}

ContentRequest::ContentRequest(const ContentRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ContentRequest)
}

void ContentRequest::SharedCtor() {
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&page_, 0, reinterpret_cast<char*>(&page_size_) -
    reinterpret_cast<char*>(&page_) + sizeof(page_size_));
  _cached_size_ = 0;
}

ContentRequest::~ContentRequest() {
  // @@protoc_insertion_point(destructor:ContentRequest)
  SharedDtor();
}

void ContentRequest::SharedDtor() {
  query_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ContentRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContentRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContentRequest_descriptor_;
}

const ContentRequest& ContentRequest::default_instance() {
  protobuf_InitDefaults_mainPage_2fcontent_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ContentRequest> ContentRequest_default_instance_;

ContentRequest* ContentRequest::New(::google::protobuf::Arena* arena) const {
  ContentRequest* n = new ContentRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ContentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ContentRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ContentRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ContentRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(page_, page_size_);
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  tags_.Clear();
  categories_.Clear();
}

bool ContentRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ContentRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string tags = 1;
      case 1: {
        if (tag == 10) {
         parse_tags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tags()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tags(this->tags_size() - 1).data(),
            this->tags(this->tags_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ContentRequest.tags"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_tags;
        if (input->ExpectTag(18)) goto parse_categories;
        break;
      }

      // repeated string categories = 2;
      case 2: {
        if (tag == 18) {
         parse_categories:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_categories()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->categories(this->categories_size() - 1).data(),
            this->categories(this->categories_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ContentRequest.categories"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_categories;
        if (input->ExpectTag(24)) goto parse_page;
        break;
      }

      // optional int32 page = 3;
      case 3: {
        if (tag == 24) {
         parse_page:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_page_size;
        break;
      }

      // optional int32 page_size = 4;
      case 4: {
        if (tag == 32) {
         parse_page_size:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_size_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_query;
        break;
      }

      // optional string query = 5;
      case 5: {
        if (tag == 42) {
         parse_query:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->query().data(), this->query().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ContentRequest.query"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ContentRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ContentRequest)
  return false;
#undef DO_
}

void ContentRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ContentRequest)
  // repeated string tags = 1;
  for (int i = 0; i < this->tags_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tags(i).data(), this->tags(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ContentRequest.tags");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->tags(i), output);
  }

  // repeated string categories = 2;
  for (int i = 0; i < this->categories_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->categories(i).data(), this->categories(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ContentRequest.categories");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->categories(i), output);
  }

  // optional int32 page = 3;
  if (this->page() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->page(), output);
  }

  // optional int32 page_size = 4;
  if (this->page_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->page_size(), output);
  }

  // optional string query = 5;
  if (this->query().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query().data(), this->query().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ContentRequest.query");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->query(), output);
  }

  // @@protoc_insertion_point(serialize_end:ContentRequest)
}

::google::protobuf::uint8* ContentRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ContentRequest)
  // repeated string tags = 1;
  for (int i = 0; i < this->tags_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tags(i).data(), this->tags(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ContentRequest.tags");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->tags(i), target);
  }

  // repeated string categories = 2;
  for (int i = 0; i < this->categories_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->categories(i).data(), this->categories(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ContentRequest.categories");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->categories(i), target);
  }

  // optional int32 page = 3;
  if (this->page() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->page(), target);
  }

  // optional int32 page_size = 4;
  if (this->page_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->page_size(), target);
  }

  // optional string query = 5;
  if (this->query().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query().data(), this->query().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ContentRequest.query");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->query(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ContentRequest)
  return target;
}

size_t ContentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ContentRequest)
  size_t total_size = 0;

  // optional int32 page = 3;
  if (this->page() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->page());
  }

  // optional int32 page_size = 4;
  if (this->page_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->page_size());
  }

  // optional string query = 5;
  if (this->query().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->query());
  }

  // repeated string tags = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->tags_size());
  for (int i = 0; i < this->tags_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tags(i));
  }

  // repeated string categories = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->categories_size());
  for (int i = 0; i < this->categories_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->categories(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContentRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ContentRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ContentRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ContentRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ContentRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ContentRequest)
    UnsafeMergeFrom(*source);
  }
}

void ContentRequest::MergeFrom(const ContentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ContentRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ContentRequest::UnsafeMergeFrom(const ContentRequest& from) {
  GOOGLE_DCHECK(&from != this);
  tags_.UnsafeMergeFrom(from.tags_);
  categories_.UnsafeMergeFrom(from.categories_);
  if (from.page() != 0) {
    set_page(from.page());
  }
  if (from.page_size() != 0) {
    set_page_size(from.page_size());
  }
  if (from.query().size() > 0) {

    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
}

void ContentRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ContentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContentRequest::CopyFrom(const ContentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ContentRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ContentRequest::IsInitialized() const {

  return true;
}

void ContentRequest::Swap(ContentRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ContentRequest::InternalSwap(ContentRequest* other) {
  tags_.UnsafeArenaSwap(&other->tags_);
  categories_.UnsafeArenaSwap(&other->categories_);
  std::swap(page_, other->page_);
  std::swap(page_size_, other->page_size_);
  query_.Swap(&other->query_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ContentRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContentRequest_descriptor_;
  metadata.reflection = ContentRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ContentRequest

// repeated string tags = 1;
int ContentRequest::tags_size() const {
  return tags_.size();
}
void ContentRequest::clear_tags() {
  tags_.Clear();
}
const ::std::string& ContentRequest::tags(int index) const {
  // @@protoc_insertion_point(field_get:ContentRequest.tags)
  return tags_.Get(index);
}
::std::string* ContentRequest::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:ContentRequest.tags)
  return tags_.Mutable(index);
}
void ContentRequest::set_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ContentRequest.tags)
  tags_.Mutable(index)->assign(value);
}
void ContentRequest::set_tags(int index, const char* value) {
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ContentRequest.tags)
}
void ContentRequest::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ContentRequest.tags)
}
::std::string* ContentRequest::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:ContentRequest.tags)
  return tags_.Add();
}
void ContentRequest::add_tags(const ::std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ContentRequest.tags)
}
void ContentRequest::add_tags(const char* value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ContentRequest.tags)
}
void ContentRequest::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ContentRequest.tags)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
ContentRequest::tags() const {
  // @@protoc_insertion_point(field_list:ContentRequest.tags)
  return tags_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
ContentRequest::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:ContentRequest.tags)
  return &tags_;
}

// repeated string categories = 2;
int ContentRequest::categories_size() const {
  return categories_.size();
}
void ContentRequest::clear_categories() {
  categories_.Clear();
}
const ::std::string& ContentRequest::categories(int index) const {
  // @@protoc_insertion_point(field_get:ContentRequest.categories)
  return categories_.Get(index);
}
::std::string* ContentRequest::mutable_categories(int index) {
  // @@protoc_insertion_point(field_mutable:ContentRequest.categories)
  return categories_.Mutable(index);
}
void ContentRequest::set_categories(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ContentRequest.categories)
  categories_.Mutable(index)->assign(value);
}
void ContentRequest::set_categories(int index, const char* value) {
  categories_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ContentRequest.categories)
}
void ContentRequest::set_categories(int index, const char* value, size_t size) {
  categories_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ContentRequest.categories)
}
::std::string* ContentRequest::add_categories() {
  // @@protoc_insertion_point(field_add_mutable:ContentRequest.categories)
  return categories_.Add();
}
void ContentRequest::add_categories(const ::std::string& value) {
  categories_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ContentRequest.categories)
}
void ContentRequest::add_categories(const char* value) {
  categories_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ContentRequest.categories)
}
void ContentRequest::add_categories(const char* value, size_t size) {
  categories_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ContentRequest.categories)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
ContentRequest::categories() const {
  // @@protoc_insertion_point(field_list:ContentRequest.categories)
  return categories_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
ContentRequest::mutable_categories() {
  // @@protoc_insertion_point(field_mutable_list:ContentRequest.categories)
  return &categories_;
}

// optional int32 page = 3;
void ContentRequest::clear_page() {
  page_ = 0;
}
::google::protobuf::int32 ContentRequest::page() const {
  // @@protoc_insertion_point(field_get:ContentRequest.page)
  return page_;
}
void ContentRequest::set_page(::google::protobuf::int32 value) {
  
  page_ = value;
  // @@protoc_insertion_point(field_set:ContentRequest.page)
}

// optional int32 page_size = 4;
void ContentRequest::clear_page_size() {
  page_size_ = 0;
}
::google::protobuf::int32 ContentRequest::page_size() const {
  // @@protoc_insertion_point(field_get:ContentRequest.page_size)
  return page_size_;
}
void ContentRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:ContentRequest.page_size)
}

// optional string query = 5;
void ContentRequest::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ContentRequest::query() const {
  // @@protoc_insertion_point(field_get:ContentRequest.query)
  return query_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ContentRequest::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ContentRequest.query)
}
void ContentRequest::set_query(const char* value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ContentRequest.query)
}
void ContentRequest::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ContentRequest.query)
}
::std::string* ContentRequest::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:ContentRequest.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ContentRequest::release_query() {
  // @@protoc_insertion_point(field_release:ContentRequest.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ContentRequest::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:ContentRequest.query)
}

inline const ContentRequest* ContentRequest::internal_default_instance() {
  return &ContentRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ContentDetail::kIdFieldNumber;
const int ContentDetail::kTitleFieldNumber;
const int ContentDetail::kUrlFieldNumber;
const int ContentDetail::kDateFieldNumber;
const int ContentDetail::kExcerptFieldNumber;
const int ContentDetail::kCategoriesFieldNumber;
const int ContentDetail::kTagsFieldNumber;
const int ContentDetail::kImagesFieldNumber;
const int ContentDetail::kCustomFieldsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ContentDetail::ContentDetail()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_mainPage_2fcontent_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:ContentDetail)
}

void ContentDetail::InitAsDefaultInstance() {
}

ContentDetail::ContentDetail(const ContentDetail& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ContentDetail)
}

void ContentDetail::SharedCtor() {
  custom_fields_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  custom_fields_.SetEntryDescriptor(
      &::ContentDetail_CustomFieldsEntry_descriptor_);
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  excerpt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
  _cached_size_ = 0;
}

ContentDetail::~ContentDetail() {
  // @@protoc_insertion_point(destructor:ContentDetail)
  SharedDtor();
}

void ContentDetail::SharedDtor() {
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  date_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  excerpt_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ContentDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContentDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContentDetail_descriptor_;
}

const ContentDetail& ContentDetail::default_instance() {
  protobuf_InitDefaults_mainPage_2fcontent_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ContentDetail> ContentDetail_default_instance_;

ContentDetail* ContentDetail::New(::google::protobuf::Arena* arena) const {
  ContentDetail* n = new ContentDetail;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ContentDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:ContentDetail)
  id_ = 0;
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  excerpt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  categories_.Clear();
  tags_.Clear();
  images_.Clear();
  custom_fields_.Clear();
}

bool ContentDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ContentDetail)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_title;
        break;
      }

      // optional string title = 2;
      case 2: {
        if (tag == 18) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ContentDetail.title"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_url;
        break;
      }

      // optional string url = 3;
      case 3: {
        if (tag == 26) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ContentDetail.url"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_date;
        break;
      }

      // optional string date = 4;
      case 4: {
        if (tag == 34) {
         parse_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_date()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->date().data(), this->date().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ContentDetail.date"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_excerpt;
        break;
      }

      // optional string excerpt = 5;
      case 5: {
        if (tag == 42) {
         parse_excerpt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_excerpt()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->excerpt().data(), this->excerpt().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ContentDetail.excerpt"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_categories;
        break;
      }

      // repeated .Category categories = 6;
      case 6: {
        if (tag == 50) {
         parse_categories:
          DO_(input->IncrementRecursionDepth());
         parse_loop_categories:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_categories()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_categories;
        if (input->ExpectTag(58)) goto parse_loop_tags;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .Tag tags = 7;
      case 7: {
        if (tag == 58) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_tags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_tags()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_loop_tags;
        if (input->ExpectTag(66)) goto parse_loop_images;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .ImageDetail images = 8;
      case 8: {
        if (tag == 66) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_images:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_images()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_loop_images;
        if (input->ExpectTag(74)) goto parse_loop_custom_fields;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<string, string> custom_fields = 9;
      case 9: {
        if (tag == 74) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_custom_fields:
          ContentDetail_CustomFieldsEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&custom_fields_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ContentDetail.CustomFieldsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), parser.value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ContentDetail.CustomFieldsEntry.value"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_loop_custom_fields;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ContentDetail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ContentDetail)
  return false;
#undef DO_
}

void ContentDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ContentDetail)
  // optional int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string title = 2;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ContentDetail.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->title(), output);
  }

  // optional string url = 3;
  if (this->url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ContentDetail.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->url(), output);
  }

  // optional string date = 4;
  if (this->date().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->date().data(), this->date().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ContentDetail.date");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->date(), output);
  }

  // optional string excerpt = 5;
  if (this->excerpt().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->excerpt().data(), this->excerpt().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ContentDetail.excerpt");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->excerpt(), output);
  }

  // repeated .Category categories = 6;
  for (unsigned int i = 0, n = this->categories_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->categories(i), output);
  }

  // repeated .Tag tags = 7;
  for (unsigned int i = 0, n = this->tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->tags(i), output);
  }

  // repeated .ImageDetail images = 8;
  for (unsigned int i = 0, n = this->images_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->images(i), output);
  }

  // map<string, string> custom_fields = 9;
  if (!this->custom_fields().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "ContentDetail.CustomFieldsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "ContentDetail.CustomFieldsEntry.value");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->custom_fields().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->custom_fields().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->custom_fields().begin();
          it != this->custom_fields().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<ContentDetail_CustomFieldsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(custom_fields_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            9, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<ContentDetail_CustomFieldsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->custom_fields().begin();
          it != this->custom_fields().end(); ++it) {
        entry.reset(custom_fields_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            9, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:ContentDetail)
}

::google::protobuf::uint8* ContentDetail::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ContentDetail)
  // optional int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string title = 2;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ContentDetail.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  // optional string url = 3;
  if (this->url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ContentDetail.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->url(), target);
  }

  // optional string date = 4;
  if (this->date().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->date().data(), this->date().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ContentDetail.date");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->date(), target);
  }

  // optional string excerpt = 5;
  if (this->excerpt().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->excerpt().data(), this->excerpt().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ContentDetail.excerpt");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->excerpt(), target);
  }

  // repeated .Category categories = 6;
  for (unsigned int i = 0, n = this->categories_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->categories(i), false, target);
  }

  // repeated .Tag tags = 7;
  for (unsigned int i = 0, n = this->tags_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->tags(i), false, target);
  }

  // repeated .ImageDetail images = 8;
  for (unsigned int i = 0, n = this->images_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, this->images(i), false, target);
  }

  // map<string, string> custom_fields = 9;
  if (!this->custom_fields().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "ContentDetail.CustomFieldsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "ContentDetail.CustomFieldsEntry.value");
      }
    };

    if (deterministic &&
        this->custom_fields().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->custom_fields().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->custom_fields().begin();
          it != this->custom_fields().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<ContentDetail_CustomFieldsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(custom_fields_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       9, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<ContentDetail_CustomFieldsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->custom_fields().begin();
          it != this->custom_fields().end(); ++it) {
        entry.reset(custom_fields_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       9, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:ContentDetail)
  return target;
}

size_t ContentDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ContentDetail)
  size_t total_size = 0;

  // optional int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // optional string title = 2;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->title());
  }

  // optional string url = 3;
  if (this->url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  // optional string date = 4;
  if (this->date().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->date());
  }

  // optional string excerpt = 5;
  if (this->excerpt().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->excerpt());
  }

  // repeated .Category categories = 6;
  {
    unsigned int count = this->categories_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->categories(i));
    }
  }

  // repeated .Tag tags = 7;
  {
    unsigned int count = this->tags_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tags(i));
    }
  }

  // repeated .ImageDetail images = 8;
  {
    unsigned int count = this->images_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->images(i));
    }
  }

  // map<string, string> custom_fields = 9;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->custom_fields_size());
  {
    ::google::protobuf::scoped_ptr<ContentDetail_CustomFieldsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->custom_fields().begin();
        it != this->custom_fields().end(); ++it) {
      entry.reset(custom_fields_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContentDetail::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ContentDetail)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ContentDetail* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ContentDetail>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ContentDetail)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ContentDetail)
    UnsafeMergeFrom(*source);
  }
}

void ContentDetail::MergeFrom(const ContentDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ContentDetail)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ContentDetail::UnsafeMergeFrom(const ContentDetail& from) {
  GOOGLE_DCHECK(&from != this);
  categories_.MergeFrom(from.categories_);
  tags_.MergeFrom(from.tags_);
  images_.MergeFrom(from.images_);
  custom_fields_.MergeFrom(from.custom_fields_);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.title().size() > 0) {

    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  if (from.url().size() > 0) {

    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  if (from.date().size() > 0) {

    date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.date_);
  }
  if (from.excerpt().size() > 0) {

    excerpt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.excerpt_);
  }
}

void ContentDetail::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ContentDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContentDetail::CopyFrom(const ContentDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ContentDetail)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ContentDetail::IsInitialized() const {

  return true;
}

void ContentDetail::Swap(ContentDetail* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ContentDetail::InternalSwap(ContentDetail* other) {
  std::swap(id_, other->id_);
  title_.Swap(&other->title_);
  url_.Swap(&other->url_);
  date_.Swap(&other->date_);
  excerpt_.Swap(&other->excerpt_);
  categories_.UnsafeArenaSwap(&other->categories_);
  tags_.UnsafeArenaSwap(&other->tags_);
  images_.UnsafeArenaSwap(&other->images_);
  custom_fields_.Swap(&other->custom_fields_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ContentDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContentDetail_descriptor_;
  metadata.reflection = ContentDetail_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ContentDetail

// optional int32 id = 1;
void ContentDetail::clear_id() {
  id_ = 0;
}
::google::protobuf::int32 ContentDetail::id() const {
  // @@protoc_insertion_point(field_get:ContentDetail.id)
  return id_;
}
void ContentDetail::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:ContentDetail.id)
}

// optional string title = 2;
void ContentDetail::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ContentDetail::title() const {
  // @@protoc_insertion_point(field_get:ContentDetail.title)
  return title_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ContentDetail::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ContentDetail.title)
}
void ContentDetail::set_title(const char* value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ContentDetail.title)
}
void ContentDetail::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ContentDetail.title)
}
::std::string* ContentDetail::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:ContentDetail.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ContentDetail::release_title() {
  // @@protoc_insertion_point(field_release:ContentDetail.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ContentDetail::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:ContentDetail.title)
}

// optional string url = 3;
void ContentDetail::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ContentDetail::url() const {
  // @@protoc_insertion_point(field_get:ContentDetail.url)
  return url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ContentDetail::set_url(const ::std::string& value) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ContentDetail.url)
}
void ContentDetail::set_url(const char* value) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ContentDetail.url)
}
void ContentDetail::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ContentDetail.url)
}
::std::string* ContentDetail::mutable_url() {
  
  // @@protoc_insertion_point(field_mutable:ContentDetail.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ContentDetail::release_url() {
  // @@protoc_insertion_point(field_release:ContentDetail.url)
  
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ContentDetail::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ContentDetail.url)
}

// optional string date = 4;
void ContentDetail::clear_date() {
  date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ContentDetail::date() const {
  // @@protoc_insertion_point(field_get:ContentDetail.date)
  return date_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ContentDetail::set_date(const ::std::string& value) {
  
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ContentDetail.date)
}
void ContentDetail::set_date(const char* value) {
  
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ContentDetail.date)
}
void ContentDetail::set_date(const char* value, size_t size) {
  
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ContentDetail.date)
}
::std::string* ContentDetail::mutable_date() {
  
  // @@protoc_insertion_point(field_mutable:ContentDetail.date)
  return date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ContentDetail::release_date() {
  // @@protoc_insertion_point(field_release:ContentDetail.date)
  
  return date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ContentDetail::set_allocated_date(::std::string* date) {
  if (date != NULL) {
    
  } else {
    
  }
  date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), date);
  // @@protoc_insertion_point(field_set_allocated:ContentDetail.date)
}

// optional string excerpt = 5;
void ContentDetail::clear_excerpt() {
  excerpt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ContentDetail::excerpt() const {
  // @@protoc_insertion_point(field_get:ContentDetail.excerpt)
  return excerpt_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ContentDetail::set_excerpt(const ::std::string& value) {
  
  excerpt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ContentDetail.excerpt)
}
void ContentDetail::set_excerpt(const char* value) {
  
  excerpt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ContentDetail.excerpt)
}
void ContentDetail::set_excerpt(const char* value, size_t size) {
  
  excerpt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ContentDetail.excerpt)
}
::std::string* ContentDetail::mutable_excerpt() {
  
  // @@protoc_insertion_point(field_mutable:ContentDetail.excerpt)
  return excerpt_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ContentDetail::release_excerpt() {
  // @@protoc_insertion_point(field_release:ContentDetail.excerpt)
  
  return excerpt_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ContentDetail::set_allocated_excerpt(::std::string* excerpt) {
  if (excerpt != NULL) {
    
  } else {
    
  }
  excerpt_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), excerpt);
  // @@protoc_insertion_point(field_set_allocated:ContentDetail.excerpt)
}

// repeated .Category categories = 6;
int ContentDetail::categories_size() const {
  return categories_.size();
}
void ContentDetail::clear_categories() {
  categories_.Clear();
}
const ::Category& ContentDetail::categories(int index) const {
  // @@protoc_insertion_point(field_get:ContentDetail.categories)
  return categories_.Get(index);
}
::Category* ContentDetail::mutable_categories(int index) {
  // @@protoc_insertion_point(field_mutable:ContentDetail.categories)
  return categories_.Mutable(index);
}
::Category* ContentDetail::add_categories() {
  // @@protoc_insertion_point(field_add:ContentDetail.categories)
  return categories_.Add();
}
::google::protobuf::RepeatedPtrField< ::Category >*
ContentDetail::mutable_categories() {
  // @@protoc_insertion_point(field_mutable_list:ContentDetail.categories)
  return &categories_;
}
const ::google::protobuf::RepeatedPtrField< ::Category >&
ContentDetail::categories() const {
  // @@protoc_insertion_point(field_list:ContentDetail.categories)
  return categories_;
}

// repeated .Tag tags = 7;
int ContentDetail::tags_size() const {
  return tags_.size();
}
void ContentDetail::clear_tags() {
  tags_.Clear();
}
const ::Tag& ContentDetail::tags(int index) const {
  // @@protoc_insertion_point(field_get:ContentDetail.tags)
  return tags_.Get(index);
}
::Tag* ContentDetail::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:ContentDetail.tags)
  return tags_.Mutable(index);
}
::Tag* ContentDetail::add_tags() {
  // @@protoc_insertion_point(field_add:ContentDetail.tags)
  return tags_.Add();
}
::google::protobuf::RepeatedPtrField< ::Tag >*
ContentDetail::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:ContentDetail.tags)
  return &tags_;
}
const ::google::protobuf::RepeatedPtrField< ::Tag >&
ContentDetail::tags() const {
  // @@protoc_insertion_point(field_list:ContentDetail.tags)
  return tags_;
}

// repeated .ImageDetail images = 8;
int ContentDetail::images_size() const {
  return images_.size();
}
void ContentDetail::clear_images() {
  images_.Clear();
}
const ::ImageDetail& ContentDetail::images(int index) const {
  // @@protoc_insertion_point(field_get:ContentDetail.images)
  return images_.Get(index);
}
::ImageDetail* ContentDetail::mutable_images(int index) {
  // @@protoc_insertion_point(field_mutable:ContentDetail.images)
  return images_.Mutable(index);
}
::ImageDetail* ContentDetail::add_images() {
  // @@protoc_insertion_point(field_add:ContentDetail.images)
  return images_.Add();
}
::google::protobuf::RepeatedPtrField< ::ImageDetail >*
ContentDetail::mutable_images() {
  // @@protoc_insertion_point(field_mutable_list:ContentDetail.images)
  return &images_;
}
const ::google::protobuf::RepeatedPtrField< ::ImageDetail >&
ContentDetail::images() const {
  // @@protoc_insertion_point(field_list:ContentDetail.images)
  return images_;
}

// map<string, string> custom_fields = 9;
int ContentDetail::custom_fields_size() const {
  return custom_fields_.size();
}
void ContentDetail::clear_custom_fields() {
  custom_fields_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
ContentDetail::custom_fields() const {
  // @@protoc_insertion_point(field_map:ContentDetail.custom_fields)
  return custom_fields_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
ContentDetail::mutable_custom_fields() {
  // @@protoc_insertion_point(field_mutable_map:ContentDetail.custom_fields)
  return custom_fields_.MutableMap();
}

inline const ContentDetail* ContentDetail::internal_default_instance() {
  return &ContentDetail_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Category::kIdFieldNumber;
const int Category::kNameFieldNumber;
const int Category::kUrlFieldNumber;
const int Category::kSlugFieldNumber;
const int Category::kDescriptionFieldNumber;
const int Category::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Category::Category()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_mainPage_2fcontent_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:Category)
}

void Category::InitAsDefaultInstance() {
}

Category::Category(const Category& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Category)
}

void Category::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  slug_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&id_) + sizeof(count_));
  _cached_size_ = 0;
}

Category::~Category() {
  // @@protoc_insertion_point(destructor:Category)
  SharedDtor();
}

void Category::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  slug_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Category::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Category::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Category_descriptor_;
}

const Category& Category::default_instance() {
  protobuf_InitDefaults_mainPage_2fcontent_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Category> Category_default_instance_;

Category* Category::New(::google::protobuf::Arena* arena) const {
  Category* n = new Category;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Category::Clear() {
// @@protoc_insertion_point(message_clear_start:Category)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Category, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Category*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, count_);
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  slug_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool Category::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Category)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Category.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_url;
        break;
      }

      // optional string url = 3;
      case 3: {
        if (tag == 26) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Category.url"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_slug;
        break;
      }

      // optional string slug = 4;
      case 4: {
        if (tag == 34) {
         parse_slug:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_slug()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->slug().data(), this->slug().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Category.slug"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_description;
        break;
      }

      // optional string description = 5;
      case 5: {
        if (tag == 42) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Category.description"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_count;
        break;
      }

      // optional int32 count = 6;
      case 6: {
        if (tag == 48) {
         parse_count:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Category)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Category)
  return false;
#undef DO_
}

void Category::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Category)
  // optional int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Category.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string url = 3;
  if (this->url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Category.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->url(), output);
  }

  // optional string slug = 4;
  if (this->slug().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->slug().data(), this->slug().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Category.slug");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->slug(), output);
  }

  // optional string description = 5;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Category.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->description(), output);
  }

  // optional int32 count = 6;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->count(), output);
  }

  // @@protoc_insertion_point(serialize_end:Category)
}

::google::protobuf::uint8* Category::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Category)
  // optional int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Category.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string url = 3;
  if (this->url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Category.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->url(), target);
  }

  // optional string slug = 4;
  if (this->slug().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->slug().data(), this->slug().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Category.slug");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->slug(), target);
  }

  // optional string description = 5;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Category.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->description(), target);
  }

  // optional int32 count = 6;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->count(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Category)
  return target;
}

size_t Category::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Category)
  size_t total_size = 0;

  // optional int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string url = 3;
  if (this->url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  // optional string slug = 4;
  if (this->slug().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->slug());
  }

  // optional string description = 5;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // optional int32 count = 6;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Category::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Category)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Category* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Category>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Category)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Category)
    UnsafeMergeFrom(*source);
  }
}

void Category::MergeFrom(const Category& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Category)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Category::UnsafeMergeFrom(const Category& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.url().size() > 0) {

    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  if (from.slug().size() > 0) {

    slug_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.slug_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
}

void Category::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Category)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Category::CopyFrom(const Category& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Category)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Category::IsInitialized() const {

  return true;
}

void Category::Swap(Category* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Category::InternalSwap(Category* other) {
  std::swap(id_, other->id_);
  name_.Swap(&other->name_);
  url_.Swap(&other->url_);
  slug_.Swap(&other->slug_);
  description_.Swap(&other->description_);
  std::swap(count_, other->count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Category::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Category_descriptor_;
  metadata.reflection = Category_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Category

// optional int32 id = 1;
void Category::clear_id() {
  id_ = 0;
}
::google::protobuf::int32 Category::id() const {
  // @@protoc_insertion_point(field_get:Category.id)
  return id_;
}
void Category::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Category.id)
}

// optional string name = 2;
void Category::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Category::name() const {
  // @@protoc_insertion_point(field_get:Category.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Category::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Category.name)
}
void Category::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Category.name)
}
void Category::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Category.name)
}
::std::string* Category::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Category.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Category::release_name() {
  // @@protoc_insertion_point(field_release:Category.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Category::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Category.name)
}

// optional string url = 3;
void Category::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Category::url() const {
  // @@protoc_insertion_point(field_get:Category.url)
  return url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Category::set_url(const ::std::string& value) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Category.url)
}
void Category::set_url(const char* value) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Category.url)
}
void Category::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Category.url)
}
::std::string* Category::mutable_url() {
  
  // @@protoc_insertion_point(field_mutable:Category.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Category::release_url() {
  // @@protoc_insertion_point(field_release:Category.url)
  
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Category::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:Category.url)
}

// optional string slug = 4;
void Category::clear_slug() {
  slug_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Category::slug() const {
  // @@protoc_insertion_point(field_get:Category.slug)
  return slug_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Category::set_slug(const ::std::string& value) {
  
  slug_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Category.slug)
}
void Category::set_slug(const char* value) {
  
  slug_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Category.slug)
}
void Category::set_slug(const char* value, size_t size) {
  
  slug_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Category.slug)
}
::std::string* Category::mutable_slug() {
  
  // @@protoc_insertion_point(field_mutable:Category.slug)
  return slug_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Category::release_slug() {
  // @@protoc_insertion_point(field_release:Category.slug)
  
  return slug_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Category::set_allocated_slug(::std::string* slug) {
  if (slug != NULL) {
    
  } else {
    
  }
  slug_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), slug);
  // @@protoc_insertion_point(field_set_allocated:Category.slug)
}

// optional string description = 5;
void Category::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Category::description() const {
  // @@protoc_insertion_point(field_get:Category.description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Category::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Category.description)
}
void Category::set_description(const char* value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Category.description)
}
void Category::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Category.description)
}
::std::string* Category::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:Category.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Category::release_description() {
  // @@protoc_insertion_point(field_release:Category.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Category::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:Category.description)
}

// optional int32 count = 6;
void Category::clear_count() {
  count_ = 0;
}
::google::protobuf::int32 Category::count() const {
  // @@protoc_insertion_point(field_get:Category.count)
  return count_;
}
void Category::set_count(::google::protobuf::int32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:Category.count)
}

inline const Category* Category::internal_default_instance() {
  return &Category_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Tag::kIdFieldNumber;
const int Tag::kNameFieldNumber;
const int Tag::kUrlFieldNumber;
const int Tag::kSlugFieldNumber;
const int Tag::kDescriptionFieldNumber;
const int Tag::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Tag::Tag()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_mainPage_2fcontent_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tag)
}

void Tag::InitAsDefaultInstance() {
}

Tag::Tag(const Tag& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Tag)
}

void Tag::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  slug_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&id_) + sizeof(count_));
  _cached_size_ = 0;
}

Tag::~Tag() {
  // @@protoc_insertion_point(destructor:Tag)
  SharedDtor();
}

void Tag::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  slug_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Tag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Tag::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Tag_descriptor_;
}

const Tag& Tag::default_instance() {
  protobuf_InitDefaults_mainPage_2fcontent_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Tag> Tag_default_instance_;

Tag* Tag::New(::google::protobuf::Arena* arena) const {
  Tag* n = new Tag;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Tag::Clear() {
// @@protoc_insertion_point(message_clear_start:Tag)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Tag, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Tag*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, count_);
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  slug_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool Tag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Tag)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Tag.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_url;
        break;
      }

      // optional string url = 3;
      case 3: {
        if (tag == 26) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Tag.url"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_slug;
        break;
      }

      // optional string slug = 4;
      case 4: {
        if (tag == 34) {
         parse_slug:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_slug()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->slug().data(), this->slug().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Tag.slug"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_description;
        break;
      }

      // optional string description = 5;
      case 5: {
        if (tag == 42) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Tag.description"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_count;
        break;
      }

      // optional int32 count = 6;
      case 6: {
        if (tag == 48) {
         parse_count:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Tag)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Tag)
  return false;
#undef DO_
}

void Tag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Tag)
  // optional int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Tag.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string url = 3;
  if (this->url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Tag.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->url(), output);
  }

  // optional string slug = 4;
  if (this->slug().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->slug().data(), this->slug().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Tag.slug");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->slug(), output);
  }

  // optional string description = 5;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Tag.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->description(), output);
  }

  // optional int32 count = 6;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->count(), output);
  }

  // @@protoc_insertion_point(serialize_end:Tag)
}

::google::protobuf::uint8* Tag::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Tag)
  // optional int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Tag.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string url = 3;
  if (this->url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Tag.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->url(), target);
  }

  // optional string slug = 4;
  if (this->slug().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->slug().data(), this->slug().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Tag.slug");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->slug(), target);
  }

  // optional string description = 5;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Tag.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->description(), target);
  }

  // optional int32 count = 6;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->count(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Tag)
  return target;
}

size_t Tag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tag)
  size_t total_size = 0;

  // optional int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string url = 3;
  if (this->url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  // optional string slug = 4;
  if (this->slug().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->slug());
  }

  // optional string description = 5;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // optional int32 count = 6;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Tag::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Tag)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Tag* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Tag>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Tag)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Tag)
    UnsafeMergeFrom(*source);
  }
}

void Tag::MergeFrom(const Tag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tag)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Tag::UnsafeMergeFrom(const Tag& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.url().size() > 0) {

    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  if (from.slug().size() > 0) {

    slug_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.slug_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
}

void Tag::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Tag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tag::CopyFrom(const Tag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tag)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Tag::IsInitialized() const {

  return true;
}

void Tag::Swap(Tag* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Tag::InternalSwap(Tag* other) {
  std::swap(id_, other->id_);
  name_.Swap(&other->name_);
  url_.Swap(&other->url_);
  slug_.Swap(&other->slug_);
  description_.Swap(&other->description_);
  std::swap(count_, other->count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Tag::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Tag_descriptor_;
  metadata.reflection = Tag_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Tag

// optional int32 id = 1;
void Tag::clear_id() {
  id_ = 0;
}
::google::protobuf::int32 Tag::id() const {
  // @@protoc_insertion_point(field_get:Tag.id)
  return id_;
}
void Tag::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Tag.id)
}

// optional string name = 2;
void Tag::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Tag::name() const {
  // @@protoc_insertion_point(field_get:Tag.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Tag::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Tag.name)
}
void Tag::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Tag.name)
}
void Tag::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Tag.name)
}
::std::string* Tag::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Tag.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Tag::release_name() {
  // @@protoc_insertion_point(field_release:Tag.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Tag::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Tag.name)
}

// optional string url = 3;
void Tag::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Tag::url() const {
  // @@protoc_insertion_point(field_get:Tag.url)
  return url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Tag::set_url(const ::std::string& value) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Tag.url)
}
void Tag::set_url(const char* value) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Tag.url)
}
void Tag::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Tag.url)
}
::std::string* Tag::mutable_url() {
  
  // @@protoc_insertion_point(field_mutable:Tag.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Tag::release_url() {
  // @@protoc_insertion_point(field_release:Tag.url)
  
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Tag::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:Tag.url)
}

// optional string slug = 4;
void Tag::clear_slug() {
  slug_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Tag::slug() const {
  // @@protoc_insertion_point(field_get:Tag.slug)
  return slug_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Tag::set_slug(const ::std::string& value) {
  
  slug_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Tag.slug)
}
void Tag::set_slug(const char* value) {
  
  slug_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Tag.slug)
}
void Tag::set_slug(const char* value, size_t size) {
  
  slug_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Tag.slug)
}
::std::string* Tag::mutable_slug() {
  
  // @@protoc_insertion_point(field_mutable:Tag.slug)
  return slug_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Tag::release_slug() {
  // @@protoc_insertion_point(field_release:Tag.slug)
  
  return slug_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Tag::set_allocated_slug(::std::string* slug) {
  if (slug != NULL) {
    
  } else {
    
  }
  slug_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), slug);
  // @@protoc_insertion_point(field_set_allocated:Tag.slug)
}

// optional string description = 5;
void Tag::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Tag::description() const {
  // @@protoc_insertion_point(field_get:Tag.description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Tag::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Tag.description)
}
void Tag::set_description(const char* value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Tag.description)
}
void Tag::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Tag.description)
}
::std::string* Tag::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:Tag.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Tag::release_description() {
  // @@protoc_insertion_point(field_release:Tag.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Tag::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:Tag.description)
}

// optional int32 count = 6;
void Tag::clear_count() {
  count_ = 0;
}
::google::protobuf::int32 Tag::count() const {
  // @@protoc_insertion_point(field_get:Tag.count)
  return count_;
}
void Tag::set_count(::google::protobuf::int32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:Tag.count)
}

inline const Tag* Tag::internal_default_instance() {
  return &Tag_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImageDetail::kTitleFieldNumber;
const int ImageDetail::kWidthFieldNumber;
const int ImageDetail::kHeightFieldNumber;
const int ImageDetail::kMimeTypeFieldNumber;
const int ImageDetail::kAltTextFieldNumber;
const int ImageDetail::kSizesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImageDetail::ImageDetail()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_mainPage_2fcontent_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:ImageDetail)
}

void ImageDetail::InitAsDefaultInstance() {
}

ImageDetail::ImageDetail(const ImageDetail& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ImageDetail)
}

void ImageDetail::SharedCtor() {
  sizes_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  sizes_.SetEntryDescriptor(
      &::ImageDetail_SizesEntry_descriptor_);
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mime_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alt_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&width_, 0, reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_) + sizeof(height_));
  _cached_size_ = 0;
}

ImageDetail::~ImageDetail() {
  // @@protoc_insertion_point(destructor:ImageDetail)
  SharedDtor();
}

void ImageDetail::SharedDtor() {
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mime_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alt_text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ImageDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImageDetail_descriptor_;
}

const ImageDetail& ImageDetail::default_instance() {
  protobuf_InitDefaults_mainPage_2fcontent_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ImageDetail> ImageDetail_default_instance_;

ImageDetail* ImageDetail::New(::google::protobuf::Arena* arena) const {
  ImageDetail* n = new ImageDetail;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImageDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:ImageDetail)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ImageDetail, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ImageDetail*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(width_, height_);
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mime_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alt_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  sizes_.Clear();
}

bool ImageDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ImageDetail)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string title = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ImageDetail.title"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_width;
        break;
      }

      // optional int32 width = 2;
      case 2: {
        if (tag == 16) {
         parse_width:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_height;
        break;
      }

      // optional int32 height = 3;
      case 3: {
        if (tag == 24) {
         parse_height:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_mime_type;
        break;
      }

      // optional string mime_type = 4;
      case 4: {
        if (tag == 34) {
         parse_mime_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mime_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mime_type().data(), this->mime_type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ImageDetail.mime_type"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_alt_text;
        break;
      }

      // optional string alt_text = 5;
      case 5: {
        if (tag == 42) {
         parse_alt_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alt_text()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->alt_text().data(), this->alt_text().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ImageDetail.alt_text"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_sizes;
        break;
      }

      // map<string, .ImageSize> sizes = 6;
      case 6: {
        if (tag == 50) {
         parse_sizes:
          DO_(input->IncrementRecursionDepth());
         parse_loop_sizes:
          ImageDetail_SizesEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::ImageSize,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::ImageSize > > parser(&sizes_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ImageDetail.SizesEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_sizes;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ImageDetail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ImageDetail)
  return false;
#undef DO_
}

void ImageDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ImageDetail)
  // optional string title = 1;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ImageDetail.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->title(), output);
  }

  // optional int32 width = 2;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->width(), output);
  }

  // optional int32 height = 3;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->height(), output);
  }

  // optional string mime_type = 4;
  if (this->mime_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mime_type().data(), this->mime_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ImageDetail.mime_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->mime_type(), output);
  }

  // optional string alt_text = 5;
  if (this->alt_text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->alt_text().data(), this->alt_text().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ImageDetail.alt_text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->alt_text(), output);
  }

  // map<string, .ImageSize> sizes = 6;
  if (!this->sizes().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::ImageSize >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "ImageDetail.SizesEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->sizes().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->sizes().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::ImageSize >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::ImageSize >::const_iterator
          it = this->sizes().begin();
          it != this->sizes().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<ImageDetail_SizesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(sizes_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            6, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<ImageDetail_SizesEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::ImageSize >::const_iterator
          it = this->sizes().begin();
          it != this->sizes().end(); ++it) {
        entry.reset(sizes_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            6, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:ImageDetail)
}

::google::protobuf::uint8* ImageDetail::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ImageDetail)
  // optional string title = 1;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ImageDetail.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->title(), target);
  }

  // optional int32 width = 2;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->width(), target);
  }

  // optional int32 height = 3;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->height(), target);
  }

  // optional string mime_type = 4;
  if (this->mime_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mime_type().data(), this->mime_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ImageDetail.mime_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->mime_type(), target);
  }

  // optional string alt_text = 5;
  if (this->alt_text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->alt_text().data(), this->alt_text().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ImageDetail.alt_text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->alt_text(), target);
  }

  // map<string, .ImageSize> sizes = 6;
  if (!this->sizes().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::ImageSize >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "ImageDetail.SizesEntry.key");
      }
    };

    if (deterministic &&
        this->sizes().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->sizes().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::ImageSize >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::ImageSize >::const_iterator
          it = this->sizes().begin();
          it != this->sizes().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<ImageDetail_SizesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(sizes_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       6, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<ImageDetail_SizesEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::ImageSize >::const_iterator
          it = this->sizes().begin();
          it != this->sizes().end(); ++it) {
        entry.reset(sizes_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       6, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:ImageDetail)
  return target;
}

size_t ImageDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ImageDetail)
  size_t total_size = 0;

  // optional string title = 1;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->title());
  }

  // optional int32 width = 2;
  if (this->width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());
  }

  // optional int32 height = 3;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());
  }

  // optional string mime_type = 4;
  if (this->mime_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mime_type());
  }

  // optional string alt_text = 5;
  if (this->alt_text().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->alt_text());
  }

  // map<string, .ImageSize> sizes = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->sizes_size());
  {
    ::google::protobuf::scoped_ptr<ImageDetail_SizesEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::ImageSize >::const_iterator
        it = this->sizes().begin();
        it != this->sizes().end(); ++it) {
      entry.reset(sizes_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageDetail::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ImageDetail)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ImageDetail* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImageDetail>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ImageDetail)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ImageDetail)
    UnsafeMergeFrom(*source);
  }
}

void ImageDetail::MergeFrom(const ImageDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ImageDetail)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ImageDetail::UnsafeMergeFrom(const ImageDetail& from) {
  GOOGLE_DCHECK(&from != this);
  sizes_.MergeFrom(from.sizes_);
  if (from.title().size() > 0) {

    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.mime_type().size() > 0) {

    mime_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mime_type_);
  }
  if (from.alt_text().size() > 0) {

    alt_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.alt_text_);
  }
}

void ImageDetail::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ImageDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageDetail::CopyFrom(const ImageDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ImageDetail)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ImageDetail::IsInitialized() const {

  return true;
}

void ImageDetail::Swap(ImageDetail* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImageDetail::InternalSwap(ImageDetail* other) {
  title_.Swap(&other->title_);
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  mime_type_.Swap(&other->mime_type_);
  alt_text_.Swap(&other->alt_text_);
  sizes_.Swap(&other->sizes_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImageDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImageDetail_descriptor_;
  metadata.reflection = ImageDetail_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImageDetail

// optional string title = 1;
void ImageDetail::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ImageDetail::title() const {
  // @@protoc_insertion_point(field_get:ImageDetail.title)
  return title_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ImageDetail::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ImageDetail.title)
}
void ImageDetail::set_title(const char* value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ImageDetail.title)
}
void ImageDetail::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ImageDetail.title)
}
::std::string* ImageDetail::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:ImageDetail.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ImageDetail::release_title() {
  // @@protoc_insertion_point(field_release:ImageDetail.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ImageDetail::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:ImageDetail.title)
}

// optional int32 width = 2;
void ImageDetail::clear_width() {
  width_ = 0;
}
::google::protobuf::int32 ImageDetail::width() const {
  // @@protoc_insertion_point(field_get:ImageDetail.width)
  return width_;
}
void ImageDetail::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:ImageDetail.width)
}

// optional int32 height = 3;
void ImageDetail::clear_height() {
  height_ = 0;
}
::google::protobuf::int32 ImageDetail::height() const {
  // @@protoc_insertion_point(field_get:ImageDetail.height)
  return height_;
}
void ImageDetail::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:ImageDetail.height)
}

// optional string mime_type = 4;
void ImageDetail::clear_mime_type() {
  mime_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ImageDetail::mime_type() const {
  // @@protoc_insertion_point(field_get:ImageDetail.mime_type)
  return mime_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ImageDetail::set_mime_type(const ::std::string& value) {
  
  mime_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ImageDetail.mime_type)
}
void ImageDetail::set_mime_type(const char* value) {
  
  mime_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ImageDetail.mime_type)
}
void ImageDetail::set_mime_type(const char* value, size_t size) {
  
  mime_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ImageDetail.mime_type)
}
::std::string* ImageDetail::mutable_mime_type() {
  
  // @@protoc_insertion_point(field_mutable:ImageDetail.mime_type)
  return mime_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ImageDetail::release_mime_type() {
  // @@protoc_insertion_point(field_release:ImageDetail.mime_type)
  
  return mime_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ImageDetail::set_allocated_mime_type(::std::string* mime_type) {
  if (mime_type != NULL) {
    
  } else {
    
  }
  mime_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mime_type);
  // @@protoc_insertion_point(field_set_allocated:ImageDetail.mime_type)
}

// optional string alt_text = 5;
void ImageDetail::clear_alt_text() {
  alt_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ImageDetail::alt_text() const {
  // @@protoc_insertion_point(field_get:ImageDetail.alt_text)
  return alt_text_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ImageDetail::set_alt_text(const ::std::string& value) {
  
  alt_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ImageDetail.alt_text)
}
void ImageDetail::set_alt_text(const char* value) {
  
  alt_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ImageDetail.alt_text)
}
void ImageDetail::set_alt_text(const char* value, size_t size) {
  
  alt_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ImageDetail.alt_text)
}
::std::string* ImageDetail::mutable_alt_text() {
  
  // @@protoc_insertion_point(field_mutable:ImageDetail.alt_text)
  return alt_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ImageDetail::release_alt_text() {
  // @@protoc_insertion_point(field_release:ImageDetail.alt_text)
  
  return alt_text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ImageDetail::set_allocated_alt_text(::std::string* alt_text) {
  if (alt_text != NULL) {
    
  } else {
    
  }
  alt_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alt_text);
  // @@protoc_insertion_point(field_set_allocated:ImageDetail.alt_text)
}

// map<string, .ImageSize> sizes = 6;
int ImageDetail::sizes_size() const {
  return sizes_.size();
}
void ImageDetail::clear_sizes() {
  sizes_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::ImageSize >&
ImageDetail::sizes() const {
  // @@protoc_insertion_point(field_map:ImageDetail.sizes)
  return sizes_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::ImageSize >*
ImageDetail::mutable_sizes() {
  // @@protoc_insertion_point(field_mutable_map:ImageDetail.sizes)
  return sizes_.MutableMap();
}

inline const ImageDetail* ImageDetail::internal_default_instance() {
  return &ImageDetail_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImageSize::kWidthFieldNumber;
const int ImageSize::kHeightFieldNumber;
const int ImageSize::kSourceUrlFieldNumber;
const int ImageSize::kMimeTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImageSize::ImageSize()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_mainPage_2fcontent_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:ImageSize)
}

void ImageSize::InitAsDefaultInstance() {
}

ImageSize::ImageSize(const ImageSize& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ImageSize)
}

void ImageSize::SharedCtor() {
  source_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mime_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&width_, 0, reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_) + sizeof(height_));
  _cached_size_ = 0;
}

ImageSize::~ImageSize() {
  // @@protoc_insertion_point(destructor:ImageSize)
  SharedDtor();
}

void ImageSize::SharedDtor() {
  source_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mime_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ImageSize::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageSize::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImageSize_descriptor_;
}

const ImageSize& ImageSize::default_instance() {
  protobuf_InitDefaults_mainPage_2fcontent_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ImageSize> ImageSize_default_instance_;

ImageSize* ImageSize::New(::google::protobuf::Arena* arena) const {
  ImageSize* n = new ImageSize;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImageSize::Clear() {
// @@protoc_insertion_point(message_clear_start:ImageSize)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ImageSize, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ImageSize*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(width_, height_);
  source_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mime_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool ImageSize::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ImageSize)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 width = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_height;
        break;
      }

      // optional int32 height = 2;
      case 2: {
        if (tag == 16) {
         parse_height:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_source_url;
        break;
      }

      // optional string source_url = 3;
      case 3: {
        if (tag == 26) {
         parse_source_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->source_url().data(), this->source_url().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ImageSize.source_url"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_mime_type;
        break;
      }

      // optional string mime_type = 4;
      case 4: {
        if (tag == 34) {
         parse_mime_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mime_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mime_type().data(), this->mime_type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ImageSize.mime_type"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ImageSize)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ImageSize)
  return false;
#undef DO_
}

void ImageSize::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ImageSize)
  // optional int32 width = 1;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->width(), output);
  }

  // optional int32 height = 2;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->height(), output);
  }

  // optional string source_url = 3;
  if (this->source_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_url().data(), this->source_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ImageSize.source_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->source_url(), output);
  }

  // optional string mime_type = 4;
  if (this->mime_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mime_type().data(), this->mime_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ImageSize.mime_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->mime_type(), output);
  }

  // @@protoc_insertion_point(serialize_end:ImageSize)
}

::google::protobuf::uint8* ImageSize::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ImageSize)
  // optional int32 width = 1;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->width(), target);
  }

  // optional int32 height = 2;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->height(), target);
  }

  // optional string source_url = 3;
  if (this->source_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_url().data(), this->source_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ImageSize.source_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->source_url(), target);
  }

  // optional string mime_type = 4;
  if (this->mime_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mime_type().data(), this->mime_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ImageSize.mime_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->mime_type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ImageSize)
  return target;
}

size_t ImageSize::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ImageSize)
  size_t total_size = 0;

  // optional int32 width = 1;
  if (this->width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());
  }

  // optional int32 height = 2;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());
  }

  // optional string source_url = 3;
  if (this->source_url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->source_url());
  }

  // optional string mime_type = 4;
  if (this->mime_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mime_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageSize::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ImageSize)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ImageSize* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImageSize>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ImageSize)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ImageSize)
    UnsafeMergeFrom(*source);
  }
}

void ImageSize::MergeFrom(const ImageSize& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ImageSize)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ImageSize::UnsafeMergeFrom(const ImageSize& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.source_url().size() > 0) {

    source_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_url_);
  }
  if (from.mime_type().size() > 0) {

    mime_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mime_type_);
  }
}

void ImageSize::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ImageSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageSize::CopyFrom(const ImageSize& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ImageSize)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ImageSize::IsInitialized() const {

  return true;
}

void ImageSize::Swap(ImageSize* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImageSize::InternalSwap(ImageSize* other) {
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  source_url_.Swap(&other->source_url_);
  mime_type_.Swap(&other->mime_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImageSize::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImageSize_descriptor_;
  metadata.reflection = ImageSize_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImageSize

// optional int32 width = 1;
void ImageSize::clear_width() {
  width_ = 0;
}
::google::protobuf::int32 ImageSize::width() const {
  // @@protoc_insertion_point(field_get:ImageSize.width)
  return width_;
}
void ImageSize::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:ImageSize.width)
}

// optional int32 height = 2;
void ImageSize::clear_height() {
  height_ = 0;
}
::google::protobuf::int32 ImageSize::height() const {
  // @@protoc_insertion_point(field_get:ImageSize.height)
  return height_;
}
void ImageSize::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:ImageSize.height)
}

// optional string source_url = 3;
void ImageSize::clear_source_url() {
  source_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ImageSize::source_url() const {
  // @@protoc_insertion_point(field_get:ImageSize.source_url)
  return source_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ImageSize::set_source_url(const ::std::string& value) {
  
  source_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ImageSize.source_url)
}
void ImageSize::set_source_url(const char* value) {
  
  source_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ImageSize.source_url)
}
void ImageSize::set_source_url(const char* value, size_t size) {
  
  source_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ImageSize.source_url)
}
::std::string* ImageSize::mutable_source_url() {
  
  // @@protoc_insertion_point(field_mutable:ImageSize.source_url)
  return source_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ImageSize::release_source_url() {
  // @@protoc_insertion_point(field_release:ImageSize.source_url)
  
  return source_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ImageSize::set_allocated_source_url(::std::string* source_url) {
  if (source_url != NULL) {
    
  } else {
    
  }
  source_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_url);
  // @@protoc_insertion_point(field_set_allocated:ImageSize.source_url)
}

// optional string mime_type = 4;
void ImageSize::clear_mime_type() {
  mime_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ImageSize::mime_type() const {
  // @@protoc_insertion_point(field_get:ImageSize.mime_type)
  return mime_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ImageSize::set_mime_type(const ::std::string& value) {
  
  mime_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ImageSize.mime_type)
}
void ImageSize::set_mime_type(const char* value) {
  
  mime_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ImageSize.mime_type)
}
void ImageSize::set_mime_type(const char* value, size_t size) {
  
  mime_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ImageSize.mime_type)
}
::std::string* ImageSize::mutable_mime_type() {
  
  // @@protoc_insertion_point(field_mutable:ImageSize.mime_type)
  return mime_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ImageSize::release_mime_type() {
  // @@protoc_insertion_point(field_release:ImageSize.mime_type)
  
  return mime_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ImageSize::set_allocated_mime_type(::std::string* mime_type) {
  if (mime_type != NULL) {
    
  } else {
    
  }
  mime_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mime_type);
  // @@protoc_insertion_point(field_set_allocated:ImageSize.mime_type)
}

inline const ImageSize* ImageSize::internal_default_instance() {
  return &ImageSize_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
