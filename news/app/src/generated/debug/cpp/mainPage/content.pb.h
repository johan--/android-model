// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mainPage/content.proto

#ifndef PROTOBUF_mainPage_2fcontent_2eproto__INCLUDED
#define PROTOBUF_mainPage_2fcontent_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/map.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_mainPage_2fcontent_2eproto();
void protobuf_InitDefaults_mainPage_2fcontent_2eproto();
void protobuf_AssignDesc_mainPage_2fcontent_2eproto();
void protobuf_ShutdownFile_mainPage_2fcontent_2eproto();

class Category;
class ContentDetail;
class ContentRequest;
class ImageDetail;
class ImageSize;
class Tag;

// ===================================================================

class ContentRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ContentRequest) */ {
 public:
  ContentRequest();
  virtual ~ContentRequest();

  ContentRequest(const ContentRequest& from);

  inline ContentRequest& operator=(const ContentRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ContentRequest& default_instance();

  static const ContentRequest* internal_default_instance();

  void Swap(ContentRequest* other);

  // implements Message ----------------------------------------------

  inline ContentRequest* New() const { return New(NULL); }

  ContentRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ContentRequest& from);
  void MergeFrom(const ContentRequest& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ContentRequest* other);
  void UnsafeMergeFrom(const ContentRequest& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string tag = 1;
  int tag_size() const;
  void clear_tag();
  static const int kTagFieldNumber = 1;
  const ::std::string& tag(int index) const;
  ::std::string* mutable_tag(int index);
  void set_tag(int index, const ::std::string& value);
  void set_tag(int index, const char* value);
  void set_tag(int index, const char* value, size_t size);
  ::std::string* add_tag();
  void add_tag(const ::std::string& value);
  void add_tag(const char* value);
  void add_tag(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& tag() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_tag();

  // repeated string categories = 2;
  int categories_size() const;
  void clear_categories();
  static const int kCategoriesFieldNumber = 2;
  const ::std::string& categories(int index) const;
  ::std::string* mutable_categories(int index);
  void set_categories(int index, const ::std::string& value);
  void set_categories(int index, const char* value);
  void set_categories(int index, const char* value, size_t size);
  ::std::string* add_categories();
  void add_categories(const ::std::string& value);
  void add_categories(const char* value);
  void add_categories(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& categories() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_categories();

  // optional int32 page = 3;
  void clear_page();
  static const int kPageFieldNumber = 3;
  ::google::protobuf::int32 page() const;
  void set_page(::google::protobuf::int32 value);

  // optional int32 page_size = 4;
  void clear_page_size();
  static const int kPageSizeFieldNumber = 4;
  ::google::protobuf::int32 page_size() const;
  void set_page_size(::google::protobuf::int32 value);

  // optional string query = 5;
  void clear_query();
  static const int kQueryFieldNumber = 5;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // @@protoc_insertion_point(class_scope:ContentRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> tag_;
  ::google::protobuf::RepeatedPtrField< ::std::string> categories_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  ::google::protobuf::int32 page_;
  ::google::protobuf::int32 page_size_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_mainPage_2fcontent_2eproto_impl();
  friend void  protobuf_AddDesc_mainPage_2fcontent_2eproto_impl();
  friend void protobuf_AssignDesc_mainPage_2fcontent_2eproto();
  friend void protobuf_ShutdownFile_mainPage_2fcontent_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ContentRequest> ContentRequest_default_instance_;

// -------------------------------------------------------------------

class ContentDetail : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ContentDetail) */ {
 public:
  ContentDetail();
  virtual ~ContentDetail();

  ContentDetail(const ContentDetail& from);

  inline ContentDetail& operator=(const ContentDetail& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ContentDetail& default_instance();

  static const ContentDetail* internal_default_instance();

  void Swap(ContentDetail* other);

  // implements Message ----------------------------------------------

  inline ContentDetail* New() const { return New(NULL); }

  ContentDetail* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ContentDetail& from);
  void MergeFrom(const ContentDetail& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ContentDetail* other);
  void UnsafeMergeFrom(const ContentDetail& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional string title = 2;
  void clear_title();
  static const int kTitleFieldNumber = 2;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // optional string url = 3;
  void clear_url();
  static const int kUrlFieldNumber = 3;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // optional string date = 4;
  void clear_date();
  static const int kDateFieldNumber = 4;
  const ::std::string& date() const;
  void set_date(const ::std::string& value);
  void set_date(const char* value);
  void set_date(const char* value, size_t size);
  ::std::string* mutable_date();
  ::std::string* release_date();
  void set_allocated_date(::std::string* date);

  // optional string excerpt = 5;
  void clear_excerpt();
  static const int kExcerptFieldNumber = 5;
  const ::std::string& excerpt() const;
  void set_excerpt(const ::std::string& value);
  void set_excerpt(const char* value);
  void set_excerpt(const char* value, size_t size);
  ::std::string* mutable_excerpt();
  ::std::string* release_excerpt();
  void set_allocated_excerpt(::std::string* excerpt);

  // repeated .Category categories = 6;
  int categories_size() const;
  void clear_categories();
  static const int kCategoriesFieldNumber = 6;
  const ::Category& categories(int index) const;
  ::Category* mutable_categories(int index);
  ::Category* add_categories();
  ::google::protobuf::RepeatedPtrField< ::Category >*
      mutable_categories();
  const ::google::protobuf::RepeatedPtrField< ::Category >&
      categories() const;

  // repeated .Tag tags = 7;
  int tags_size() const;
  void clear_tags();
  static const int kTagsFieldNumber = 7;
  const ::Tag& tags(int index) const;
  ::Tag* mutable_tags(int index);
  ::Tag* add_tags();
  ::google::protobuf::RepeatedPtrField< ::Tag >*
      mutable_tags();
  const ::google::protobuf::RepeatedPtrField< ::Tag >&
      tags() const;

  // repeated .ImageDetail images = 8;
  int images_size() const;
  void clear_images();
  static const int kImagesFieldNumber = 8;
  const ::ImageDetail& images(int index) const;
  ::ImageDetail* mutable_images(int index);
  ::ImageDetail* add_images();
  ::google::protobuf::RepeatedPtrField< ::ImageDetail >*
      mutable_images();
  const ::google::protobuf::RepeatedPtrField< ::ImageDetail >&
      images() const;

  // @@protoc_insertion_point(class_scope:ContentDetail)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Category > categories_;
  ::google::protobuf::RepeatedPtrField< ::Tag > tags_;
  ::google::protobuf::RepeatedPtrField< ::ImageDetail > images_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::internal::ArenaStringPtr date_;
  ::google::protobuf::internal::ArenaStringPtr excerpt_;
  ::google::protobuf::int32 id_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_mainPage_2fcontent_2eproto_impl();
  friend void  protobuf_AddDesc_mainPage_2fcontent_2eproto_impl();
  friend void protobuf_AssignDesc_mainPage_2fcontent_2eproto();
  friend void protobuf_ShutdownFile_mainPage_2fcontent_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ContentDetail> ContentDetail_default_instance_;

// -------------------------------------------------------------------

class Category : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Category) */ {
 public:
  Category();
  virtual ~Category();

  Category(const Category& from);

  inline Category& operator=(const Category& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Category& default_instance();

  static const Category* internal_default_instance();

  void Swap(Category* other);

  // implements Message ----------------------------------------------

  inline Category* New() const { return New(NULL); }

  Category* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Category& from);
  void MergeFrom(const Category& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Category* other);
  void UnsafeMergeFrom(const Category& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string url = 3;
  void clear_url();
  static const int kUrlFieldNumber = 3;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // optional string slug = 4;
  void clear_slug();
  static const int kSlugFieldNumber = 4;
  const ::std::string& slug() const;
  void set_slug(const ::std::string& value);
  void set_slug(const char* value);
  void set_slug(const char* value, size_t size);
  ::std::string* mutable_slug();
  ::std::string* release_slug();
  void set_allocated_slug(::std::string* slug);

  // optional string description = 5;
  void clear_description();
  static const int kDescriptionFieldNumber = 5;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // optional int32 count = 6;
  void clear_count();
  static const int kCountFieldNumber = 6;
  ::google::protobuf::int32 count() const;
  void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Category)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::internal::ArenaStringPtr slug_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 count_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_mainPage_2fcontent_2eproto_impl();
  friend void  protobuf_AddDesc_mainPage_2fcontent_2eproto_impl();
  friend void protobuf_AssignDesc_mainPage_2fcontent_2eproto();
  friend void protobuf_ShutdownFile_mainPage_2fcontent_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Category> Category_default_instance_;

// -------------------------------------------------------------------

class Tag : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Tag) */ {
 public:
  Tag();
  virtual ~Tag();

  Tag(const Tag& from);

  inline Tag& operator=(const Tag& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Tag& default_instance();

  static const Tag* internal_default_instance();

  void Swap(Tag* other);

  // implements Message ----------------------------------------------

  inline Tag* New() const { return New(NULL); }

  Tag* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Tag& from);
  void MergeFrom(const Tag& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Tag* other);
  void UnsafeMergeFrom(const Tag& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string url = 3;
  void clear_url();
  static const int kUrlFieldNumber = 3;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // optional string slug = 4;
  void clear_slug();
  static const int kSlugFieldNumber = 4;
  const ::std::string& slug() const;
  void set_slug(const ::std::string& value);
  void set_slug(const char* value);
  void set_slug(const char* value, size_t size);
  ::std::string* mutable_slug();
  ::std::string* release_slug();
  void set_allocated_slug(::std::string* slug);

  // optional string description = 5;
  void clear_description();
  static const int kDescriptionFieldNumber = 5;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // optional int32 count = 6;
  void clear_count();
  static const int kCountFieldNumber = 6;
  ::google::protobuf::int32 count() const;
  void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Tag)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::internal::ArenaStringPtr slug_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 count_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_mainPage_2fcontent_2eproto_impl();
  friend void  protobuf_AddDesc_mainPage_2fcontent_2eproto_impl();
  friend void protobuf_AssignDesc_mainPage_2fcontent_2eproto();
  friend void protobuf_ShutdownFile_mainPage_2fcontent_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Tag> Tag_default_instance_;

// -------------------------------------------------------------------

class ImageDetail : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ImageDetail) */ {
 public:
  ImageDetail();
  virtual ~ImageDetail();

  ImageDetail(const ImageDetail& from);

  inline ImageDetail& operator=(const ImageDetail& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ImageDetail& default_instance();

  static const ImageDetail* internal_default_instance();

  void Swap(ImageDetail* other);

  // implements Message ----------------------------------------------

  inline ImageDetail* New() const { return New(NULL); }

  ImageDetail* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ImageDetail& from);
  void MergeFrom(const ImageDetail& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ImageDetail* other);
  void UnsafeMergeFrom(const ImageDetail& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // optional string title = 1;
  void clear_title();
  static const int kTitleFieldNumber = 1;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // optional int32 width = 2;
  void clear_width();
  static const int kWidthFieldNumber = 2;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // optional int32 height = 3;
  void clear_height();
  static const int kHeightFieldNumber = 3;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // optional string mime_type = 4;
  void clear_mime_type();
  static const int kMimeTypeFieldNumber = 4;
  const ::std::string& mime_type() const;
  void set_mime_type(const ::std::string& value);
  void set_mime_type(const char* value);
  void set_mime_type(const char* value, size_t size);
  ::std::string* mutable_mime_type();
  ::std::string* release_mime_type();
  void set_allocated_mime_type(::std::string* mime_type);

  // optional string alt_text = 5;
  void clear_alt_text();
  static const int kAltTextFieldNumber = 5;
  const ::std::string& alt_text() const;
  void set_alt_text(const ::std::string& value);
  void set_alt_text(const char* value);
  void set_alt_text(const char* value, size_t size);
  ::std::string* mutable_alt_text();
  ::std::string* release_alt_text();
  void set_allocated_alt_text(::std::string* alt_text);

  // map<string, .ImageSize> sizes = 6;
  int sizes_size() const;
  void clear_sizes();
  static const int kSizesFieldNumber = 6;
  const ::google::protobuf::Map< ::std::string, ::ImageSize >&
      sizes() const;
  ::google::protobuf::Map< ::std::string, ::ImageSize >*
      mutable_sizes();

  // @@protoc_insertion_point(class_scope:ImageDetail)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::ImageSize,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 >
      ImageDetail_SizesEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::ImageSize,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > sizes_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr mime_type_;
  ::google::protobuf::internal::ArenaStringPtr alt_text_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_mainPage_2fcontent_2eproto_impl();
  friend void  protobuf_AddDesc_mainPage_2fcontent_2eproto_impl();
  friend void protobuf_AssignDesc_mainPage_2fcontent_2eproto();
  friend void protobuf_ShutdownFile_mainPage_2fcontent_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ImageDetail> ImageDetail_default_instance_;

// -------------------------------------------------------------------

class ImageSize : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ImageSize) */ {
 public:
  ImageSize();
  virtual ~ImageSize();

  ImageSize(const ImageSize& from);

  inline ImageSize& operator=(const ImageSize& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ImageSize& default_instance();

  static const ImageSize* internal_default_instance();

  void Swap(ImageSize* other);

  // implements Message ----------------------------------------------

  inline ImageSize* New() const { return New(NULL); }

  ImageSize* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ImageSize& from);
  void MergeFrom(const ImageSize& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ImageSize* other);
  void UnsafeMergeFrom(const ImageSize& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 width = 1;
  void clear_width();
  static const int kWidthFieldNumber = 1;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // optional int32 height = 2;
  void clear_height();
  static const int kHeightFieldNumber = 2;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // optional string source_url = 3;
  void clear_source_url();
  static const int kSourceUrlFieldNumber = 3;
  const ::std::string& source_url() const;
  void set_source_url(const ::std::string& value);
  void set_source_url(const char* value);
  void set_source_url(const char* value, size_t size);
  ::std::string* mutable_source_url();
  ::std::string* release_source_url();
  void set_allocated_source_url(::std::string* source_url);

  // optional string mime_type = 4;
  void clear_mime_type();
  static const int kMimeTypeFieldNumber = 4;
  const ::std::string& mime_type() const;
  void set_mime_type(const ::std::string& value);
  void set_mime_type(const char* value);
  void set_mime_type(const char* value, size_t size);
  ::std::string* mutable_mime_type();
  ::std::string* release_mime_type();
  void set_allocated_mime_type(::std::string* mime_type);

  // @@protoc_insertion_point(class_scope:ImageSize)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr source_url_;
  ::google::protobuf::internal::ArenaStringPtr mime_type_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_mainPage_2fcontent_2eproto_impl();
  friend void  protobuf_AddDesc_mainPage_2fcontent_2eproto_impl();
  friend void protobuf_AssignDesc_mainPage_2fcontent_2eproto();
  friend void protobuf_ShutdownFile_mainPage_2fcontent_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ImageSize> ImageSize_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ContentRequest

// repeated string tag = 1;
inline int ContentRequest::tag_size() const {
  return tag_.size();
}
inline void ContentRequest::clear_tag() {
  tag_.Clear();
}
inline const ::std::string& ContentRequest::tag(int index) const {
  // @@protoc_insertion_point(field_get:ContentRequest.tag)
  return tag_.Get(index);
}
inline ::std::string* ContentRequest::mutable_tag(int index) {
  // @@protoc_insertion_point(field_mutable:ContentRequest.tag)
  return tag_.Mutable(index);
}
inline void ContentRequest::set_tag(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ContentRequest.tag)
  tag_.Mutable(index)->assign(value);
}
inline void ContentRequest::set_tag(int index, const char* value) {
  tag_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ContentRequest.tag)
}
inline void ContentRequest::set_tag(int index, const char* value, size_t size) {
  tag_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ContentRequest.tag)
}
inline ::std::string* ContentRequest::add_tag() {
  // @@protoc_insertion_point(field_add_mutable:ContentRequest.tag)
  return tag_.Add();
}
inline void ContentRequest::add_tag(const ::std::string& value) {
  tag_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ContentRequest.tag)
}
inline void ContentRequest::add_tag(const char* value) {
  tag_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ContentRequest.tag)
}
inline void ContentRequest::add_tag(const char* value, size_t size) {
  tag_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ContentRequest.tag)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ContentRequest::tag() const {
  // @@protoc_insertion_point(field_list:ContentRequest.tag)
  return tag_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ContentRequest::mutable_tag() {
  // @@protoc_insertion_point(field_mutable_list:ContentRequest.tag)
  return &tag_;
}

// repeated string categories = 2;
inline int ContentRequest::categories_size() const {
  return categories_.size();
}
inline void ContentRequest::clear_categories() {
  categories_.Clear();
}
inline const ::std::string& ContentRequest::categories(int index) const {
  // @@protoc_insertion_point(field_get:ContentRequest.categories)
  return categories_.Get(index);
}
inline ::std::string* ContentRequest::mutable_categories(int index) {
  // @@protoc_insertion_point(field_mutable:ContentRequest.categories)
  return categories_.Mutable(index);
}
inline void ContentRequest::set_categories(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ContentRequest.categories)
  categories_.Mutable(index)->assign(value);
}
inline void ContentRequest::set_categories(int index, const char* value) {
  categories_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ContentRequest.categories)
}
inline void ContentRequest::set_categories(int index, const char* value, size_t size) {
  categories_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ContentRequest.categories)
}
inline ::std::string* ContentRequest::add_categories() {
  // @@protoc_insertion_point(field_add_mutable:ContentRequest.categories)
  return categories_.Add();
}
inline void ContentRequest::add_categories(const ::std::string& value) {
  categories_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ContentRequest.categories)
}
inline void ContentRequest::add_categories(const char* value) {
  categories_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ContentRequest.categories)
}
inline void ContentRequest::add_categories(const char* value, size_t size) {
  categories_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ContentRequest.categories)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ContentRequest::categories() const {
  // @@protoc_insertion_point(field_list:ContentRequest.categories)
  return categories_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ContentRequest::mutable_categories() {
  // @@protoc_insertion_point(field_mutable_list:ContentRequest.categories)
  return &categories_;
}

// optional int32 page = 3;
inline void ContentRequest::clear_page() {
  page_ = 0;
}
inline ::google::protobuf::int32 ContentRequest::page() const {
  // @@protoc_insertion_point(field_get:ContentRequest.page)
  return page_;
}
inline void ContentRequest::set_page(::google::protobuf::int32 value) {
  
  page_ = value;
  // @@protoc_insertion_point(field_set:ContentRequest.page)
}

// optional int32 page_size = 4;
inline void ContentRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::google::protobuf::int32 ContentRequest::page_size() const {
  // @@protoc_insertion_point(field_get:ContentRequest.page_size)
  return page_size_;
}
inline void ContentRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:ContentRequest.page_size)
}

// optional string query = 5;
inline void ContentRequest::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ContentRequest::query() const {
  // @@protoc_insertion_point(field_get:ContentRequest.query)
  return query_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContentRequest::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ContentRequest.query)
}
inline void ContentRequest::set_query(const char* value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ContentRequest.query)
}
inline void ContentRequest::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ContentRequest.query)
}
inline ::std::string* ContentRequest::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:ContentRequest.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContentRequest::release_query() {
  // @@protoc_insertion_point(field_release:ContentRequest.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContentRequest::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:ContentRequest.query)
}

inline const ContentRequest* ContentRequest::internal_default_instance() {
  return &ContentRequest_default_instance_.get();
}
// -------------------------------------------------------------------

// ContentDetail

// optional int32 id = 1;
inline void ContentDetail::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 ContentDetail::id() const {
  // @@protoc_insertion_point(field_get:ContentDetail.id)
  return id_;
}
inline void ContentDetail::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:ContentDetail.id)
}

// optional string title = 2;
inline void ContentDetail::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ContentDetail::title() const {
  // @@protoc_insertion_point(field_get:ContentDetail.title)
  return title_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContentDetail::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ContentDetail.title)
}
inline void ContentDetail::set_title(const char* value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ContentDetail.title)
}
inline void ContentDetail::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ContentDetail.title)
}
inline ::std::string* ContentDetail::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:ContentDetail.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContentDetail::release_title() {
  // @@protoc_insertion_point(field_release:ContentDetail.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContentDetail::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:ContentDetail.title)
}

// optional string url = 3;
inline void ContentDetail::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ContentDetail::url() const {
  // @@protoc_insertion_point(field_get:ContentDetail.url)
  return url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContentDetail::set_url(const ::std::string& value) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ContentDetail.url)
}
inline void ContentDetail::set_url(const char* value) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ContentDetail.url)
}
inline void ContentDetail::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ContentDetail.url)
}
inline ::std::string* ContentDetail::mutable_url() {
  
  // @@protoc_insertion_point(field_mutable:ContentDetail.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContentDetail::release_url() {
  // @@protoc_insertion_point(field_release:ContentDetail.url)
  
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContentDetail::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ContentDetail.url)
}

// optional string date = 4;
inline void ContentDetail::clear_date() {
  date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ContentDetail::date() const {
  // @@protoc_insertion_point(field_get:ContentDetail.date)
  return date_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContentDetail::set_date(const ::std::string& value) {
  
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ContentDetail.date)
}
inline void ContentDetail::set_date(const char* value) {
  
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ContentDetail.date)
}
inline void ContentDetail::set_date(const char* value, size_t size) {
  
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ContentDetail.date)
}
inline ::std::string* ContentDetail::mutable_date() {
  
  // @@protoc_insertion_point(field_mutable:ContentDetail.date)
  return date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContentDetail::release_date() {
  // @@protoc_insertion_point(field_release:ContentDetail.date)
  
  return date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContentDetail::set_allocated_date(::std::string* date) {
  if (date != NULL) {
    
  } else {
    
  }
  date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), date);
  // @@protoc_insertion_point(field_set_allocated:ContentDetail.date)
}

// optional string excerpt = 5;
inline void ContentDetail::clear_excerpt() {
  excerpt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ContentDetail::excerpt() const {
  // @@protoc_insertion_point(field_get:ContentDetail.excerpt)
  return excerpt_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContentDetail::set_excerpt(const ::std::string& value) {
  
  excerpt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ContentDetail.excerpt)
}
inline void ContentDetail::set_excerpt(const char* value) {
  
  excerpt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ContentDetail.excerpt)
}
inline void ContentDetail::set_excerpt(const char* value, size_t size) {
  
  excerpt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ContentDetail.excerpt)
}
inline ::std::string* ContentDetail::mutable_excerpt() {
  
  // @@protoc_insertion_point(field_mutable:ContentDetail.excerpt)
  return excerpt_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContentDetail::release_excerpt() {
  // @@protoc_insertion_point(field_release:ContentDetail.excerpt)
  
  return excerpt_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContentDetail::set_allocated_excerpt(::std::string* excerpt) {
  if (excerpt != NULL) {
    
  } else {
    
  }
  excerpt_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), excerpt);
  // @@protoc_insertion_point(field_set_allocated:ContentDetail.excerpt)
}

// repeated .Category categories = 6;
inline int ContentDetail::categories_size() const {
  return categories_.size();
}
inline void ContentDetail::clear_categories() {
  categories_.Clear();
}
inline const ::Category& ContentDetail::categories(int index) const {
  // @@protoc_insertion_point(field_get:ContentDetail.categories)
  return categories_.Get(index);
}
inline ::Category* ContentDetail::mutable_categories(int index) {
  // @@protoc_insertion_point(field_mutable:ContentDetail.categories)
  return categories_.Mutable(index);
}
inline ::Category* ContentDetail::add_categories() {
  // @@protoc_insertion_point(field_add:ContentDetail.categories)
  return categories_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Category >*
ContentDetail::mutable_categories() {
  // @@protoc_insertion_point(field_mutable_list:ContentDetail.categories)
  return &categories_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Category >&
ContentDetail::categories() const {
  // @@protoc_insertion_point(field_list:ContentDetail.categories)
  return categories_;
}

// repeated .Tag tags = 7;
inline int ContentDetail::tags_size() const {
  return tags_.size();
}
inline void ContentDetail::clear_tags() {
  tags_.Clear();
}
inline const ::Tag& ContentDetail::tags(int index) const {
  // @@protoc_insertion_point(field_get:ContentDetail.tags)
  return tags_.Get(index);
}
inline ::Tag* ContentDetail::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:ContentDetail.tags)
  return tags_.Mutable(index);
}
inline ::Tag* ContentDetail::add_tags() {
  // @@protoc_insertion_point(field_add:ContentDetail.tags)
  return tags_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Tag >*
ContentDetail::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:ContentDetail.tags)
  return &tags_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Tag >&
ContentDetail::tags() const {
  // @@protoc_insertion_point(field_list:ContentDetail.tags)
  return tags_;
}

// repeated .ImageDetail images = 8;
inline int ContentDetail::images_size() const {
  return images_.size();
}
inline void ContentDetail::clear_images() {
  images_.Clear();
}
inline const ::ImageDetail& ContentDetail::images(int index) const {
  // @@protoc_insertion_point(field_get:ContentDetail.images)
  return images_.Get(index);
}
inline ::ImageDetail* ContentDetail::mutable_images(int index) {
  // @@protoc_insertion_point(field_mutable:ContentDetail.images)
  return images_.Mutable(index);
}
inline ::ImageDetail* ContentDetail::add_images() {
  // @@protoc_insertion_point(field_add:ContentDetail.images)
  return images_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ImageDetail >*
ContentDetail::mutable_images() {
  // @@protoc_insertion_point(field_mutable_list:ContentDetail.images)
  return &images_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ImageDetail >&
ContentDetail::images() const {
  // @@protoc_insertion_point(field_list:ContentDetail.images)
  return images_;
}

inline const ContentDetail* ContentDetail::internal_default_instance() {
  return &ContentDetail_default_instance_.get();
}
// -------------------------------------------------------------------

// Category

// optional int32 id = 1;
inline void Category::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 Category::id() const {
  // @@protoc_insertion_point(field_get:Category.id)
  return id_;
}
inline void Category::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Category.id)
}

// optional string name = 2;
inline void Category::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Category::name() const {
  // @@protoc_insertion_point(field_get:Category.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Category::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Category.name)
}
inline void Category::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Category.name)
}
inline void Category::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Category.name)
}
inline ::std::string* Category::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Category.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Category::release_name() {
  // @@protoc_insertion_point(field_release:Category.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Category::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Category.name)
}

// optional string url = 3;
inline void Category::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Category::url() const {
  // @@protoc_insertion_point(field_get:Category.url)
  return url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Category::set_url(const ::std::string& value) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Category.url)
}
inline void Category::set_url(const char* value) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Category.url)
}
inline void Category::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Category.url)
}
inline ::std::string* Category::mutable_url() {
  
  // @@protoc_insertion_point(field_mutable:Category.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Category::release_url() {
  // @@protoc_insertion_point(field_release:Category.url)
  
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Category::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:Category.url)
}

// optional string slug = 4;
inline void Category::clear_slug() {
  slug_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Category::slug() const {
  // @@protoc_insertion_point(field_get:Category.slug)
  return slug_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Category::set_slug(const ::std::string& value) {
  
  slug_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Category.slug)
}
inline void Category::set_slug(const char* value) {
  
  slug_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Category.slug)
}
inline void Category::set_slug(const char* value, size_t size) {
  
  slug_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Category.slug)
}
inline ::std::string* Category::mutable_slug() {
  
  // @@protoc_insertion_point(field_mutable:Category.slug)
  return slug_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Category::release_slug() {
  // @@protoc_insertion_point(field_release:Category.slug)
  
  return slug_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Category::set_allocated_slug(::std::string* slug) {
  if (slug != NULL) {
    
  } else {
    
  }
  slug_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), slug);
  // @@protoc_insertion_point(field_set_allocated:Category.slug)
}

// optional string description = 5;
inline void Category::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Category::description() const {
  // @@protoc_insertion_point(field_get:Category.description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Category::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Category.description)
}
inline void Category::set_description(const char* value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Category.description)
}
inline void Category::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Category.description)
}
inline ::std::string* Category::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:Category.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Category::release_description() {
  // @@protoc_insertion_point(field_release:Category.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Category::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:Category.description)
}

// optional int32 count = 6;
inline void Category::clear_count() {
  count_ = 0;
}
inline ::google::protobuf::int32 Category::count() const {
  // @@protoc_insertion_point(field_get:Category.count)
  return count_;
}
inline void Category::set_count(::google::protobuf::int32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:Category.count)
}

inline const Category* Category::internal_default_instance() {
  return &Category_default_instance_.get();
}
// -------------------------------------------------------------------

// Tag

// optional int32 id = 1;
inline void Tag::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 Tag::id() const {
  // @@protoc_insertion_point(field_get:Tag.id)
  return id_;
}
inline void Tag::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Tag.id)
}

// optional string name = 2;
inline void Tag::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Tag::name() const {
  // @@protoc_insertion_point(field_get:Tag.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Tag::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Tag.name)
}
inline void Tag::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Tag.name)
}
inline void Tag::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Tag.name)
}
inline ::std::string* Tag::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Tag.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Tag::release_name() {
  // @@protoc_insertion_point(field_release:Tag.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Tag::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Tag.name)
}

// optional string url = 3;
inline void Tag::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Tag::url() const {
  // @@protoc_insertion_point(field_get:Tag.url)
  return url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Tag::set_url(const ::std::string& value) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Tag.url)
}
inline void Tag::set_url(const char* value) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Tag.url)
}
inline void Tag::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Tag.url)
}
inline ::std::string* Tag::mutable_url() {
  
  // @@protoc_insertion_point(field_mutable:Tag.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Tag::release_url() {
  // @@protoc_insertion_point(field_release:Tag.url)
  
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Tag::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:Tag.url)
}

// optional string slug = 4;
inline void Tag::clear_slug() {
  slug_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Tag::slug() const {
  // @@protoc_insertion_point(field_get:Tag.slug)
  return slug_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Tag::set_slug(const ::std::string& value) {
  
  slug_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Tag.slug)
}
inline void Tag::set_slug(const char* value) {
  
  slug_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Tag.slug)
}
inline void Tag::set_slug(const char* value, size_t size) {
  
  slug_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Tag.slug)
}
inline ::std::string* Tag::mutable_slug() {
  
  // @@protoc_insertion_point(field_mutable:Tag.slug)
  return slug_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Tag::release_slug() {
  // @@protoc_insertion_point(field_release:Tag.slug)
  
  return slug_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Tag::set_allocated_slug(::std::string* slug) {
  if (slug != NULL) {
    
  } else {
    
  }
  slug_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), slug);
  // @@protoc_insertion_point(field_set_allocated:Tag.slug)
}

// optional string description = 5;
inline void Tag::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Tag::description() const {
  // @@protoc_insertion_point(field_get:Tag.description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Tag::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Tag.description)
}
inline void Tag::set_description(const char* value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Tag.description)
}
inline void Tag::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Tag.description)
}
inline ::std::string* Tag::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:Tag.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Tag::release_description() {
  // @@protoc_insertion_point(field_release:Tag.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Tag::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:Tag.description)
}

// optional int32 count = 6;
inline void Tag::clear_count() {
  count_ = 0;
}
inline ::google::protobuf::int32 Tag::count() const {
  // @@protoc_insertion_point(field_get:Tag.count)
  return count_;
}
inline void Tag::set_count(::google::protobuf::int32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:Tag.count)
}

inline const Tag* Tag::internal_default_instance() {
  return &Tag_default_instance_.get();
}
// -------------------------------------------------------------------

// ImageDetail

// optional string title = 1;
inline void ImageDetail::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ImageDetail::title() const {
  // @@protoc_insertion_point(field_get:ImageDetail.title)
  return title_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageDetail::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ImageDetail.title)
}
inline void ImageDetail::set_title(const char* value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ImageDetail.title)
}
inline void ImageDetail::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ImageDetail.title)
}
inline ::std::string* ImageDetail::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:ImageDetail.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImageDetail::release_title() {
  // @@protoc_insertion_point(field_release:ImageDetail.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageDetail::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:ImageDetail.title)
}

// optional int32 width = 2;
inline void ImageDetail::clear_width() {
  width_ = 0;
}
inline ::google::protobuf::int32 ImageDetail::width() const {
  // @@protoc_insertion_point(field_get:ImageDetail.width)
  return width_;
}
inline void ImageDetail::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:ImageDetail.width)
}

// optional int32 height = 3;
inline void ImageDetail::clear_height() {
  height_ = 0;
}
inline ::google::protobuf::int32 ImageDetail::height() const {
  // @@protoc_insertion_point(field_get:ImageDetail.height)
  return height_;
}
inline void ImageDetail::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:ImageDetail.height)
}

// optional string mime_type = 4;
inline void ImageDetail::clear_mime_type() {
  mime_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ImageDetail::mime_type() const {
  // @@protoc_insertion_point(field_get:ImageDetail.mime_type)
  return mime_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageDetail::set_mime_type(const ::std::string& value) {
  
  mime_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ImageDetail.mime_type)
}
inline void ImageDetail::set_mime_type(const char* value) {
  
  mime_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ImageDetail.mime_type)
}
inline void ImageDetail::set_mime_type(const char* value, size_t size) {
  
  mime_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ImageDetail.mime_type)
}
inline ::std::string* ImageDetail::mutable_mime_type() {
  
  // @@protoc_insertion_point(field_mutable:ImageDetail.mime_type)
  return mime_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImageDetail::release_mime_type() {
  // @@protoc_insertion_point(field_release:ImageDetail.mime_type)
  
  return mime_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageDetail::set_allocated_mime_type(::std::string* mime_type) {
  if (mime_type != NULL) {
    
  } else {
    
  }
  mime_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mime_type);
  // @@protoc_insertion_point(field_set_allocated:ImageDetail.mime_type)
}

// optional string alt_text = 5;
inline void ImageDetail::clear_alt_text() {
  alt_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ImageDetail::alt_text() const {
  // @@protoc_insertion_point(field_get:ImageDetail.alt_text)
  return alt_text_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageDetail::set_alt_text(const ::std::string& value) {
  
  alt_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ImageDetail.alt_text)
}
inline void ImageDetail::set_alt_text(const char* value) {
  
  alt_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ImageDetail.alt_text)
}
inline void ImageDetail::set_alt_text(const char* value, size_t size) {
  
  alt_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ImageDetail.alt_text)
}
inline ::std::string* ImageDetail::mutable_alt_text() {
  
  // @@protoc_insertion_point(field_mutable:ImageDetail.alt_text)
  return alt_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImageDetail::release_alt_text() {
  // @@protoc_insertion_point(field_release:ImageDetail.alt_text)
  
  return alt_text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageDetail::set_allocated_alt_text(::std::string* alt_text) {
  if (alt_text != NULL) {
    
  } else {
    
  }
  alt_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alt_text);
  // @@protoc_insertion_point(field_set_allocated:ImageDetail.alt_text)
}

// map<string, .ImageSize> sizes = 6;
inline int ImageDetail::sizes_size() const {
  return sizes_.size();
}
inline void ImageDetail::clear_sizes() {
  sizes_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::ImageSize >&
ImageDetail::sizes() const {
  // @@protoc_insertion_point(field_map:ImageDetail.sizes)
  return sizes_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::ImageSize >*
ImageDetail::mutable_sizes() {
  // @@protoc_insertion_point(field_mutable_map:ImageDetail.sizes)
  return sizes_.MutableMap();
}

inline const ImageDetail* ImageDetail::internal_default_instance() {
  return &ImageDetail_default_instance_.get();
}
// -------------------------------------------------------------------

// ImageSize

// optional int32 width = 1;
inline void ImageSize::clear_width() {
  width_ = 0;
}
inline ::google::protobuf::int32 ImageSize::width() const {
  // @@protoc_insertion_point(field_get:ImageSize.width)
  return width_;
}
inline void ImageSize::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:ImageSize.width)
}

// optional int32 height = 2;
inline void ImageSize::clear_height() {
  height_ = 0;
}
inline ::google::protobuf::int32 ImageSize::height() const {
  // @@protoc_insertion_point(field_get:ImageSize.height)
  return height_;
}
inline void ImageSize::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:ImageSize.height)
}

// optional string source_url = 3;
inline void ImageSize::clear_source_url() {
  source_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ImageSize::source_url() const {
  // @@protoc_insertion_point(field_get:ImageSize.source_url)
  return source_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageSize::set_source_url(const ::std::string& value) {
  
  source_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ImageSize.source_url)
}
inline void ImageSize::set_source_url(const char* value) {
  
  source_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ImageSize.source_url)
}
inline void ImageSize::set_source_url(const char* value, size_t size) {
  
  source_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ImageSize.source_url)
}
inline ::std::string* ImageSize::mutable_source_url() {
  
  // @@protoc_insertion_point(field_mutable:ImageSize.source_url)
  return source_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImageSize::release_source_url() {
  // @@protoc_insertion_point(field_release:ImageSize.source_url)
  
  return source_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageSize::set_allocated_source_url(::std::string* source_url) {
  if (source_url != NULL) {
    
  } else {
    
  }
  source_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_url);
  // @@protoc_insertion_point(field_set_allocated:ImageSize.source_url)
}

// optional string mime_type = 4;
inline void ImageSize::clear_mime_type() {
  mime_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ImageSize::mime_type() const {
  // @@protoc_insertion_point(field_get:ImageSize.mime_type)
  return mime_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageSize::set_mime_type(const ::std::string& value) {
  
  mime_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ImageSize.mime_type)
}
inline void ImageSize::set_mime_type(const char* value) {
  
  mime_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ImageSize.mime_type)
}
inline void ImageSize::set_mime_type(const char* value, size_t size) {
  
  mime_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ImageSize.mime_type)
}
inline ::std::string* ImageSize::mutable_mime_type() {
  
  // @@protoc_insertion_point(field_mutable:ImageSize.mime_type)
  return mime_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImageSize::release_mime_type() {
  // @@protoc_insertion_point(field_release:ImageSize.mime_type)
  
  return mime_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageSize::set_allocated_mime_type(::std::string* mime_type) {
  if (mime_type != NULL) {
    
  } else {
    
  }
  mime_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mime_type);
  // @@protoc_insertion_point(field_set_allocated:ImageSize.mime_type)
}

inline const ImageSize* ImageSize::internal_default_instance() {
  return &ImageSize_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mainPage_2fcontent_2eproto__INCLUDED
