// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mainPage/doc_detail.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mainPage/doc_detail.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace main {

namespace {

const ::google::protobuf::Descriptor* DocRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DocRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DocReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DocReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* AboutResources_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AboutResources_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_mainPage_2fdoc_5fdetail_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_mainPage_2fdoc_5fdetail_2eproto() {
  protobuf_AddDesc_mainPage_2fdoc_5fdetail_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mainPage/doc_detail.proto");
  GOOGLE_CHECK(file != NULL);
  DocRequest_descriptor_ = file->message_type(0);
  static const int DocRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocRequest, docuid_),
  };
  DocRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DocRequest_descriptor_,
      DocRequest::internal_default_instance(),
      DocRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(DocRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocRequest, _internal_metadata_));
  DocReply_descriptor_ = file->message_type(1);
  static const int DocReply_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocReply, aboutresources_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocReply, docuabstract_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocReply, docuauthor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocReply, docuauthorcompany_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocReply, docudate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocReply, docudownloadcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocReply, docujournalname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocReply, docukeywords_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocReply, docuquotecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocReply, docureadcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocReply, docuthirdlinkcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocReply, docutitle_),
  };
  DocReply_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DocReply_descriptor_,
      DocReply::internal_default_instance(),
      DocReply_offsets_,
      -1,
      -1,
      -1,
      sizeof(DocReply),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocReply, _internal_metadata_));
  AboutResources_descriptor_ = file->message_type(2);
  static const int AboutResources_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AboutResources, docuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AboutResources, docutitle_),
  };
  AboutResources_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AboutResources_descriptor_,
      AboutResources::internal_default_instance(),
      AboutResources_offsets_,
      -1,
      -1,
      -1,
      sizeof(AboutResources),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AboutResources, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mainPage_2fdoc_5fdetail_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DocRequest_descriptor_, DocRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DocReply_descriptor_, DocReply::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AboutResources_descriptor_, AboutResources::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mainPage_2fdoc_5fdetail_2eproto() {
  DocRequest_default_instance_.Shutdown();
  delete DocRequest_reflection_;
  DocReply_default_instance_.Shutdown();
  delete DocReply_reflection_;
  AboutResources_default_instance_.Shutdown();
  delete AboutResources_reflection_;
}

void protobuf_InitDefaults_mainPage_2fdoc_5fdetail_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  DocRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  DocReply_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  AboutResources_default_instance_.DefaultConstruct();
  DocRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  DocReply_default_instance_.get_mutable()->InitAsDefaultInstance();
  AboutResources_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_mainPage_2fdoc_5fdetail_2eproto_once_);
void protobuf_InitDefaults_mainPage_2fdoc_5fdetail_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_mainPage_2fdoc_5fdetail_2eproto_once_,
                 &protobuf_InitDefaults_mainPage_2fdoc_5fdetail_2eproto_impl);
}
void protobuf_AddDesc_mainPage_2fdoc_5fdetail_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_mainPage_2fdoc_5fdetail_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031mainPage/doc_detail.proto\022\004main\"\034\n\nDoc"
    "Request\022\016\n\006docuID\030\001 \001(\t\"\267\002\n\010DocReply\022,\n\016"
    "aboutResources\030\001 \003(\0132\024.main.AboutResourc"
    "es\022\024\n\014docuAbstract\030\002 \001(\t\022\022\n\ndocuAuthor\030\003"
    " \001(\t\022\031\n\021docuAuthorCompany\030\004 \001(\t\022\020\n\010docuD"
    "ate\030\005 \001(\t\022\031\n\021docuDownloadCount\030\006 \001(\t\022\027\n\017"
    "docuJournalName\030\007 \001(\t\022\024\n\014docuKeywords\030\010 "
    "\001(\t\022\026\n\016docuQuoteCount\030\t \001(\t\022\025\n\rdocuReadC"
    "ount\030\n \001(\t\022\032\n\022docuThirdLinkCount\030\013 \001(\t\022\021"
    "\n\tdocuTitle\030\014 \001(\t\"3\n\016AboutResources\022\016\n\006d"
    "ocuID\030\001 \001(\t\022\021\n\tdocuTitle\030\002 \001(\tB\022\n\020com.wa"
    "nfang.mainb\006proto3", 458);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mainPage/doc_detail.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mainPage_2fdoc_5fdetail_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_mainPage_2fdoc_5fdetail_2eproto_once_);
void protobuf_AddDesc_mainPage_2fdoc_5fdetail_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_mainPage_2fdoc_5fdetail_2eproto_once_,
                 &protobuf_AddDesc_mainPage_2fdoc_5fdetail_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mainPage_2fdoc_5fdetail_2eproto {
  StaticDescriptorInitializer_mainPage_2fdoc_5fdetail_2eproto() {
    protobuf_AddDesc_mainPage_2fdoc_5fdetail_2eproto();
  }
} static_descriptor_initializer_mainPage_2fdoc_5fdetail_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DocRequest::kDocuIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DocRequest::DocRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_mainPage_2fdoc_5fdetail_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.DocRequest)
}

void DocRequest::InitAsDefaultInstance() {
}

DocRequest::DocRequest(const DocRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.DocRequest)
}

void DocRequest::SharedCtor() {
  docuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

DocRequest::~DocRequest() {
  // @@protoc_insertion_point(destructor:main.DocRequest)
  SharedDtor();
}

void DocRequest::SharedDtor() {
  docuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DocRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DocRequest_descriptor_;
}

const DocRequest& DocRequest::default_instance() {
  protobuf_InitDefaults_mainPage_2fdoc_5fdetail_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<DocRequest> DocRequest_default_instance_;

DocRequest* DocRequest::New(::google::protobuf::Arena* arena) const {
  DocRequest* n = new DocRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DocRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:main.DocRequest)
  docuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DocRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:main.DocRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string docuID = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_docuid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->docuid().data(), this->docuid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "main.DocRequest.docuID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.DocRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.DocRequest)
  return false;
#undef DO_
}

void DocRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.DocRequest)
  // optional string docuID = 1;
  if (this->docuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->docuid().data(), this->docuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "main.DocRequest.docuID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->docuid(), output);
  }

  // @@protoc_insertion_point(serialize_end:main.DocRequest)
}

::google::protobuf::uint8* DocRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:main.DocRequest)
  // optional string docuID = 1;
  if (this->docuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->docuid().data(), this->docuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "main.DocRequest.docuID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->docuid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:main.DocRequest)
  return target;
}

size_t DocRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:main.DocRequest)
  size_t total_size = 0;

  // optional string docuID = 1;
  if (this->docuid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->docuid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:main.DocRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DocRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DocRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:main.DocRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:main.DocRequest)
    UnsafeMergeFrom(*source);
  }
}

void DocRequest::MergeFrom(const DocRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:main.DocRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void DocRequest::UnsafeMergeFrom(const DocRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.docuid().size() > 0) {

    docuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.docuid_);
  }
}

void DocRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:main.DocRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocRequest::CopyFrom(const DocRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:main.DocRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool DocRequest::IsInitialized() const {

  return true;
}

void DocRequest::Swap(DocRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DocRequest::InternalSwap(DocRequest* other) {
  docuid_.Swap(&other->docuid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DocRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DocRequest_descriptor_;
  metadata.reflection = DocRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DocRequest

// optional string docuID = 1;
void DocRequest::clear_docuid() {
  docuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DocRequest::docuid() const {
  // @@protoc_insertion_point(field_get:main.DocRequest.docuID)
  return docuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DocRequest::set_docuid(const ::std::string& value) {
  
  docuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:main.DocRequest.docuID)
}
void DocRequest::set_docuid(const char* value) {
  
  docuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:main.DocRequest.docuID)
}
void DocRequest::set_docuid(const char* value, size_t size) {
  
  docuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:main.DocRequest.docuID)
}
::std::string* DocRequest::mutable_docuid() {
  
  // @@protoc_insertion_point(field_mutable:main.DocRequest.docuID)
  return docuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DocRequest::release_docuid() {
  // @@protoc_insertion_point(field_release:main.DocRequest.docuID)
  
  return docuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DocRequest::set_allocated_docuid(::std::string* docuid) {
  if (docuid != NULL) {
    
  } else {
    
  }
  docuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), docuid);
  // @@protoc_insertion_point(field_set_allocated:main.DocRequest.docuID)
}

inline const DocRequest* DocRequest::internal_default_instance() {
  return &DocRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DocReply::kAboutResourcesFieldNumber;
const int DocReply::kDocuAbstractFieldNumber;
const int DocReply::kDocuAuthorFieldNumber;
const int DocReply::kDocuAuthorCompanyFieldNumber;
const int DocReply::kDocuDateFieldNumber;
const int DocReply::kDocuDownloadCountFieldNumber;
const int DocReply::kDocuJournalNameFieldNumber;
const int DocReply::kDocuKeywordsFieldNumber;
const int DocReply::kDocuQuoteCountFieldNumber;
const int DocReply::kDocuReadCountFieldNumber;
const int DocReply::kDocuThirdLinkCountFieldNumber;
const int DocReply::kDocuTitleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DocReply::DocReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_mainPage_2fdoc_5fdetail_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.DocReply)
}

void DocReply::InitAsDefaultInstance() {
}

DocReply::DocReply(const DocReply& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.DocReply)
}

void DocReply::SharedCtor() {
  docuabstract_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  docuauthor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  docuauthorcompany_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  docudate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  docudownloadcount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  docujournalname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  docukeywords_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  docuquotecount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  docureadcount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  docuthirdlinkcount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  docutitle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

DocReply::~DocReply() {
  // @@protoc_insertion_point(destructor:main.DocReply)
  SharedDtor();
}

void DocReply::SharedDtor() {
  docuabstract_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  docuauthor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  docuauthorcompany_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  docudate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  docudownloadcount_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  docujournalname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  docukeywords_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  docuquotecount_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  docureadcount_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  docuthirdlinkcount_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  docutitle_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DocReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DocReply_descriptor_;
}

const DocReply& DocReply::default_instance() {
  protobuf_InitDefaults_mainPage_2fdoc_5fdetail_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<DocReply> DocReply_default_instance_;

DocReply* DocReply::New(::google::protobuf::Arena* arena) const {
  DocReply* n = new DocReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DocReply::Clear() {
// @@protoc_insertion_point(message_clear_start:main.DocReply)
  docuabstract_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  docuauthor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  docuauthorcompany_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  docudate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  docudownloadcount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  docujournalname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  docukeywords_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  docuquotecount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  docureadcount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  docuthirdlinkcount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  docutitle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  aboutresources_.Clear();
}

bool DocReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:main.DocReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .main.AboutResources aboutResources = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_aboutResources:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_aboutresources()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_aboutResources;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_docuAbstract;
        break;
      }

      // optional string docuAbstract = 2;
      case 2: {
        if (tag == 18) {
         parse_docuAbstract:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_docuabstract()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->docuabstract().data(), this->docuabstract().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "main.DocReply.docuAbstract"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_docuAuthor;
        break;
      }

      // optional string docuAuthor = 3;
      case 3: {
        if (tag == 26) {
         parse_docuAuthor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_docuauthor()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->docuauthor().data(), this->docuauthor().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "main.DocReply.docuAuthor"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_docuAuthorCompany;
        break;
      }

      // optional string docuAuthorCompany = 4;
      case 4: {
        if (tag == 34) {
         parse_docuAuthorCompany:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_docuauthorcompany()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->docuauthorcompany().data(), this->docuauthorcompany().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "main.DocReply.docuAuthorCompany"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_docuDate;
        break;
      }

      // optional string docuDate = 5;
      case 5: {
        if (tag == 42) {
         parse_docuDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_docudate()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->docudate().data(), this->docudate().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "main.DocReply.docuDate"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_docuDownloadCount;
        break;
      }

      // optional string docuDownloadCount = 6;
      case 6: {
        if (tag == 50) {
         parse_docuDownloadCount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_docudownloadcount()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->docudownloadcount().data(), this->docudownloadcount().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "main.DocReply.docuDownloadCount"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_docuJournalName;
        break;
      }

      // optional string docuJournalName = 7;
      case 7: {
        if (tag == 58) {
         parse_docuJournalName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_docujournalname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->docujournalname().data(), this->docujournalname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "main.DocReply.docuJournalName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_docuKeywords;
        break;
      }

      // optional string docuKeywords = 8;
      case 8: {
        if (tag == 66) {
         parse_docuKeywords:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_docukeywords()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->docukeywords().data(), this->docukeywords().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "main.DocReply.docuKeywords"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_docuQuoteCount;
        break;
      }

      // optional string docuQuoteCount = 9;
      case 9: {
        if (tag == 74) {
         parse_docuQuoteCount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_docuquotecount()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->docuquotecount().data(), this->docuquotecount().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "main.DocReply.docuQuoteCount"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_docuReadCount;
        break;
      }

      // optional string docuReadCount = 10;
      case 10: {
        if (tag == 82) {
         parse_docuReadCount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_docureadcount()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->docureadcount().data(), this->docureadcount().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "main.DocReply.docuReadCount"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_docuThirdLinkCount;
        break;
      }

      // optional string docuThirdLinkCount = 11;
      case 11: {
        if (tag == 90) {
         parse_docuThirdLinkCount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_docuthirdlinkcount()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->docuthirdlinkcount().data(), this->docuthirdlinkcount().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "main.DocReply.docuThirdLinkCount"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_docuTitle;
        break;
      }

      // optional string docuTitle = 12;
      case 12: {
        if (tag == 98) {
         parse_docuTitle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_docutitle()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->docutitle().data(), this->docutitle().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "main.DocReply.docuTitle"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.DocReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.DocReply)
  return false;
#undef DO_
}

void DocReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.DocReply)
  // repeated .main.AboutResources aboutResources = 1;
  for (unsigned int i = 0, n = this->aboutresources_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->aboutresources(i), output);
  }

  // optional string docuAbstract = 2;
  if (this->docuabstract().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->docuabstract().data(), this->docuabstract().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "main.DocReply.docuAbstract");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->docuabstract(), output);
  }

  // optional string docuAuthor = 3;
  if (this->docuauthor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->docuauthor().data(), this->docuauthor().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "main.DocReply.docuAuthor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->docuauthor(), output);
  }

  // optional string docuAuthorCompany = 4;
  if (this->docuauthorcompany().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->docuauthorcompany().data(), this->docuauthorcompany().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "main.DocReply.docuAuthorCompany");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->docuauthorcompany(), output);
  }

  // optional string docuDate = 5;
  if (this->docudate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->docudate().data(), this->docudate().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "main.DocReply.docuDate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->docudate(), output);
  }

  // optional string docuDownloadCount = 6;
  if (this->docudownloadcount().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->docudownloadcount().data(), this->docudownloadcount().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "main.DocReply.docuDownloadCount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->docudownloadcount(), output);
  }

  // optional string docuJournalName = 7;
  if (this->docujournalname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->docujournalname().data(), this->docujournalname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "main.DocReply.docuJournalName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->docujournalname(), output);
  }

  // optional string docuKeywords = 8;
  if (this->docukeywords().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->docukeywords().data(), this->docukeywords().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "main.DocReply.docuKeywords");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->docukeywords(), output);
  }

  // optional string docuQuoteCount = 9;
  if (this->docuquotecount().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->docuquotecount().data(), this->docuquotecount().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "main.DocReply.docuQuoteCount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->docuquotecount(), output);
  }

  // optional string docuReadCount = 10;
  if (this->docureadcount().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->docureadcount().data(), this->docureadcount().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "main.DocReply.docuReadCount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->docureadcount(), output);
  }

  // optional string docuThirdLinkCount = 11;
  if (this->docuthirdlinkcount().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->docuthirdlinkcount().data(), this->docuthirdlinkcount().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "main.DocReply.docuThirdLinkCount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->docuthirdlinkcount(), output);
  }

  // optional string docuTitle = 12;
  if (this->docutitle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->docutitle().data(), this->docutitle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "main.DocReply.docuTitle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->docutitle(), output);
  }

  // @@protoc_insertion_point(serialize_end:main.DocReply)
}

::google::protobuf::uint8* DocReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:main.DocReply)
  // repeated .main.AboutResources aboutResources = 1;
  for (unsigned int i = 0, n = this->aboutresources_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->aboutresources(i), false, target);
  }

  // optional string docuAbstract = 2;
  if (this->docuabstract().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->docuabstract().data(), this->docuabstract().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "main.DocReply.docuAbstract");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->docuabstract(), target);
  }

  // optional string docuAuthor = 3;
  if (this->docuauthor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->docuauthor().data(), this->docuauthor().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "main.DocReply.docuAuthor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->docuauthor(), target);
  }

  // optional string docuAuthorCompany = 4;
  if (this->docuauthorcompany().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->docuauthorcompany().data(), this->docuauthorcompany().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "main.DocReply.docuAuthorCompany");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->docuauthorcompany(), target);
  }

  // optional string docuDate = 5;
  if (this->docudate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->docudate().data(), this->docudate().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "main.DocReply.docuDate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->docudate(), target);
  }

  // optional string docuDownloadCount = 6;
  if (this->docudownloadcount().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->docudownloadcount().data(), this->docudownloadcount().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "main.DocReply.docuDownloadCount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->docudownloadcount(), target);
  }

  // optional string docuJournalName = 7;
  if (this->docujournalname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->docujournalname().data(), this->docujournalname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "main.DocReply.docuJournalName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->docujournalname(), target);
  }

  // optional string docuKeywords = 8;
  if (this->docukeywords().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->docukeywords().data(), this->docukeywords().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "main.DocReply.docuKeywords");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->docukeywords(), target);
  }

  // optional string docuQuoteCount = 9;
  if (this->docuquotecount().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->docuquotecount().data(), this->docuquotecount().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "main.DocReply.docuQuoteCount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->docuquotecount(), target);
  }

  // optional string docuReadCount = 10;
  if (this->docureadcount().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->docureadcount().data(), this->docureadcount().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "main.DocReply.docuReadCount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->docureadcount(), target);
  }

  // optional string docuThirdLinkCount = 11;
  if (this->docuthirdlinkcount().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->docuthirdlinkcount().data(), this->docuthirdlinkcount().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "main.DocReply.docuThirdLinkCount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->docuthirdlinkcount(), target);
  }

  // optional string docuTitle = 12;
  if (this->docutitle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->docutitle().data(), this->docutitle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "main.DocReply.docuTitle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->docutitle(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:main.DocReply)
  return target;
}

size_t DocReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:main.DocReply)
  size_t total_size = 0;

  // optional string docuAbstract = 2;
  if (this->docuabstract().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->docuabstract());
  }

  // optional string docuAuthor = 3;
  if (this->docuauthor().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->docuauthor());
  }

  // optional string docuAuthorCompany = 4;
  if (this->docuauthorcompany().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->docuauthorcompany());
  }

  // optional string docuDate = 5;
  if (this->docudate().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->docudate());
  }

  // optional string docuDownloadCount = 6;
  if (this->docudownloadcount().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->docudownloadcount());
  }

  // optional string docuJournalName = 7;
  if (this->docujournalname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->docujournalname());
  }

  // optional string docuKeywords = 8;
  if (this->docukeywords().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->docukeywords());
  }

  // optional string docuQuoteCount = 9;
  if (this->docuquotecount().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->docuquotecount());
  }

  // optional string docuReadCount = 10;
  if (this->docureadcount().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->docureadcount());
  }

  // optional string docuThirdLinkCount = 11;
  if (this->docuthirdlinkcount().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->docuthirdlinkcount());
  }

  // optional string docuTitle = 12;
  if (this->docutitle().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->docutitle());
  }

  // repeated .main.AboutResources aboutResources = 1;
  {
    unsigned int count = this->aboutresources_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->aboutresources(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:main.DocReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DocReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DocReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:main.DocReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:main.DocReply)
    UnsafeMergeFrom(*source);
  }
}

void DocReply::MergeFrom(const DocReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:main.DocReply)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void DocReply::UnsafeMergeFrom(const DocReply& from) {
  GOOGLE_DCHECK(&from != this);
  aboutresources_.MergeFrom(from.aboutresources_);
  if (from.docuabstract().size() > 0) {

    docuabstract_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.docuabstract_);
  }
  if (from.docuauthor().size() > 0) {

    docuauthor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.docuauthor_);
  }
  if (from.docuauthorcompany().size() > 0) {

    docuauthorcompany_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.docuauthorcompany_);
  }
  if (from.docudate().size() > 0) {

    docudate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.docudate_);
  }
  if (from.docudownloadcount().size() > 0) {

    docudownloadcount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.docudownloadcount_);
  }
  if (from.docujournalname().size() > 0) {

    docujournalname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.docujournalname_);
  }
  if (from.docukeywords().size() > 0) {

    docukeywords_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.docukeywords_);
  }
  if (from.docuquotecount().size() > 0) {

    docuquotecount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.docuquotecount_);
  }
  if (from.docureadcount().size() > 0) {

    docureadcount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.docureadcount_);
  }
  if (from.docuthirdlinkcount().size() > 0) {

    docuthirdlinkcount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.docuthirdlinkcount_);
  }
  if (from.docutitle().size() > 0) {

    docutitle_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.docutitle_);
  }
}

void DocReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:main.DocReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocReply::CopyFrom(const DocReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:main.DocReply)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool DocReply::IsInitialized() const {

  return true;
}

void DocReply::Swap(DocReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DocReply::InternalSwap(DocReply* other) {
  aboutresources_.UnsafeArenaSwap(&other->aboutresources_);
  docuabstract_.Swap(&other->docuabstract_);
  docuauthor_.Swap(&other->docuauthor_);
  docuauthorcompany_.Swap(&other->docuauthorcompany_);
  docudate_.Swap(&other->docudate_);
  docudownloadcount_.Swap(&other->docudownloadcount_);
  docujournalname_.Swap(&other->docujournalname_);
  docukeywords_.Swap(&other->docukeywords_);
  docuquotecount_.Swap(&other->docuquotecount_);
  docureadcount_.Swap(&other->docureadcount_);
  docuthirdlinkcount_.Swap(&other->docuthirdlinkcount_);
  docutitle_.Swap(&other->docutitle_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DocReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DocReply_descriptor_;
  metadata.reflection = DocReply_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DocReply

// repeated .main.AboutResources aboutResources = 1;
int DocReply::aboutresources_size() const {
  return aboutresources_.size();
}
void DocReply::clear_aboutresources() {
  aboutresources_.Clear();
}
const ::main::AboutResources& DocReply::aboutresources(int index) const {
  // @@protoc_insertion_point(field_get:main.DocReply.aboutResources)
  return aboutresources_.Get(index);
}
::main::AboutResources* DocReply::mutable_aboutresources(int index) {
  // @@protoc_insertion_point(field_mutable:main.DocReply.aboutResources)
  return aboutresources_.Mutable(index);
}
::main::AboutResources* DocReply::add_aboutresources() {
  // @@protoc_insertion_point(field_add:main.DocReply.aboutResources)
  return aboutresources_.Add();
}
::google::protobuf::RepeatedPtrField< ::main::AboutResources >*
DocReply::mutable_aboutresources() {
  // @@protoc_insertion_point(field_mutable_list:main.DocReply.aboutResources)
  return &aboutresources_;
}
const ::google::protobuf::RepeatedPtrField< ::main::AboutResources >&
DocReply::aboutresources() const {
  // @@protoc_insertion_point(field_list:main.DocReply.aboutResources)
  return aboutresources_;
}

// optional string docuAbstract = 2;
void DocReply::clear_docuabstract() {
  docuabstract_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DocReply::docuabstract() const {
  // @@protoc_insertion_point(field_get:main.DocReply.docuAbstract)
  return docuabstract_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DocReply::set_docuabstract(const ::std::string& value) {
  
  docuabstract_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:main.DocReply.docuAbstract)
}
void DocReply::set_docuabstract(const char* value) {
  
  docuabstract_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:main.DocReply.docuAbstract)
}
void DocReply::set_docuabstract(const char* value, size_t size) {
  
  docuabstract_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:main.DocReply.docuAbstract)
}
::std::string* DocReply::mutable_docuabstract() {
  
  // @@protoc_insertion_point(field_mutable:main.DocReply.docuAbstract)
  return docuabstract_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DocReply::release_docuabstract() {
  // @@protoc_insertion_point(field_release:main.DocReply.docuAbstract)
  
  return docuabstract_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DocReply::set_allocated_docuabstract(::std::string* docuabstract) {
  if (docuabstract != NULL) {
    
  } else {
    
  }
  docuabstract_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), docuabstract);
  // @@protoc_insertion_point(field_set_allocated:main.DocReply.docuAbstract)
}

// optional string docuAuthor = 3;
void DocReply::clear_docuauthor() {
  docuauthor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DocReply::docuauthor() const {
  // @@protoc_insertion_point(field_get:main.DocReply.docuAuthor)
  return docuauthor_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DocReply::set_docuauthor(const ::std::string& value) {
  
  docuauthor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:main.DocReply.docuAuthor)
}
void DocReply::set_docuauthor(const char* value) {
  
  docuauthor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:main.DocReply.docuAuthor)
}
void DocReply::set_docuauthor(const char* value, size_t size) {
  
  docuauthor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:main.DocReply.docuAuthor)
}
::std::string* DocReply::mutable_docuauthor() {
  
  // @@protoc_insertion_point(field_mutable:main.DocReply.docuAuthor)
  return docuauthor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DocReply::release_docuauthor() {
  // @@protoc_insertion_point(field_release:main.DocReply.docuAuthor)
  
  return docuauthor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DocReply::set_allocated_docuauthor(::std::string* docuauthor) {
  if (docuauthor != NULL) {
    
  } else {
    
  }
  docuauthor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), docuauthor);
  // @@protoc_insertion_point(field_set_allocated:main.DocReply.docuAuthor)
}

// optional string docuAuthorCompany = 4;
void DocReply::clear_docuauthorcompany() {
  docuauthorcompany_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DocReply::docuauthorcompany() const {
  // @@protoc_insertion_point(field_get:main.DocReply.docuAuthorCompany)
  return docuauthorcompany_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DocReply::set_docuauthorcompany(const ::std::string& value) {
  
  docuauthorcompany_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:main.DocReply.docuAuthorCompany)
}
void DocReply::set_docuauthorcompany(const char* value) {
  
  docuauthorcompany_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:main.DocReply.docuAuthorCompany)
}
void DocReply::set_docuauthorcompany(const char* value, size_t size) {
  
  docuauthorcompany_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:main.DocReply.docuAuthorCompany)
}
::std::string* DocReply::mutable_docuauthorcompany() {
  
  // @@protoc_insertion_point(field_mutable:main.DocReply.docuAuthorCompany)
  return docuauthorcompany_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DocReply::release_docuauthorcompany() {
  // @@protoc_insertion_point(field_release:main.DocReply.docuAuthorCompany)
  
  return docuauthorcompany_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DocReply::set_allocated_docuauthorcompany(::std::string* docuauthorcompany) {
  if (docuauthorcompany != NULL) {
    
  } else {
    
  }
  docuauthorcompany_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), docuauthorcompany);
  // @@protoc_insertion_point(field_set_allocated:main.DocReply.docuAuthorCompany)
}

// optional string docuDate = 5;
void DocReply::clear_docudate() {
  docudate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DocReply::docudate() const {
  // @@protoc_insertion_point(field_get:main.DocReply.docuDate)
  return docudate_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DocReply::set_docudate(const ::std::string& value) {
  
  docudate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:main.DocReply.docuDate)
}
void DocReply::set_docudate(const char* value) {
  
  docudate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:main.DocReply.docuDate)
}
void DocReply::set_docudate(const char* value, size_t size) {
  
  docudate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:main.DocReply.docuDate)
}
::std::string* DocReply::mutable_docudate() {
  
  // @@protoc_insertion_point(field_mutable:main.DocReply.docuDate)
  return docudate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DocReply::release_docudate() {
  // @@protoc_insertion_point(field_release:main.DocReply.docuDate)
  
  return docudate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DocReply::set_allocated_docudate(::std::string* docudate) {
  if (docudate != NULL) {
    
  } else {
    
  }
  docudate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), docudate);
  // @@protoc_insertion_point(field_set_allocated:main.DocReply.docuDate)
}

// optional string docuDownloadCount = 6;
void DocReply::clear_docudownloadcount() {
  docudownloadcount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DocReply::docudownloadcount() const {
  // @@protoc_insertion_point(field_get:main.DocReply.docuDownloadCount)
  return docudownloadcount_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DocReply::set_docudownloadcount(const ::std::string& value) {
  
  docudownloadcount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:main.DocReply.docuDownloadCount)
}
void DocReply::set_docudownloadcount(const char* value) {
  
  docudownloadcount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:main.DocReply.docuDownloadCount)
}
void DocReply::set_docudownloadcount(const char* value, size_t size) {
  
  docudownloadcount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:main.DocReply.docuDownloadCount)
}
::std::string* DocReply::mutable_docudownloadcount() {
  
  // @@protoc_insertion_point(field_mutable:main.DocReply.docuDownloadCount)
  return docudownloadcount_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DocReply::release_docudownloadcount() {
  // @@protoc_insertion_point(field_release:main.DocReply.docuDownloadCount)
  
  return docudownloadcount_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DocReply::set_allocated_docudownloadcount(::std::string* docudownloadcount) {
  if (docudownloadcount != NULL) {
    
  } else {
    
  }
  docudownloadcount_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), docudownloadcount);
  // @@protoc_insertion_point(field_set_allocated:main.DocReply.docuDownloadCount)
}

// optional string docuJournalName = 7;
void DocReply::clear_docujournalname() {
  docujournalname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DocReply::docujournalname() const {
  // @@protoc_insertion_point(field_get:main.DocReply.docuJournalName)
  return docujournalname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DocReply::set_docujournalname(const ::std::string& value) {
  
  docujournalname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:main.DocReply.docuJournalName)
}
void DocReply::set_docujournalname(const char* value) {
  
  docujournalname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:main.DocReply.docuJournalName)
}
void DocReply::set_docujournalname(const char* value, size_t size) {
  
  docujournalname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:main.DocReply.docuJournalName)
}
::std::string* DocReply::mutable_docujournalname() {
  
  // @@protoc_insertion_point(field_mutable:main.DocReply.docuJournalName)
  return docujournalname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DocReply::release_docujournalname() {
  // @@protoc_insertion_point(field_release:main.DocReply.docuJournalName)
  
  return docujournalname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DocReply::set_allocated_docujournalname(::std::string* docujournalname) {
  if (docujournalname != NULL) {
    
  } else {
    
  }
  docujournalname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), docujournalname);
  // @@protoc_insertion_point(field_set_allocated:main.DocReply.docuJournalName)
}

// optional string docuKeywords = 8;
void DocReply::clear_docukeywords() {
  docukeywords_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DocReply::docukeywords() const {
  // @@protoc_insertion_point(field_get:main.DocReply.docuKeywords)
  return docukeywords_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DocReply::set_docukeywords(const ::std::string& value) {
  
  docukeywords_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:main.DocReply.docuKeywords)
}
void DocReply::set_docukeywords(const char* value) {
  
  docukeywords_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:main.DocReply.docuKeywords)
}
void DocReply::set_docukeywords(const char* value, size_t size) {
  
  docukeywords_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:main.DocReply.docuKeywords)
}
::std::string* DocReply::mutable_docukeywords() {
  
  // @@protoc_insertion_point(field_mutable:main.DocReply.docuKeywords)
  return docukeywords_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DocReply::release_docukeywords() {
  // @@protoc_insertion_point(field_release:main.DocReply.docuKeywords)
  
  return docukeywords_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DocReply::set_allocated_docukeywords(::std::string* docukeywords) {
  if (docukeywords != NULL) {
    
  } else {
    
  }
  docukeywords_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), docukeywords);
  // @@protoc_insertion_point(field_set_allocated:main.DocReply.docuKeywords)
}

// optional string docuQuoteCount = 9;
void DocReply::clear_docuquotecount() {
  docuquotecount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DocReply::docuquotecount() const {
  // @@protoc_insertion_point(field_get:main.DocReply.docuQuoteCount)
  return docuquotecount_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DocReply::set_docuquotecount(const ::std::string& value) {
  
  docuquotecount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:main.DocReply.docuQuoteCount)
}
void DocReply::set_docuquotecount(const char* value) {
  
  docuquotecount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:main.DocReply.docuQuoteCount)
}
void DocReply::set_docuquotecount(const char* value, size_t size) {
  
  docuquotecount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:main.DocReply.docuQuoteCount)
}
::std::string* DocReply::mutable_docuquotecount() {
  
  // @@protoc_insertion_point(field_mutable:main.DocReply.docuQuoteCount)
  return docuquotecount_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DocReply::release_docuquotecount() {
  // @@protoc_insertion_point(field_release:main.DocReply.docuQuoteCount)
  
  return docuquotecount_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DocReply::set_allocated_docuquotecount(::std::string* docuquotecount) {
  if (docuquotecount != NULL) {
    
  } else {
    
  }
  docuquotecount_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), docuquotecount);
  // @@protoc_insertion_point(field_set_allocated:main.DocReply.docuQuoteCount)
}

// optional string docuReadCount = 10;
void DocReply::clear_docureadcount() {
  docureadcount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DocReply::docureadcount() const {
  // @@protoc_insertion_point(field_get:main.DocReply.docuReadCount)
  return docureadcount_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DocReply::set_docureadcount(const ::std::string& value) {
  
  docureadcount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:main.DocReply.docuReadCount)
}
void DocReply::set_docureadcount(const char* value) {
  
  docureadcount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:main.DocReply.docuReadCount)
}
void DocReply::set_docureadcount(const char* value, size_t size) {
  
  docureadcount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:main.DocReply.docuReadCount)
}
::std::string* DocReply::mutable_docureadcount() {
  
  // @@protoc_insertion_point(field_mutable:main.DocReply.docuReadCount)
  return docureadcount_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DocReply::release_docureadcount() {
  // @@protoc_insertion_point(field_release:main.DocReply.docuReadCount)
  
  return docureadcount_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DocReply::set_allocated_docureadcount(::std::string* docureadcount) {
  if (docureadcount != NULL) {
    
  } else {
    
  }
  docureadcount_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), docureadcount);
  // @@protoc_insertion_point(field_set_allocated:main.DocReply.docuReadCount)
}

// optional string docuThirdLinkCount = 11;
void DocReply::clear_docuthirdlinkcount() {
  docuthirdlinkcount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DocReply::docuthirdlinkcount() const {
  // @@protoc_insertion_point(field_get:main.DocReply.docuThirdLinkCount)
  return docuthirdlinkcount_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DocReply::set_docuthirdlinkcount(const ::std::string& value) {
  
  docuthirdlinkcount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:main.DocReply.docuThirdLinkCount)
}
void DocReply::set_docuthirdlinkcount(const char* value) {
  
  docuthirdlinkcount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:main.DocReply.docuThirdLinkCount)
}
void DocReply::set_docuthirdlinkcount(const char* value, size_t size) {
  
  docuthirdlinkcount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:main.DocReply.docuThirdLinkCount)
}
::std::string* DocReply::mutable_docuthirdlinkcount() {
  
  // @@protoc_insertion_point(field_mutable:main.DocReply.docuThirdLinkCount)
  return docuthirdlinkcount_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DocReply::release_docuthirdlinkcount() {
  // @@protoc_insertion_point(field_release:main.DocReply.docuThirdLinkCount)
  
  return docuthirdlinkcount_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DocReply::set_allocated_docuthirdlinkcount(::std::string* docuthirdlinkcount) {
  if (docuthirdlinkcount != NULL) {
    
  } else {
    
  }
  docuthirdlinkcount_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), docuthirdlinkcount);
  // @@protoc_insertion_point(field_set_allocated:main.DocReply.docuThirdLinkCount)
}

// optional string docuTitle = 12;
void DocReply::clear_docutitle() {
  docutitle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DocReply::docutitle() const {
  // @@protoc_insertion_point(field_get:main.DocReply.docuTitle)
  return docutitle_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DocReply::set_docutitle(const ::std::string& value) {
  
  docutitle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:main.DocReply.docuTitle)
}
void DocReply::set_docutitle(const char* value) {
  
  docutitle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:main.DocReply.docuTitle)
}
void DocReply::set_docutitle(const char* value, size_t size) {
  
  docutitle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:main.DocReply.docuTitle)
}
::std::string* DocReply::mutable_docutitle() {
  
  // @@protoc_insertion_point(field_mutable:main.DocReply.docuTitle)
  return docutitle_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DocReply::release_docutitle() {
  // @@protoc_insertion_point(field_release:main.DocReply.docuTitle)
  
  return docutitle_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DocReply::set_allocated_docutitle(::std::string* docutitle) {
  if (docutitle != NULL) {
    
  } else {
    
  }
  docutitle_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), docutitle);
  // @@protoc_insertion_point(field_set_allocated:main.DocReply.docuTitle)
}

inline const DocReply* DocReply::internal_default_instance() {
  return &DocReply_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AboutResources::kDocuIDFieldNumber;
const int AboutResources::kDocuTitleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AboutResources::AboutResources()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_mainPage_2fdoc_5fdetail_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.AboutResources)
}

void AboutResources::InitAsDefaultInstance() {
}

AboutResources::AboutResources(const AboutResources& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.AboutResources)
}

void AboutResources::SharedCtor() {
  docuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  docutitle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

AboutResources::~AboutResources() {
  // @@protoc_insertion_point(destructor:main.AboutResources)
  SharedDtor();
}

void AboutResources::SharedDtor() {
  docuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  docutitle_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AboutResources::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AboutResources::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AboutResources_descriptor_;
}

const AboutResources& AboutResources::default_instance() {
  protobuf_InitDefaults_mainPage_2fdoc_5fdetail_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AboutResources> AboutResources_default_instance_;

AboutResources* AboutResources::New(::google::protobuf::Arena* arena) const {
  AboutResources* n = new AboutResources;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AboutResources::Clear() {
// @@protoc_insertion_point(message_clear_start:main.AboutResources)
  docuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  docutitle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AboutResources::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:main.AboutResources)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string docuID = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_docuid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->docuid().data(), this->docuid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "main.AboutResources.docuID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_docuTitle;
        break;
      }

      // optional string docuTitle = 2;
      case 2: {
        if (tag == 18) {
         parse_docuTitle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_docutitle()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->docutitle().data(), this->docutitle().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "main.AboutResources.docuTitle"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.AboutResources)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.AboutResources)
  return false;
#undef DO_
}

void AboutResources::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.AboutResources)
  // optional string docuID = 1;
  if (this->docuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->docuid().data(), this->docuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "main.AboutResources.docuID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->docuid(), output);
  }

  // optional string docuTitle = 2;
  if (this->docutitle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->docutitle().data(), this->docutitle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "main.AboutResources.docuTitle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->docutitle(), output);
  }

  // @@protoc_insertion_point(serialize_end:main.AboutResources)
}

::google::protobuf::uint8* AboutResources::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:main.AboutResources)
  // optional string docuID = 1;
  if (this->docuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->docuid().data(), this->docuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "main.AboutResources.docuID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->docuid(), target);
  }

  // optional string docuTitle = 2;
  if (this->docutitle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->docutitle().data(), this->docutitle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "main.AboutResources.docuTitle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->docutitle(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:main.AboutResources)
  return target;
}

size_t AboutResources::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:main.AboutResources)
  size_t total_size = 0;

  // optional string docuID = 1;
  if (this->docuid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->docuid());
  }

  // optional string docuTitle = 2;
  if (this->docutitle().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->docutitle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AboutResources::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:main.AboutResources)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AboutResources* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AboutResources>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:main.AboutResources)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:main.AboutResources)
    UnsafeMergeFrom(*source);
  }
}

void AboutResources::MergeFrom(const AboutResources& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:main.AboutResources)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AboutResources::UnsafeMergeFrom(const AboutResources& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.docuid().size() > 0) {

    docuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.docuid_);
  }
  if (from.docutitle().size() > 0) {

    docutitle_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.docutitle_);
  }
}

void AboutResources::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:main.AboutResources)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AboutResources::CopyFrom(const AboutResources& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:main.AboutResources)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AboutResources::IsInitialized() const {

  return true;
}

void AboutResources::Swap(AboutResources* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AboutResources::InternalSwap(AboutResources* other) {
  docuid_.Swap(&other->docuid_);
  docutitle_.Swap(&other->docutitle_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AboutResources::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AboutResources_descriptor_;
  metadata.reflection = AboutResources_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AboutResources

// optional string docuID = 1;
void AboutResources::clear_docuid() {
  docuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AboutResources::docuid() const {
  // @@protoc_insertion_point(field_get:main.AboutResources.docuID)
  return docuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AboutResources::set_docuid(const ::std::string& value) {
  
  docuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:main.AboutResources.docuID)
}
void AboutResources::set_docuid(const char* value) {
  
  docuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:main.AboutResources.docuID)
}
void AboutResources::set_docuid(const char* value, size_t size) {
  
  docuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:main.AboutResources.docuID)
}
::std::string* AboutResources::mutable_docuid() {
  
  // @@protoc_insertion_point(field_mutable:main.AboutResources.docuID)
  return docuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AboutResources::release_docuid() {
  // @@protoc_insertion_point(field_release:main.AboutResources.docuID)
  
  return docuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AboutResources::set_allocated_docuid(::std::string* docuid) {
  if (docuid != NULL) {
    
  } else {
    
  }
  docuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), docuid);
  // @@protoc_insertion_point(field_set_allocated:main.AboutResources.docuID)
}

// optional string docuTitle = 2;
void AboutResources::clear_docutitle() {
  docutitle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AboutResources::docutitle() const {
  // @@protoc_insertion_point(field_get:main.AboutResources.docuTitle)
  return docutitle_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AboutResources::set_docutitle(const ::std::string& value) {
  
  docutitle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:main.AboutResources.docuTitle)
}
void AboutResources::set_docutitle(const char* value) {
  
  docutitle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:main.AboutResources.docuTitle)
}
void AboutResources::set_docutitle(const char* value, size_t size) {
  
  docutitle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:main.AboutResources.docuTitle)
}
::std::string* AboutResources::mutable_docutitle() {
  
  // @@protoc_insertion_point(field_mutable:main.AboutResources.docuTitle)
  return docutitle_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AboutResources::release_docutitle() {
  // @@protoc_insertion_point(field_release:main.AboutResources.docuTitle)
  
  return docutitle_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AboutResources::set_allocated_docutitle(::std::string* docutitle) {
  if (docutitle != NULL) {
    
  } else {
    
  }
  docutitle_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), docutitle);
  // @@protoc_insertion_point(field_set_allocated:main.AboutResources.docuTitle)
}

inline const AboutResources* AboutResources::internal_default_instance() {
  return &AboutResources_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace main

// @@protoc_insertion_point(global_scope)
