// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mainPage/all_cource.proto

#ifndef PROTOBUF_mainPage_2fall_5fcource_2eproto__INCLUDED
#define PROTOBUF_mainPage_2fall_5fcource_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace main {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_mainPage_2fall_5fcource_2eproto();
void protobuf_InitDefaults_mainPage_2fall_5fcource_2eproto();
void protobuf_AssignDesc_mainPage_2fall_5fcource_2eproto();
void protobuf_ShutdownFile_mainPage_2fall_5fcource_2eproto();

class AlCourseReply;
class AlCourseRequest;
class Course;

// ===================================================================

class AlCourseRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:main.AlCourseRequest) */ {
 public:
  AlCourseRequest();
  virtual ~AlCourseRequest();

  AlCourseRequest(const AlCourseRequest& from);

  inline AlCourseRequest& operator=(const AlCourseRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AlCourseRequest& default_instance();

  static const AlCourseRequest* internal_default_instance();

  void Swap(AlCourseRequest* other);

  // implements Message ----------------------------------------------

  inline AlCourseRequest* New() const { return New(NULL); }

  AlCourseRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AlCourseRequest& from);
  void MergeFrom(const AlCourseRequest& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AlCourseRequest* other);
  void UnsafeMergeFrom(const AlCourseRequest& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string page_number = 1;
  void clear_page_number();
  static const int kPageNumberFieldNumber = 1;
  const ::std::string& page_number() const;
  void set_page_number(const ::std::string& value);
  void set_page_number(const char* value);
  void set_page_number(const char* value, size_t size);
  ::std::string* mutable_page_number();
  ::std::string* release_page_number();
  void set_allocated_page_number(::std::string* page_number);

  // optional string page_size = 2;
  void clear_page_size();
  static const int kPageSizeFieldNumber = 2;
  const ::std::string& page_size() const;
  void set_page_size(const ::std::string& value);
  void set_page_size(const char* value);
  void set_page_size(const char* value, size_t size);
  ::std::string* mutable_page_size();
  ::std::string* release_page_size();
  void set_allocated_page_size(::std::string* page_size);

  // @@protoc_insertion_point(class_scope:main.AlCourseRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr page_number_;
  ::google::protobuf::internal::ArenaStringPtr page_size_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_mainPage_2fall_5fcource_2eproto_impl();
  friend void  protobuf_AddDesc_mainPage_2fall_5fcource_2eproto_impl();
  friend void protobuf_AssignDesc_mainPage_2fall_5fcource_2eproto();
  friend void protobuf_ShutdownFile_mainPage_2fall_5fcource_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<AlCourseRequest> AlCourseRequest_default_instance_;

// -------------------------------------------------------------------

class AlCourseReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:main.AlCourseReply) */ {
 public:
  AlCourseReply();
  virtual ~AlCourseReply();

  AlCourseReply(const AlCourseReply& from);

  inline AlCourseReply& operator=(const AlCourseReply& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AlCourseReply& default_instance();

  static const AlCourseReply* internal_default_instance();

  void Swap(AlCourseReply* other);

  // implements Message ----------------------------------------------

  inline AlCourseReply* New() const { return New(NULL); }

  AlCourseReply* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AlCourseReply& from);
  void MergeFrom(const AlCourseReply& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AlCourseReply* other);
  void UnsafeMergeFrom(const AlCourseReply& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .main.Course course = 1;
  int course_size() const;
  void clear_course();
  static const int kCourseFieldNumber = 1;
  const ::main::Course& course(int index) const;
  ::main::Course* mutable_course(int index);
  ::main::Course* add_course();
  ::google::protobuf::RepeatedPtrField< ::main::Course >*
      mutable_course();
  const ::google::protobuf::RepeatedPtrField< ::main::Course >&
      course() const;

  // @@protoc_insertion_point(class_scope:main.AlCourseReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::main::Course > course_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_mainPage_2fall_5fcource_2eproto_impl();
  friend void  protobuf_AddDesc_mainPage_2fall_5fcource_2eproto_impl();
  friend void protobuf_AssignDesc_mainPage_2fall_5fcource_2eproto();
  friend void protobuf_ShutdownFile_mainPage_2fall_5fcource_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<AlCourseReply> AlCourseReply_default_instance_;

// -------------------------------------------------------------------

class Course : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:main.Course) */ {
 public:
  Course();
  virtual ~Course();

  Course(const Course& from);

  inline Course& operator=(const Course& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Course& default_instance();

  static const Course* internal_default_instance();

  void Swap(Course* other);

  // implements Message ----------------------------------------------

  inline Course* New() const { return New(NULL); }

  Course* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Course& from);
  void MergeFrom(const Course& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Course* other);
  void UnsafeMergeFrom(const Course& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string course_cover = 1;
  void clear_course_cover();
  static const int kCourseCoverFieldNumber = 1;
  const ::std::string& course_cover() const;
  void set_course_cover(const ::std::string& value);
  void set_course_cover(const char* value);
  void set_course_cover(const char* value, size_t size);
  ::std::string* mutable_course_cover();
  ::std::string* release_course_cover();
  void set_allocated_course_cover(::std::string* course_cover);

  // optional string course_id = 2;
  void clear_course_id();
  static const int kCourseIdFieldNumber = 2;
  const ::std::string& course_id() const;
  void set_course_id(const ::std::string& value);
  void set_course_id(const char* value);
  void set_course_id(const char* value, size_t size);
  ::std::string* mutable_course_id();
  ::std::string* release_course_id();
  void set_allocated_course_id(::std::string* course_id);

  // optional string course_title = 3;
  void clear_course_title();
  static const int kCourseTitleFieldNumber = 3;
  const ::std::string& course_title() const;
  void set_course_title(const ::std::string& value);
  void set_course_title(const char* value);
  void set_course_title(const char* value, size_t size);
  ::std::string* mutable_course_title();
  ::std::string* release_course_title();
  void set_allocated_course_title(::std::string* course_title);

  // @@protoc_insertion_point(class_scope:main.Course)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr course_cover_;
  ::google::protobuf::internal::ArenaStringPtr course_id_;
  ::google::protobuf::internal::ArenaStringPtr course_title_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_mainPage_2fall_5fcource_2eproto_impl();
  friend void  protobuf_AddDesc_mainPage_2fall_5fcource_2eproto_impl();
  friend void protobuf_AssignDesc_mainPage_2fall_5fcource_2eproto();
  friend void protobuf_ShutdownFile_mainPage_2fall_5fcource_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Course> Course_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// AlCourseRequest

// optional string page_number = 1;
inline void AlCourseRequest::clear_page_number() {
  page_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AlCourseRequest::page_number() const {
  // @@protoc_insertion_point(field_get:main.AlCourseRequest.page_number)
  return page_number_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AlCourseRequest::set_page_number(const ::std::string& value) {
  
  page_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:main.AlCourseRequest.page_number)
}
inline void AlCourseRequest::set_page_number(const char* value) {
  
  page_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:main.AlCourseRequest.page_number)
}
inline void AlCourseRequest::set_page_number(const char* value, size_t size) {
  
  page_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:main.AlCourseRequest.page_number)
}
inline ::std::string* AlCourseRequest::mutable_page_number() {
  
  // @@protoc_insertion_point(field_mutable:main.AlCourseRequest.page_number)
  return page_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AlCourseRequest::release_page_number() {
  // @@protoc_insertion_point(field_release:main.AlCourseRequest.page_number)
  
  return page_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AlCourseRequest::set_allocated_page_number(::std::string* page_number) {
  if (page_number != NULL) {
    
  } else {
    
  }
  page_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_number);
  // @@protoc_insertion_point(field_set_allocated:main.AlCourseRequest.page_number)
}

// optional string page_size = 2;
inline void AlCourseRequest::clear_page_size() {
  page_size_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AlCourseRequest::page_size() const {
  // @@protoc_insertion_point(field_get:main.AlCourseRequest.page_size)
  return page_size_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AlCourseRequest::set_page_size(const ::std::string& value) {
  
  page_size_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:main.AlCourseRequest.page_size)
}
inline void AlCourseRequest::set_page_size(const char* value) {
  
  page_size_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:main.AlCourseRequest.page_size)
}
inline void AlCourseRequest::set_page_size(const char* value, size_t size) {
  
  page_size_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:main.AlCourseRequest.page_size)
}
inline ::std::string* AlCourseRequest::mutable_page_size() {
  
  // @@protoc_insertion_point(field_mutable:main.AlCourseRequest.page_size)
  return page_size_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AlCourseRequest::release_page_size() {
  // @@protoc_insertion_point(field_release:main.AlCourseRequest.page_size)
  
  return page_size_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AlCourseRequest::set_allocated_page_size(::std::string* page_size) {
  if (page_size != NULL) {
    
  } else {
    
  }
  page_size_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_size);
  // @@protoc_insertion_point(field_set_allocated:main.AlCourseRequest.page_size)
}

inline const AlCourseRequest* AlCourseRequest::internal_default_instance() {
  return &AlCourseRequest_default_instance_.get();
}
// -------------------------------------------------------------------

// AlCourseReply

// repeated .main.Course course = 1;
inline int AlCourseReply::course_size() const {
  return course_.size();
}
inline void AlCourseReply::clear_course() {
  course_.Clear();
}
inline const ::main::Course& AlCourseReply::course(int index) const {
  // @@protoc_insertion_point(field_get:main.AlCourseReply.course)
  return course_.Get(index);
}
inline ::main::Course* AlCourseReply::mutable_course(int index) {
  // @@protoc_insertion_point(field_mutable:main.AlCourseReply.course)
  return course_.Mutable(index);
}
inline ::main::Course* AlCourseReply::add_course() {
  // @@protoc_insertion_point(field_add:main.AlCourseReply.course)
  return course_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::main::Course >*
AlCourseReply::mutable_course() {
  // @@protoc_insertion_point(field_mutable_list:main.AlCourseReply.course)
  return &course_;
}
inline const ::google::protobuf::RepeatedPtrField< ::main::Course >&
AlCourseReply::course() const {
  // @@protoc_insertion_point(field_list:main.AlCourseReply.course)
  return course_;
}

inline const AlCourseReply* AlCourseReply::internal_default_instance() {
  return &AlCourseReply_default_instance_.get();
}
// -------------------------------------------------------------------

// Course

// optional string course_cover = 1;
inline void Course::clear_course_cover() {
  course_cover_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Course::course_cover() const {
  // @@protoc_insertion_point(field_get:main.Course.course_cover)
  return course_cover_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Course::set_course_cover(const ::std::string& value) {
  
  course_cover_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:main.Course.course_cover)
}
inline void Course::set_course_cover(const char* value) {
  
  course_cover_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:main.Course.course_cover)
}
inline void Course::set_course_cover(const char* value, size_t size) {
  
  course_cover_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:main.Course.course_cover)
}
inline ::std::string* Course::mutable_course_cover() {
  
  // @@protoc_insertion_point(field_mutable:main.Course.course_cover)
  return course_cover_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Course::release_course_cover() {
  // @@protoc_insertion_point(field_release:main.Course.course_cover)
  
  return course_cover_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Course::set_allocated_course_cover(::std::string* course_cover) {
  if (course_cover != NULL) {
    
  } else {
    
  }
  course_cover_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), course_cover);
  // @@protoc_insertion_point(field_set_allocated:main.Course.course_cover)
}

// optional string course_id = 2;
inline void Course::clear_course_id() {
  course_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Course::course_id() const {
  // @@protoc_insertion_point(field_get:main.Course.course_id)
  return course_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Course::set_course_id(const ::std::string& value) {
  
  course_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:main.Course.course_id)
}
inline void Course::set_course_id(const char* value) {
  
  course_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:main.Course.course_id)
}
inline void Course::set_course_id(const char* value, size_t size) {
  
  course_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:main.Course.course_id)
}
inline ::std::string* Course::mutable_course_id() {
  
  // @@protoc_insertion_point(field_mutable:main.Course.course_id)
  return course_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Course::release_course_id() {
  // @@protoc_insertion_point(field_release:main.Course.course_id)
  
  return course_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Course::set_allocated_course_id(::std::string* course_id) {
  if (course_id != NULL) {
    
  } else {
    
  }
  course_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), course_id);
  // @@protoc_insertion_point(field_set_allocated:main.Course.course_id)
}

// optional string course_title = 3;
inline void Course::clear_course_title() {
  course_title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Course::course_title() const {
  // @@protoc_insertion_point(field_get:main.Course.course_title)
  return course_title_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Course::set_course_title(const ::std::string& value) {
  
  course_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:main.Course.course_title)
}
inline void Course::set_course_title(const char* value) {
  
  course_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:main.Course.course_title)
}
inline void Course::set_course_title(const char* value, size_t size) {
  
  course_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:main.Course.course_title)
}
inline ::std::string* Course::mutable_course_title() {
  
  // @@protoc_insertion_point(field_mutable:main.Course.course_title)
  return course_title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Course::release_course_title() {
  // @@protoc_insertion_point(field_release:main.Course.course_title)
  
  return course_title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Course::set_allocated_course_title(::std::string* course_title) {
  if (course_title != NULL) {
    
  } else {
    
  }
  course_title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), course_title);
  // @@protoc_insertion_point(field_set_allocated:main.Course.course_title)
}

inline const Course* Course::internal_default_instance() {
  return &Course_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace main

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mainPage_2fall_5fcource_2eproto__INCLUDED
